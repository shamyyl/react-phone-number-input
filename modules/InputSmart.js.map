{"version":3,"sources":["../source/InputSmart.js"],"names":["React","useCallback","PropTypes","Input","AsYouType","parsePhoneNumberCharacter","getInputValuePrefix","removeInputValuePrefix","createInput","defaultMetadata","InputSmart","ref","country","international","metadata","rest","format","value","formatter","prefix","text","input","template","getTemplate","forwardRef","propTypes","string","bool","object","isRequired","defaultProps"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,SAASC,SAAT,EAAoBC,yBAApB,QAAqD,wBAArD;AAEA,SAASC,mBAAT,EAA8BC,sBAA9B,QAA4D,oBAA5D;AAEA;;;;;AAIA,OAAO,SAASC,WAAT,CAAqBC,eAArB,EACP;AACC,WAASC,UAAT,OAKGC,GALH,EAKQ;AAAA,QAJPC,OAIO,QAJPA,OAIO;AAAA,QAHPC,aAGO,QAHPA,aAGO;AAAA,QAFPC,QAEO,QAFPA,QAEO;AAAA,QADJC,IACI;;AACP,QAAMC,MAAM,GAAGf,WAAW,CAAC,UAACgB,KAAD,EAAW;AACrC;AACA,UAAMC,SAAS,GAAG,IAAId,SAAJ,CAAcQ,OAAd,EAAuBE,QAAvB,CAAlB;AACA,UAAMK,MAAM,GAAGb,mBAAmB,CAACM,OAAD,EAAUC,aAAV,EAAyBC,QAAzB,CAAlC,CAHqC,CAIrC;;AACA,UAAIM,IAAI,GAAGF,SAAS,CAACG,KAAV,CAAgBF,MAAM,GAAGF,KAAzB,CAAX;AACA,UAAIK,QAAQ,GAAGJ,SAAS,CAACK,WAAV,EAAf;;AACA,UAAIJ,MAAJ,EAAY;AACXC,QAAAA,IAAI,GAAGb,sBAAsB,CAACa,IAAD,EAAOD,MAAP,CAA7B,CADW,CAEX;;AACA,YAAIG,QAAJ,EAAc;AACbA,UAAAA,QAAQ,GAAGf,sBAAsB,CAACe,QAAD,EAAWH,MAAX,CAAjC;AACA;AACD;;AACD,aAAO;AACNC,QAAAA,IAAI,EAAJA,IADM;AAENE,QAAAA,QAAQ,EAARA;AAFM,OAAP;AAIA,KAlByB,EAkBvB,CAACV,OAAD,EAAUE,QAAV,CAlBuB,CAA1B;AAmBA,WACC,oBAAC,KAAD,eACKC,IADL;AAEC,MAAA,GAAG,EAAEJ,GAFN;AAGC,MAAA,KAAK,EAAEN,yBAHR;AAIC,MAAA,MAAM,EAAEW;AAJT,OADD;AAOA;;AAEDN,EAAAA,UAAU,GAAGV,KAAK,CAACwB,UAAN,CAAiBd,UAAjB,CAAb;AAEAA,EAAAA,UAAU,CAACe,SAAX,GAAuB;AACtB;;;;;;;;;;AAUAb,IAAAA,OAAO,EAAEV,SAAS,CAACwB,MAXG;;AAatB;;;;;;;;;;AAUAb,IAAAA,aAAa,EAAEX,SAAS,CAACyB,IAvBH;;AAyBtB;;;AAGAb,IAAAA,QAAQ,EAAEZ,SAAS,CAAC0B,MAAV,CAAiBC;AA5BL,GAAvB;AA+BAnB,EAAAA,UAAU,CAACoB,YAAX,GAA0B;AACzBhB,IAAAA,QAAQ,EAAEL;AADe,GAA1B;AAIA,SAAOC,UAAP;AACA;AAED,eAAeF,WAAW,EAA1B","sourcesContent":["import React, { useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport Input from 'input-format/react'\nimport { AsYouType, parsePhoneNumberCharacter } from 'libphonenumber-js/core'\n\nimport { getInputValuePrefix, removeInputValuePrefix } from './inputValuePrefix'\n\n/**\n * This input uses `input-format` library\n * for \"smart\" caret positioning.\n */\nexport function createInput(defaultMetadata)\n{\n\tfunction InputSmart({\n\t\tcountry,\n\t\tinternational,\n\t\tmetadata,\n\t\t...rest\n\t}, ref) {\n\t\tconst format = useCallback((value) => {\n\t\t\t// \"As you type\" formatter.\n\t\t\tconst formatter = new AsYouType(country, metadata)\n\t\t\tconst prefix = getInputValuePrefix(country, international, metadata)\n\t\t\t// Format the number.\n\t\t\tlet text = formatter.input(prefix + value)\n\t\t\tlet template = formatter.getTemplate()\n\t\t\tif (prefix) {\n\t\t\t\ttext = removeInputValuePrefix(text, prefix)\n\t\t\t\t// `AsYouType.getTemplate()` can be `undefined`.\n\t\t\t\tif (template) {\n\t\t\t\t\ttemplate = removeInputValuePrefix(template, prefix)\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {\n\t\t\t\ttext,\n\t\t\t\ttemplate\n\t\t\t}\n\t\t}, [country, metadata])\n\t\treturn (\n\t\t\t<Input\n\t\t\t\t{...rest}\n\t\t\t\tref={ref}\n\t\t\t\tparse={parsePhoneNumberCharacter}\n\t\t\t\tformat={format}/>\n\t\t)\n\t}\n\n\tInputSmart = React.forwardRef(InputSmart)\n\n\tInputSmart.propTypes = {\n\t\t/**\n\t\t * A two-letter country code for formatting `value`\n\t\t * as a national phone number (e.g. `(800) 555 35 35`).\n\t\t * E.g. \"US\", \"RU\", etc.\n\t\t * If no `country` is passed then `value`\n\t\t * is formatted as an international phone number.\n\t\t * (e.g. `+7 800 555 35 35`)\n\t\t * Perhaps the `country` property should have been called `defaultCountry`\n\t\t * because if `value` is an international number then `country` is ignored.\n\t\t */\n\t\tcountry: PropTypes.string,\n\n\t\t/**\n\t\t * If `country` property is passed along with `international={true}` property\n\t\t * then the phone number will be input in \"international\" format for that `country`\n\t\t * (without \"country calling code\").\n\t\t * For example, if `country=\"US\"` property is passed to \"without country select\" input\n\t\t * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\n\t\t * But if both `country=\"US\"` and `international={true}` properties are passed then\n\t\t * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\n\t\t * (without \"country calling code\" `+1`).\n\t\t */\n\t\tinternational: PropTypes.bool,\n\n\t\t/**\n\t\t * `libphonenumber-js` metadata.\n\t\t */\n\t\tmetadata: PropTypes.object.isRequired\n\t}\n\n\tInputSmart.defaultProps = {\n\t\tmetadata: defaultMetadata\n\t}\n\n\treturn InputSmart\n}\n\nexport default createInput()"],"file":"InputSmart.js"}