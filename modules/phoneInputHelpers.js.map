{"version":3,"sources":["../source/phoneInputHelpers.js"],"names":["parsePhoneNumberFromString","getCountryCallingCode","AsYouType","Metadata","getPreSelectedCountry","phoneNumber","country","countries","includeInternationalOption","metadata","indexOf","undefined","length","getCountrySelectOptions","country_names","country_select_options","map","value","label","sort","a","b","compare_strings","unshift","ZZ","parsePhoneNumber","generateNationalNumberDigits","formatNational","replace","migrateParsedInputForNewCountry","previous_country","new_country","preferNationalFormat","strip_country_calling_code","e164","number","partial_national_significant_number","getNationalSignificantNumberDigits","trimNumber","nationalSignificantNumberPart","overflowDigitsCount","getMaxNumberLength","slice","possibleLengths","getCountryForPartialE164Number","partialE164Number","derived_country","get_country_from_possibly_incomplete_international_phone_number","could_number_belong_to_country","parseInput","input","prevInput","defaultCountry","limitMaxLength","formatter","String","prototype","localeCompare","country_calling_prefix","Object","keys","country_calling_codes","country_calling_code","getNumber","nationalNumber","i"],"mappings":"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","sourcesContent":["import {\n\tparsePhoneNumberFromString,\n\tgetCountryCallingCode,\n\tAsYouType,\n\tMetadata\n} from 'libphonenumber-js/core'\n\n/**\n * Decides which country should be pre-selected\n * when the phone number input component is first mounted.\n * @param  {object?} phoneNumber - An instance of `PhoneNumber` class.\n * @param  {string?} country - Pre-defined country (two-letter code).\n * @param  {string[]?} countries - A list of countries available.\n * @param  {boolean} includeInternationalOption - Whether \"International\" country option is available.\n * @param  {object} metadata - `libphonenumber-js` metadata\n * @return {string?}\n */\nexport function getPreSelectedCountry(phoneNumber, country, countries, includeInternationalOption, metadata)\n{\n\t// If can get country from E.164 phone number\n\t// then it overrides the `country` passed (or not passed).\n\tif (phoneNumber && phoneNumber.country)\n\t{\n\t\t// `country` will be left `undefined` in case of non-detection.\n\t\tcountry = phoneNumber.country\n\t}\n\n\t// Only pre-select a country if it's in the available `countries` list.\n\tif (countries && countries.indexOf(country) < 0)\n\t{\n\t\tcountry = undefined\n\t}\n\n\t// If there will be no \"International\" option\n\t// then some `country` must be selected.\n\t// It will still be the wrong country though.\n\t// But still country `<select/>` can't be left in a broken state.\n\tif (!country && !includeInternationalOption && countries && countries.length > 0)\n\t{\n\t\tcountry = countries[0]\n\t}\n\n\treturn country\n}\n\n/**\n * Generates a sorted list of country `<select/>` options.\n * @param  {string[]} countries - A list of two-letter (\"ISO 3166-1 alpha-2\") country codes.\n * @param  {object} labels - Custom country labels. E.g. `{ RU: 'Россия', US: 'США', ... }`.\n * @param  {boolean} includeInternationalOption - Whether should include \"International\" option at the top of the list.\n * @return {object[]} A list of objects having shape `{ value : string, label : string }`.\n */\nexport function getCountrySelectOptions(countries, country_names, includeInternationalOption)\n{\n\t// Generates a `<Select/>` option for each country.\n\tconst country_select_options = countries.map((country) =>\n\t({\n\t\tvalue : country,\n\t\tlabel : country_names[country]\n\t}))\n\n\t// Sort the list of countries alphabetically.\n\tcountry_select_options.sort((a, b) => compare_strings(a.label, b.label))\n\n\t// Add the \"International\" option to the country list (if suitable)\n\tif (includeInternationalOption)\n\t{\n\t\tcountry_select_options.unshift\n\t\t({\n\t\t\tlabel : country_names.ZZ\n\t\t})\n\t}\n\n\treturn country_select_options\n}\n\n/**\n * Parses a E.164 phone number to an instance of `PhoneNumber` class.\n * @param {string?} value = E.164 phone number.\n * @param  {object} metadata - `libphonenumber-js` metadata\n * @example\n * parsePhoneNumber('+78005553535')\n */\nexport function parsePhoneNumber(value, metadata)\n{\n\treturn parsePhoneNumberFromString(value || '', metadata)\n}\n\n/**\n * Generates national number digits for a parsed phone.\n * May prepend national prefix.\n * The phone number must be a complete and valid phone number.\n * @param  {object} phoneNumber - An instance of `PhoneNumber` class.\n * @param  {object} metadata - `libphonenumber-js` metadata\n * @return {string}\n * @example\n * getNationalNumberDigits({ country: 'RU', phone: '8005553535' })\n * // returns '88005553535'\n */\nexport function generateNationalNumberDigits(phoneNumber)\n{\n\treturn phoneNumber.formatNational().replace(/\\D/g, '')\n}\n\n/**\n * Migrates parsed `<input/>` `value` for the newly selected `country`.\n * @param {string?} value - The `value` parsed from phone number `<input/>` (it's the `parsed_input` state property, not the `value` property).\n * @param {string?} previousCountry - Previously selected country.\n * @param {string?} newCountry - Newly selected country. Can't be same as previously selected country.\n * @param {object} metadata - `libphonenumber-js` metadata.\n * @param {boolean} preferNationalFormat - whether should attempt to convert from international to national number for the new country.\n * @return {string?}\n */\nexport function migrateParsedInputForNewCountry\n(\n\tvalue,\n\tprevious_country,\n\tnew_country,\n\tmetadata,\n\tpreferNationalFormat\n)\n{\n\t// If `parsed_input` is empty\n\t// then no need to migrate anything.\n\tif (!value) {\n\t\treturn value\n\t}\n\n\t// If switching to some country.\n\t// (from \"International\" or another country)\n\t// If switching from \"International\" then `value` starts with a `+`.\n\t// Otherwise it may or may not start with a `+`.\n\tif (new_country)\n\t{\n\t\t// If the phone number was entered in international format\n\t\t// then migrate it to the newly selected country.\n\t\t// The phone number may be incomplete.\n\t\t// The phone number entered not necessarily starts with\n\t\t// the previously selected country phone prefix.\n\t\tif (value[0] === '+')\n\t\t{\n\t\t\t// If the international phone number is for the new country\n\t\t\t// then convert it to local if required.\n\t\t\tif (preferNationalFormat)\n\t\t\t{\n\t\t\t\t// // If a phone number is being input in international form\n\t\t\t\t// // and the country can already be derived from it,\n\t\t\t\t// // and if it is the new country, then format as a national number.\n\t\t\t\t// const derived_country = get_country_from_possibly_incomplete_international_phone_number(value, metadata)\n\t\t\t\t// if (derived_country === new_country)\n\t\t\t\t// {\n\t\t\t\t// \treturn strip_country_calling_code(value, derived_country, metadata)\n\t\t\t\t// }\n\n\t\t\t\t// Actually, the two countries don't necessarily need to match:\n\t\t\t\t// the condition could be looser here, because several countries\n\t\t\t\t// might share the same international phone number format\n\t\t\t\t// (for example, \"NANPA\" countries like US, Canada, etc).\n\t\t\t\t// The looser condition would be just \"same nternational phone number format\"\n\t\t\t\t// which would mean \"same country calling code\" in the context of `libphonenumber-js`.\n\t\t\t\tif (value.indexOf('+' + getCountryCallingCode(new_country, metadata)) === 0)\n\t\t\t\t{\n\t\t\t\t\treturn strip_country_calling_code(value, new_country, metadata)\n\t\t\t\t}\n\n\t\t\t\t// Simply discard the previously entered international phone number,\n\t\t\t\t// because otherwise any \"smart\" transformation like getting the\n\t\t\t\t// \"national (significant) number\" part and then prepending the\n\t\t\t\t// newly selected country's \"country calling code\" to it\n\t\t\t\t// would just be confusing for a user without being actually useful.\n\t\t\t\treturn ''\n\n\t\t\t\t// // Simply strip the leading `+` character\n\t\t\t\t// // therefore simply converting all digits into a \"local\" phone number.\n\t\t\t\t// // https://github.com/catamphetamine/react-phone-number-input/issues/287\n\t\t\t\t// return value.slice(1)\n\t\t\t}\n\n\t\t\t// If the international phone number already contains\n\t\t\t// any country calling code then trim the country calling code part.\n\t\t\t// (that could also be the newly selected country phone code prefix as well)\n\t\t\t// `value` doesn't neccessarily belong to `previous_country`.\n\t\t\t// (e.g. if a user enters an international number\n\t\t\t//  not belonging to any of the reduced `countries` list).\n\t\t\tvalue = strip_country_calling_code(value, previous_country, metadata)\n\n\t\t\t// Prepend country calling code prefix\n\t\t\t// for the newly selected country.\n\t\t\treturn e164(value, new_country, metadata) || `+${getCountryCallingCode(new_country, metadata)}`\n\t\t}\n\t}\n\t// If switching to \"International\" from a country.\n\telse\n\t{\n\t\t// If the phone number was entered in national format.\n\t\tif (value[0] !== '+')\n\t\t{\n\t\t\t// Format the national phone number as an international one.\n\t\t\t// The phone number entered not necessarily even starts with\n\t\t\t// the previously selected country phone prefix.\n\t\t\t// Even if the phone number belongs to whole another country\n\t\t\t// it will still be parsed into some national phone number.\n\t\t\treturn e164(value, previous_country, metadata) || ''\n\t\t}\n\t}\n\n\treturn value\n}\n\n/**\n * Converts phone number digits to a (possibly incomplete) E.164 phone number.\n * @param  {string?} number - A possibly incomplete phone number digits string. Can be a possibly incomplete E.164 phone number.\n * @param  {string?} country\n * @param  {[object} metadata - `libphonenumber-js` metadata.\n * @return {string?}\n */\nexport function e164(number, country, metadata) {\n\tif (!number) {\n\t\treturn\n\t}\n\t// If the phone number is being input in international format.\n\tif (number[0] === '+') {\n\t\t// If it's just the `+` sign then return nothing.\n\t\tif (number === '+') {\n\t\t\treturn\n\t\t}\n\t\t// If there are any digits then the `value` is returned as is.\n\t\treturn number\n\t}\n\t// For non-international phone numbers\n\t// an accompanying country code is required.\n\tif (!country) {\n\t\treturn\n\t}\n\tconst partial_national_significant_number = getNationalSignificantNumberDigits(number, country, metadata)\n\tif (partial_national_significant_number) {\n\t\treturn `+${getCountryCallingCode(country, metadata)}${partial_national_significant_number}`\n\t}\n}\n\n/**\n * Trims phone number digits if they exceed the maximum possible length\n * for a national (significant) number for the country.\n * @param  {string} number - A possibly incomplete phone number digits string. Can be a possibly incomplete E.164 phone number.\n * @param  {string} country\n * @param  {object} metadata - `libphonenumber-js` metadata.\n * @return {string} Can be empty.\n */\nexport function trimNumber(number, country, metadata)\n{\n\tconst nationalSignificantNumberPart = getNationalSignificantNumberDigits(number, country, metadata)\n\tif (nationalSignificantNumberPart) {\n\t\tconst overflowDigitsCount = nationalSignificantNumberPart.length - getMaxNumberLength(country, metadata)\n\t\tif (overflowDigitsCount > 0) {\n\t\t\treturn number.slice(0, number.length - overflowDigitsCount)\n\t\t}\n\t}\n\treturn number\n}\n\nfunction getMaxNumberLength(country, metadata)\n{\n\t// Get \"possible lengths\" for a phone number of the country.\n\tmetadata = new Metadata(metadata)\n\tmetadata.country(country)\n\t// Return the last \"possible length\".\n\treturn metadata.possibleLengths()[metadata.possibleLengths().length - 1]\n}\n\n// If the phone number being input is an international one\n// then tries to derive the country from the phone number.\n// (regardless of whether there's any country currently selected)\n/**\n * @param {string} parsedInput - A possibly incomplete E.164 phone number.\n * @param {string?} country - Currently selected country.\n * @param {string[]?} countries - A list of available countries. If not passed then \"all countries\" are assumed.\n * @param {boolean} includeInternationalOption - Whether \"International\" country option is available.\n * @param  {object} metadata - `libphonenumber-js` metadata.\n * @return {string?}\n */\nexport function getCountryForPartialE164Number\n(\n\tpartialE164Number,\n\tcountry,\n\tcountries,\n\tincludeInternationalOption,\n\tmetadata\n)\n{\n\tif (partialE164Number === '+')\n\t{\n\t\t// Don't change the currently selected country yet.\n\t\treturn country\n\t}\n\n\tconst derived_country = get_country_from_possibly_incomplete_international_phone_number(partialE164Number, metadata)\n\n\t// If a phone number is being input in international form\n\t// and the country can already be derived from it,\n\t// then select that country.\n\tif (derived_country && (!countries || (countries.indexOf(derived_country) >= 0)))\n\t{\n\t\treturn derived_country\n\t}\n\t// If \"International\" country option has not been disabled\n\t// and the international phone number entered doesn't correspond\n\t// to the currently selected country then reset the currently selected country.\n\telse if (country &&\n\t\tincludeInternationalOption &&\n\t\t!could_number_belong_to_country(partialE164Number, country, metadata))\n\t{\n\t\treturn undefined\n\t}\n\n\t// Don't change the currently selected country.\n\treturn country\n}\n\n/**\n * Parses `<input/>` value. Derives `country` from `input`. Derives an E.164 `value`.\n * @param  {string?} input — Parsed `<input/>` value. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\n * @param  {string?} prevInput — Previous parsed `<input/>` value. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\n * @param  {string?} country - Currently selected country.\n * @param  {string[]?} countries - A list of available countries. If not passed then \"all countries\" are assumed.\n * @param  {boolean} includeInternationalOption - Whether \"International\" country option is available.\n * @param  {boolean} limitMaxLength — Whether to enable limiting phone number max length.\n * @param  {object} metadata - `libphonenumber-js` metadata.\n * @return {object} An object of shape `{ input, country, value }`.\n */\nexport function parseInput(\n\tinput,\n\tprevInput,\n\tcountry,\n\tdefaultCountry,\n\tcountries,\n\tincludeInternationalOption,\n\tlimitMaxLength,\n\tmetadata\n) {\n\t// Trim the input to not exceed the maximum possible number length.\n\tif (input && country && limitMaxLength) {\n\t\tinput = trimNumber(input, country, metadata)\n\t}\n\n\t// If this `onChange()` event was triggered\n\t// as a result of selecting \"International\" country\n\t// then force-prepend a `+` sign if the phone number\n\t// `<input/>` value isn't in international format.\n\tif (input && !country && input[0] !== '+') {\n\t\tinput = '+' + input\n\t}\n\n\t// If the previously entered phone number\n\t// has been entered in international format\n\t// and the user decides to erase it,\n\t// then also reset the `country`\n\t// because it was most likely automatically selected\n\t// while the user was typing in the phone number\n\t// in international format.\n\t// This fixes the issue when a user is presented\n\t// with a phone number input with no country selected\n\t// and then types in their local phone number\n\t// then discovers that the input's messed up\n\t// (a `+` has been prepended at the start of their input\n\t//  and a random country has been selected),\n\t// decides to undo it all by erasing everything\n\t// and then types in their local phone number again\n\t// resulting in a seemingly correct phone number\n\t// but in reality that phone number has incorrect country.\n\t// https://github.com/catamphetamine/react-phone-number-input/issues/273\n\tif (!input && prevInput && prevInput[0] === '+') {\n\t\tcountry = defaultCountry\n\t}\n\t// Also resets such \"randomly\" selected country\n\t// as soon as the user erases the number\n\t// digit-by-digit up to the leading `+` sign.\n\tif (input === '+' && prevInput && prevInput[0] === '+' && prevInput.length > '+'.length) {\n\t\tcountry = undefined\n\t}\n\n\t// Generate the new `value` property.\n\tlet value\n\tif (input) {\n\t\tif (input[0] === '+') {\n\t\t\tif (input !== '+') {\n\t\t\t\tvalue = input\n\t\t\t}\n\t\t} else {\n\t\t\tvalue = e164(input, country, metadata)\n\t\t}\n\t}\n\n\t// Derive the country from the phone number.\n\t// (regardless of whether there's any country currently selected)\n\tif (value) {\n\t\tcountry = getCountryForPartialE164Number(\n\t\t\tvalue,\n\t\t\tcountry,\n\t\t\tcountries,\n\t\t\tincludeInternationalOption,\n\t\t\tmetadata\n\t\t)\n\t}\n\n\treturn {\n\t\tinput,\n\t\tcountry,\n\t\tvalue\n\t}\n}\n\n/**\n * Determines the country for a given (possibly incomplete) E.164 phone number.\n * @param  {string} number - A possibly incomplete E.164 phone number.\n * @param  {object} metadata - `libphonenumber-js` metadata.\n * @return {string?}\n */\nexport function get_country_from_possibly_incomplete_international_phone_number(number, metadata)\n{\n\tconst formatter = new AsYouType(null, metadata)\n\tformatter.input(number)\n\t// `001` is a special \"non-geograpical entity\" code\n\t// in Google's `libphonenumber` library.\n\tif (formatter.country === '001') {\n\t\treturn\n\t}\n\treturn formatter.country\n}\n\n/**\n * Compares two strings.\n * A helper for `Array.sort()`.\n */\nexport function compare_strings(a, b) {\n  // Use `String.localeCompare` if it's available.\n  // https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\n  // Which means everyone except IE <= 10 and Safari <= 10.\n  // `localeCompare()` is available in latest Node.js versions.\n  /* istanbul ignore else */\n  if (String.prototype.localeCompare) {\n    return a.localeCompare(b);\n  }\n  /* istanbul ignore next */\n  return a < b ? -1 : (a > b ? 1 : 0);\n}\n\n/**\n * Strips `+${countryCallingCode}` prefix from an E.164 phone number.\n * @param {string} number - (possibly incomplete) E.164 phone number.\n * @param {string?} country - A possible country for this phone number.\n * @param {object} metadata - `libphonenumber-js` metadata.\n * @return {string}\n */\nexport function strip_country_calling_code(number, country, metadata)\n{\n\t// Just an optimization, so that it\n\t// doesn't have to iterate through all country calling codes.\n\tif (country)\n\t{\n\t\tconst country_calling_prefix = '+' + getCountryCallingCode(country, metadata)\n\n\t\t// If `country` fits the actual `number`.\n\t\tif (number.length < country_calling_prefix.length)\n\t\t{\n\t\t\tif (country_calling_prefix.indexOf(number) === 0)\n\t\t\t{\n\t\t\t\treturn ''\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (number.indexOf(country_calling_prefix) === 0)\n\t\t\t{\n\t\t\t\treturn number.slice(country_calling_prefix.length)\n\t\t\t}\n\t\t}\n\t}\n\n\t// If `country` doesn't fit the actual `number`.\n\t// Try all available country calling codes.\n\tfor (const country_calling_code of Object.keys(metadata.country_calling_codes))\n\t{\n\t\tif (number.indexOf(country_calling_code) === '+'.length)\n\t\t{\n\t\t\treturn number.slice('+'.length + country_calling_code.length)\n\t\t}\n\t}\n\n\treturn ''\n}\n\n/**\n * Parses a partially entered national phone number digits\n * (or a partially entered E.164 international phone number)\n * and returns the national significant number part.\n * National significant number returned doesn't come with a national prefix.\n * @param {string} number - National number digits. Or possibly incomplete E.164 phone number.\n * @param {string?} country\n * @param {object} metadata - `libphonenumber-js` metadata.\n * @return {string} [result]\n */\nexport function getNationalSignificantNumberDigits(number, country, metadata) {\n\t// Create \"as you type\" formatter.\n\tconst formatter = new AsYouType(country, metadata)\n\t// Input partial national phone number.\n\tformatter.input(number)\n\t// Return the parsed partial national phone number.\n\tconst phoneNumber = formatter.getNumber()\n\treturn phoneNumber && phoneNumber.nationalNumber\n}\n\n/**\n * Checks if a partially entered E.164 phone number could belong to a country.\n * @param  {string} number\n * @param  {string} country\n * @return {boolean}\n */\nexport function could_number_belong_to_country(number, country, metadata)\n{\n\tconst country_calling_code = getCountryCallingCode(country, metadata)\n\n\tlet i = 0\n\twhile (i + 1 < number.length && i < country_calling_code.length)\n\t{\n\t\tif (number[i + 1] !== country_calling_code[i])\n\t\t{\n\t\t\treturn false\n\t\t}\n\t\ti++\n\t}\n\n\treturn true\n}"],"file":"phoneInputHelpers.js"}