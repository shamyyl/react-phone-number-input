{"version":3,"file":"react-phone-number-input-mobile.js","sources":["../node_modules/classnames/index.js","../node_modules/input-format/modules/parse.js","../node_modules/input-format/modules/edit.js","../node_modules/input-format/modules/helpers.js","../node_modules/input-format/modules/close braces.js","../node_modules/input-format/modules/template formatter.js","../node_modules/input-format/modules/format.js","../node_modules/input-format/modules/dom.js","../node_modules/input-format/modules/input control.js","../node_modules/input-format/modules/react/Input.js","../node_modules/libphonenumber-js/es6/ParseError.js","../node_modules/libphonenumber-js/es6/constants.js","../node_modules/libphonenumber-js/es6/util.js","../node_modules/libphonenumber-js/es6/metadata.js","../node_modules/libphonenumber-js/es6/tools/semver-compare.js","../node_modules/libphonenumber-js/es6/extension.js","../node_modules/libphonenumber-js/es6/isViablePhoneNumber.js","../node_modules/libphonenumber-js/es6/parseDigits.js","../node_modules/libphonenumber-js/es6/parseIncompletePhoneNumber.js","../node_modules/libphonenumber-js/es6/getNumberType_.js","../node_modules/libphonenumber-js/es6/isPossibleNumber_.js","../node_modules/libphonenumber-js/es6/IDD.js","../node_modules/libphonenumber-js/es6/RFC3966.js","../node_modules/libphonenumber-js/es6/format_.js","../node_modules/libphonenumber-js/es6/PhoneNumber.js","../node_modules/libphonenumber-js/es6/validate_.js","../node_modules/libphonenumber-js/es6/parse_.js","../node_modules/libphonenumber-js/es6/parsePhoneNumber_.js","../node_modules/libphonenumber-js/es6/parsePhoneNumber.js","../node_modules/libphonenumber-js/es6/parsePhoneNumberFromString_.js","../node_modules/libphonenumber-js/es6/parsePhoneNumberFromString.js","../node_modules/libphonenumber-js/es6/AsYouType.js","../node_modules/libphonenumber-js/es6/getCountries.js","../modules/inputValuePrefix.js","../modules/InputSmart.js","../modules/InputBasic.js","../node_modules/libphonenumber-js/es6/formatIncompletePhoneNumber.js","../modules/Flag.js","../modules/InternationalIcon.js","../modules/countries.js","../modules/CountryIcon.js","../modules/PropTypes.js","../modules/phoneInputHelpers.js","../modules/PhoneInputWithCountry.js","../modules/libphonenumber/formatPhoneNumber.js","../modules/libphonenumber/isValidPhoneNumber.js","../modules/libphonenumber/isPossiblePhoneNumber.js","../node_modules/country-flag-icons/modules/unicode.js","../modules/CountrySelect.js","../modules/PhoneInputWithCountryDefault.js","../mobile/index.js"],"sourcesContent":["/*!\n  Copyright (c) 2016 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tclasses.push(classNames.apply(null, arg));\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = parse;\n// Parses the `text`.\n//\n// Returns `{ value, caret }` where `caret` is\n// the caret position inside `value`\n// corresponding to the `caret_position` inside `text`.\n//\n// The `text` is parsed by feeding each character sequentially to\n// `parse_character(character, value)` function\n// and appending the result (if it's not `undefined`) to `value`.\n//\n// Example:\n//\n// `text` is `8 (800) 555-35-35`,\n// `caret_position` is `4` (before the first `0`).\n// `parse_character` is `(character, value) =>\n//   if (character >= '0' && character <= '9') { return character }`.\n//\n// then `parse()` outputs `{ value: '88005553535', caret: 2 }`.\n//\nfunction parse(text, caret_position, parse_character) {\n\tvar value = '';\n\n\tvar focused_input_character_index = 0;\n\n\tvar index = 0;\n\twhile (index < text.length) {\n\t\tvar character = parse_character(text[index], value);\n\n\t\tif (character !== undefined) {\n\t\t\tvalue += character;\n\n\t\t\tif (caret_position !== undefined) {\n\t\t\t\tif (caret_position === index) {\n\t\t\t\t\tfocused_input_character_index = value.length - 1;\n\t\t\t\t} else if (caret_position > index) {\n\t\t\t\t\tfocused_input_character_index = value.length;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tindex++;\n\t}\n\n\t// If caret position wasn't specified\n\tif (caret_position === undefined) {\n\t\t// Then set caret position to \"after the last input character\"\n\t\tfocused_input_character_index = value.length;\n\t}\n\n\tvar result = {\n\t\tvalue: value,\n\t\tcaret: focused_input_character_index\n\t};\n\n\treturn result;\n}\n//# sourceMappingURL=parse.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = edit;\n// Edits text `value` (if `operation` is passed) and repositions the `caret` if needed.\n//\n// Example:\n//\n// value - '88005553535'\n// caret - 2 // starting from 0; is positioned before the first zero\n// operation - 'Backspace'\n//\n// Returns\n// {\n// \tvalue: '8005553535'\n// \tcaret: 1\n// }\n//\n// Currently supports just 'Delete' and 'Backspace' operations\n//\nfunction edit(value, caret, operation) {\n\tswitch (operation) {\n\t\tcase 'Backspace':\n\t\t\t// If there exists the previous character,\n\t\t\t// then erase it and reposition the caret.\n\t\t\tif (caret > 0) {\n\t\t\t\t// Remove the previous character\n\t\t\t\tvalue = value.slice(0, caret - 1) + value.slice(caret);\n\t\t\t\t// Position the caret where the previous (erased) character was\n\t\t\t\tcaret--;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'Delete':\n\t\t\t// Remove current digit (if any)\n\t\t\tvalue = value.slice(0, caret) + value.slice(caret + 1);\n\t\t\tbreak;\n\t}\n\n\treturn { value: value, caret: caret };\n}\n//# sourceMappingURL=edit.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.count_occurences = count_occurences;\n// Counts all occurences of a symbol in a string\nfunction count_occurences(symbol, string) {\n\tvar count = 0;\n\t// Using `.split('')` here instead of normal `for ... of`\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\n\t// (the ones consisting of four bytes)\n\t// but template placeholder characters don't fall into that range\n\t// so skipping such miscellaneous \"exotic\" characters\n\t// won't matter here for just counting placeholder character occurrences.\n\tfor (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar character = _ref;\n\n\t\tif (character === symbol) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n//# sourceMappingURL=helpers.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = close_braces;\n\nvar _helpers = require('./helpers');\n\nfunction close_braces(retained_template, template) {\n\tvar placeholder = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'x';\n\tvar empty_placeholder = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ' ';\n\n\tvar cut_before = retained_template.length;\n\n\tvar opening_braces = (0, _helpers.count_occurences)('(', retained_template);\n\tvar closing_braces = (0, _helpers.count_occurences)(')', retained_template);\n\n\tvar dangling_braces = opening_braces - closing_braces;\n\n\twhile (dangling_braces > 0 && cut_before < template.length) {\n\t\tretained_template += template[cut_before].replace(placeholder, empty_placeholder);\n\n\t\tif (template[cut_before] === ')') {\n\t\t\tdangling_braces--;\n\t\t}\n\n\t\tcut_before++;\n\t}\n\n\treturn retained_template;\n}\n//# sourceMappingURL=close braces.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nexports.default = function (template) {\n\tvar placeholder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'x';\n\tvar should_close_braces = arguments[2];\n\n\tif (!template) {\n\t\treturn function (value) {\n\t\t\treturn { text: value };\n\t\t};\n\t}\n\n\tvar characters_in_template = (0, _helpers.count_occurences)(placeholder, template);\n\n\treturn function (value) {\n\t\tif (!value) {\n\t\t\treturn { text: '', template: template };\n\t\t}\n\n\t\tvar value_character_index = 0;\n\t\tvar filled_in_template = '';\n\n\t\t// Using `.split('')` here instead of normal `for ... of`\n\t\t// because the importing application doesn't neccessarily include an ES6 polyfill.\n\t\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\n\t\t// (the ones consisting of four bytes)\n\t\t// but template placeholder characters don't fall into that range\n\t\t// and appending UTF-8 characters to a string in parts still works.\n\t\tfor (var _iterator = template.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\t\tvar _ref;\n\n\t\t\tif (_isArray) {\n\t\t\t\tif (_i >= _iterator.length) break;\n\t\t\t\t_ref = _iterator[_i++];\n\t\t\t} else {\n\t\t\t\t_i = _iterator.next();\n\t\t\t\tif (_i.done) break;\n\t\t\t\t_ref = _i.value;\n\t\t\t}\n\n\t\t\tvar character = _ref;\n\n\t\t\tif (character !== placeholder) {\n\t\t\t\tfilled_in_template += character;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tfilled_in_template += value[value_character_index];\n\t\t\tvalue_character_index++;\n\n\t\t\t// If the last available value character has been filled in,\n\t\t\t// then return the filled in template\n\t\t\t// (either trim the right part or retain it,\n\t\t\t//  if no more character placeholders in there)\n\t\t\tif (value_character_index === value.length) {\n\t\t\t\t// If there are more character placeholders\n\t\t\t\t// in the right part of the template\n\t\t\t\t// then simply trim it.\n\t\t\t\tif (value.length < characters_in_template) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (should_close_braces) {\n\t\t\tfilled_in_template = (0, _closeBraces2.default)(filled_in_template, template);\n\t\t}\n\n\t\treturn { text: filled_in_template, template: template };\n\t};\n};\n\nvar _helpers = require('./helpers');\n\nvar _closeBraces = require('./close braces');\n\nvar _closeBraces2 = _interopRequireDefault(_closeBraces);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n//# sourceMappingURL=template formatter.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = format;\n\nvar _templateFormatter = require('./template formatter');\n\nvar _templateFormatter2 = _interopRequireDefault(_templateFormatter);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Formats `value` value preserving `caret` at the same character.\n//\n// `{ value, caret }` attribute is the result of `parse()` function call.\n//\n// Returns `{ text, caret }` where the new `caret` is the caret position\n// inside `text` text corresponding to the original `caret` position inside `value`.\n//\n// `formatter(value)` is a function returning `{ text, template }`.\n//\n// `text` is the `value` value formatted using `template`.\n// It may either cut off the non-filled right part of the `template`\n// or it may fill the non-filled character placeholders\n// in the right part of the `template` with `spacer`\n// which is a space (' ') character by default.\n//\n// `template` is the template used to format the `value`.\n// It can be either a full-length template or a partial template.\n//\n// `formatter` can also be a string — a `template`\n// where character placeholders are denoted by 'x'es.\n// In this case `formatter` function is automatically created.\n//\n// Example:\n//\n// `value` is '880',\n// `caret` is `2` (before the first `0`)\n//\n// `formatter` is `'880' =>\n//   { text: '8 (80 )', template: 'x (xxx) xxx-xx-xx' }`\n//\n// The result is `{ text: '8 (80 )', caret: 4 }`.\n//\nfunction format(value, caret, formatter) {\n\tif (typeof formatter === 'string') {\n\t\tformatter = (0, _templateFormatter2.default)(formatter);\n\t}\n\n\tvar _ref = formatter(value) || {},\n\t    text = _ref.text,\n\t    template = _ref.template;\n\n\tif (text === undefined) {\n\t\ttext = value;\n\t}\n\n\tif (template) {\n\t\tif (caret === undefined) {\n\t\t\tcaret = text.length;\n\t\t} else {\n\t\t\tvar index = 0;\n\t\t\tvar found = false;\n\n\t\t\tvar possibly_last_input_character_index = -1;\n\n\t\t\twhile (index < text.length && index < template.length) {\n\t\t\t\t// Character placeholder found\n\t\t\t\tif (text[index] !== template[index]) {\n\t\t\t\t\tif (caret === 0) {\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\tcaret = index;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tpossibly_last_input_character_index = index;\n\n\t\t\t\t\tcaret--;\n\t\t\t\t}\n\n\t\t\t\tindex++;\n\t\t\t}\n\n\t\t\t// If the caret was positioned after last input character,\n\t\t\t// then the text caret index is just after the last input character.\n\t\t\tif (!found) {\n\t\t\t\tcaret = possibly_last_input_character_index + 1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { text: text, caret: caret };\n}\n//# sourceMappingURL=format.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.getSelection = getSelection;\nexports.getOperation = getOperation;\nexports.getCaretPosition = getCaretPosition;\nexports.setCaretPosition = setCaretPosition;\n// Gets <input/> selection bounds\nfunction getSelection(element) {\n\t// If no selection, return nothing\n\tif (element.selectionStart === element.selectionEnd) {\n\t\treturn;\n\t}\n\n\treturn { start: element.selectionStart, end: element.selectionEnd };\n}\n\n// Key codes\nvar Keys = exports.Keys = {\n\tBackspace: 8,\n\tDelete: 46\n\n\t// Finds out the operation to be intercepted and performed\n\t// based on the key down event `keyCode`.\n};function getOperation(event) {\n\tswitch (event.keyCode) {\n\t\tcase Keys.Backspace:\n\t\t\treturn 'Backspace';\n\n\t\tcase Keys.Delete:\n\t\t\treturn 'Delete';\n\t}\n}\n\n// Gets <input/> caret position\nfunction getCaretPosition(element) {\n\treturn element.selectionStart;\n}\n\n// Sets <input/> caret position\nfunction setCaretPosition(element, caret_position) {\n\t// Sanity check\n\tif (caret_position === undefined) {\n\t\treturn;\n\t}\n\n\t// Set caret position.\n\t// There has been an issue with caret positioning on Android devices.\n\t// https://github.com/catamphetamine/input-format/issues/2\n\t// I was revisiting this issue and looked for similar issues in other libraries.\n\t// For example, there's [`text-mask`](https://github.com/text-mask/text-mask) library.\n\t// They've had exactly the same issue when the caret seemingly refused to be repositioned programmatically.\n\t// The symptoms were the same: whenever the caret passed through a non-digit character of a mask (a whitespace, a bracket, a dash, etc), it looked as if it placed itself one character before its correct position.\n\t// https://github.com/text-mask/text-mask/issues/300\n\t// They seem to have found a basic fix for it: calling `input.setSelectionRange()` in a timeout rather than instantly for Android devices.\n\t// https://github.com/text-mask/text-mask/pull/400/files\n\t// I've implemented the same workaround here.\n\tif (isAndroid()) {\n\t\tsetTimeout(function () {\n\t\t\treturn element.setSelectionRange(caret_position, caret_position);\n\t\t}, 0);\n\t} else {\n\t\telement.setSelectionRange(caret_position, caret_position);\n\t}\n}\n\nfunction isAndroid() {\n\t// `navigator` is not defined when running mocha tests.\n\tif (typeof navigator !== 'undefined') {\n\t\treturn ANDROID_USER_AGENT_REG_EXP.test(navigator.userAgent);\n\t}\n}\n\nvar ANDROID_USER_AGENT_REG_EXP = /Android/i;\n//# sourceMappingURL=dom.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.onCut = onCut;\nexports.onPaste = onPaste;\nexports.onChange = onChange;\nexports.onKeyDown = onKeyDown;\n\nvar _edit = require('./edit');\n\nvar _edit2 = _interopRequireDefault(_edit);\n\nvar _parse3 = require('./parse');\n\nvar _parse4 = _interopRequireDefault(_parse3);\n\nvar _format2 = require('./format');\n\nvar _format3 = _interopRequireDefault(_format2);\n\nvar _dom = require('./dom');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction onCut(event, input, _parse, _format, on_change) {\n\t// The actual cut hasn't happened just yet hence the timeout.\n\tsetTimeout(function () {\n\t\treturn format_input_text(input, _parse, _format, undefined, on_change);\n\t}, 0);\n}\n\nfunction onPaste(event, input, _parse, _format, on_change) {\n\tvar selection = (0, _dom.getSelection)(input);\n\n\t// If selection is made,\n\t// just erase the selected text\n\t// prior to pasting\n\tif (selection) {\n\t\terase_selection(input, selection);\n\t}\n\n\tformat_input_text(input, _parse, _format, undefined, on_change);\n}\n\nfunction onChange(event, input, _parse, _format, on_change) {\n\tformat_input_text(input, _parse, _format, undefined, on_change);\n}\n\n// Intercepts \"Delete\" and \"Backspace\" keys.\n// (hitting \"Delete\" or \"Backspace\" at any caret\n//  position should always result in rasing a digit)\nfunction onKeyDown(event, input, _parse, _format, on_change) {\n\tvar operation = (0, _dom.getOperation)(event);\n\n\tswitch (operation) {\n\t\tcase 'Delete':\n\t\tcase 'Backspace':\n\t\t\t// Intercept this operation and perform it manually.\n\t\t\tevent.preventDefault();\n\n\t\t\tvar selection = (0, _dom.getSelection)(input);\n\n\t\t\t// If selection is made,\n\t\t\t// just erase the selected text,\n\t\t\t// and don't apply any more operations to it.\n\t\t\tif (selection) {\n\t\t\t\terase_selection(input, selection);\n\t\t\t\treturn format_input_text(input, _parse, _format, undefined, on_change);\n\t\t\t}\n\n\t\t\t// Else, perform the (character erasing) operation manually\n\t\t\treturn format_input_text(input, _parse, _format, operation, on_change);\n\n\t\tdefault:\n\t\t// Will be handled when `onChange` fires.\n\t}\n}\n\n/**\r\n * Erases the selected text inside an `<input/>`.\r\n * @param  {DOMElement} input\r\n * @param  {Selection} selection\r\n */\nfunction erase_selection(input, selection) {\n\tvar text = input.value;\n\ttext = text.slice(0, selection.start) + text.slice(selection.end);\n\n\tinput.value = text;\n\t(0, _dom.setCaretPosition)(input, selection.start);\n}\n\n/**\r\n * Parses and re-formats `<input/>` textual value.\r\n * E.g. when a user enters something into the `<input/>`\r\n * that raw input must first be parsed and the re-formatted properly.\r\n * Is called either after some user input (e.g. entered a character, pasted something)\r\n * or after the user performed an `operation` (e.g. \"Backspace\", \"Delete\").\r\n * @param  {DOMElement} input\r\n * @param  {Function} parse\r\n * @param  {Function} format\r\n * @param  {string} [operation] - The operation that triggered `<input/>` textual value change. E.g. \"Backspace\", \"Delete\".\r\n * @param  {Function} onChange\r\n */\nfunction format_input_text(input, _parse, _format, operation, on_change) {\n\t// Parse `<input/>` textual value.\n\t// Get `value` and `caret` position.\n\tvar _parse2 = (0, _parse4.default)(input.value, (0, _dom.getCaretPosition)(input), _parse),\n\t    value = _parse2.value,\n\t    caret = _parse2.caret;\n\n\t// If a user performed an operation (e.g. \"Backspace\", \"Delete\")\n\t// then apply that operation and get new `value` and `caret` position.\n\n\n\tif (operation) {\n\t\tvar operation_applied = (0, _edit2.default)(value, caret, operation);\n\n\t\tvalue = operation_applied.value;\n\t\tcaret = operation_applied.caret;\n\t}\n\n\t// Format the `value`.\n\t// (and reposition the caret accordingly)\n\tvar formatted = (0, _format3.default)(value, caret, _format);\n\n\tvar text = formatted.text;\n\tcaret = formatted.caret;\n\n\t// Set `<input/>` textual value manually\n\t// to prevent React from resetting the caret position\n\t// later inside subsequent `render()`.\n\t// Doesn't work for custom `inputComponent`s for some reason.\n\tinput.value = text;\n\t// Position the caret properly.\n\t(0, _dom.setCaretPosition)(input, caret);\n\n\t// `<input/>` textual value may have changed,\n\t// so the parsed `value` may have changed too.\n\t// The `value` didn't neccessarily change\n\t// but it might have.\n\ton_change(value);\n}\n//# sourceMappingURL=input control.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _parse2 = require('../parse');\n\nvar _parse3 = _interopRequireDefault(_parse2);\n\nvar _inputControl = require('../input control');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; } // This is just `./ReactInput.js` rewritten in Hooks.\n\n// Usage:\n//\n// <ReactInput\n// \tvalue={this.state.phone}\n// \tonChange={phone => this.setState({ phone })}\n// \tparse={character => character}\n// \tformat={value => ({ text: value, template: 'xxxxxxxx' })}/>\n//\nfunction Input(_ref, ref) {\n\tvar value = _ref.value,\n\t    parse = _ref.parse,\n\t    format = _ref.format,\n\t    InputComponent = _ref.inputComponent,\n\t    onChange = _ref.onChange,\n\t    onCut = _ref.onCut,\n\t    onPaste = _ref.onPaste,\n\t    onKeyDown = _ref.onKeyDown,\n\t    rest = _objectWithoutProperties(_ref, ['value', 'parse', 'format', 'inputComponent', 'onChange', 'onCut', 'onPaste', 'onKeyDown']);\n\n\tvar ownRef = (0, _react.useRef)();\n\tref = ref || ownRef;\n\tvar _onChange = (0, _react.useCallback)(function (event) {\n\t\treturn (0, _inputControl.onChange)(event, ref.current, parse, format, onChange);\n\t}, [ref, parse, format, onChange]);\n\n\tvar _onPaste = (0, _react.useCallback)(function (event) {\n\t\tif (onPaste) {\n\t\t\tonPaste(event);\n\t\t}\n\t\treturn (0, _inputControl.onPaste)(event, ref.current, parse, format, onChange);\n\t}, [ref, parse, format, onChange, onPaste]);\n\n\tvar _onCut = (0, _react.useCallback)(function (event) {\n\t\tif (onCut) {\n\t\t\tonCut(event);\n\t\t}\n\t\treturn (0, _inputControl.onCut)(event, ref.current, parse, format, onChange);\n\t}, [ref, parse, format, onChange, onCut]);\n\n\tvar _onKeyDown = (0, _react.useCallback)(function (event) {\n\t\tif (onKeyDown) {\n\t\t\tonKeyDown(event);\n\t\t}\n\t\treturn (0, _inputControl.onKeyDown)(event, ref.current, parse, format, onChange);\n\t}, [ref, parse, format, onChange, onKeyDown]);\n\n\treturn _react2.default.createElement(InputComponent, _extends({}, rest, {\n\t\tref: ref,\n\t\tvalue: format(isEmptyValue(value) ? '' : value).text,\n\t\tonKeyDown: _onKeyDown,\n\t\tonChange: _onChange,\n\t\tonPaste: _onPaste,\n\t\tonCut: _onCut }));\n}\n\nInput = _react2.default.forwardRef(Input);\n\nInput.propTypes = {\n\t// Parses a single characher of `<input/>` text.\n\tparse: _propTypes2.default.func.isRequired,\n\n\t// Formats `value` into `<input/>` text.\n\tformat: _propTypes2.default.func.isRequired,\n\n\t// Renders `<input/>` by default.\n\tinputComponent: _propTypes2.default.elementType.isRequired,\n\n\t// `<input/>` `type` attribute.\n\ttype: _propTypes2.default.string.isRequired,\n\n\t// Is parsed from <input/> text.\n\tvalue: _propTypes2.default.string,\n\n\t// This handler is called each time `<input/>` text is changed.\n\tonChange: _propTypes2.default.func.isRequired,\n\n\t// Passthrough\n\tonKeyDown: _propTypes2.default.func,\n\tonCut: _propTypes2.default.func,\n\tonPaste: _propTypes2.default.func\n};\n\nInput.defaultProps = {\n\t// Renders `<input/>` by default.\n\tinputComponent: 'input',\n\n\t// `<input/>` `type` attribute.\n\ttype: 'text'\n};\n\nexports.default = Input;\n\n\nfunction isEmptyValue(value) {\n\treturn value === undefined || value === null;\n}\n//# sourceMappingURL=Input.js.map","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// https://stackoverflow.com/a/46971044/970769\nvar ParseError = function ParseError(code) {\n  _classCallCheck(this, ParseError);\n\n  this.name = this.constructor.name;\n  this.message = code;\n  this.stack = new Error(code).stack;\n};\n\nexport default ParseError;\n\n\nParseError.prototype = Object.create(Error.prototype);\nParseError.prototype.constructor = ParseError;\n//# sourceMappingURL=ParseError.js.map","// The minimum length of the national significant number.\nexport var MIN_LENGTH_FOR_NSN = 2;\n\n// The ITU says the maximum length should be 15,\n// but one can find longer numbers in Germany.\nexport var MAX_LENGTH_FOR_NSN = 17;\n\n// The maximum length of the country calling code.\nexport var MAX_LENGTH_COUNTRY_CODE = 3;\n\n// Digits accepted in phone numbers\n// (ascii, fullwidth, arabic-indic, and eastern arabic digits).\nexport var VALID_DIGITS = '0-9\\uFF10-\\uFF19\\u0660-\\u0669\\u06F0-\\u06F9';\n\n// `DASHES` will be right after the opening square bracket of the \"character class\"\nvar DASHES = '-\\u2010-\\u2015\\u2212\\u30FC\\uFF0D';\nvar SLASHES = '\\uFF0F/';\nvar DOTS = '\\uFF0E.';\nexport var WHITESPACE = ' \\xA0\\xAD\\u200B\\u2060\\u3000';\nvar BRACKETS = '()\\uFF08\\uFF09\\uFF3B\\uFF3D\\\\[\\\\]';\n// export const OPENING_BRACKETS = '(\\uFF08\\uFF3B\\\\\\['\nvar TILDES = '~\\u2053\\u223C\\uFF5E';\n\n// Regular expression of acceptable punctuation found in phone numbers. This\n// excludes punctuation found as a leading character only. This consists of dash\n// characters, white space characters, full stops, slashes, square brackets,\n// parentheses and tildes. Full-width variants are also present.\nexport var VALID_PUNCTUATION = '' + DASHES + SLASHES + DOTS + WHITESPACE + BRACKETS + TILDES;\n\nexport var PLUS_CHARS = '+\\uFF0B';\n// const LEADING_PLUS_CHARS_PATTERN = new RegExp('^[' + PLUS_CHARS + ']+')\n//# sourceMappingURL=constants.js.map","// Checks whether the entire input sequence can be matched\n// against the regular expression.\nexport function matchesEntirely() {\n\tvar text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\tvar regular_expression = arguments[1];\n\n\treturn new RegExp('^(?:' + regular_expression + ')$').test(text);\n}\n\n/**\r\n * Merges two arrays.\r\n * @param  {*} a\r\n * @param  {*} b\r\n * @return {*}\r\n */\nexport function mergeArrays(a, b) {\n\tvar merged = a.slice();\n\n\tfor (var _iterator = b, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar element = _ref;\n\n\t\tif (a.indexOf(element) < 0) {\n\t\t\tmerged.push(element);\n\t\t}\n\t}\n\n\treturn merged.sort(function (a, b) {\n\t\treturn a - b;\n\t});\n\n\t// ES6 version, requires Set polyfill.\n\t// let merged = new Set(a)\n\t// for (const element of b)\n\t// {\n\t// \tmerged.add(i)\n\t// }\n\t// return Array.from(merged).sort((a, b) => a - b)\n}\n//# sourceMappingURL=util.js.map","var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport compare from './tools/semver-compare';\n\n// Added \"possibleLengths\" and renamed\n// \"country_phone_code_to_countries\" to \"country_calling_codes\".\nvar V2 = '1.0.18';\n\n// Added \"idd_prefix\" and \"default_idd_prefix\".\nvar V3 = '1.2.0';\n\nvar DEFAULT_EXT_PREFIX = ' ext. ';\n\nvar Metadata = function () {\n\tfunction Metadata(metadata) {\n\t\t_classCallCheck(this, Metadata);\n\n\t\tvalidateMetadata(metadata);\n\n\t\tthis.metadata = metadata;\n\n\t\tthis.v1 = !metadata.version;\n\t\tthis.v2 = metadata.version !== undefined && compare(metadata.version, V3) === -1;\n\t\tthis.v3 = metadata.version !== undefined; // && compare(metadata.version, V4) === -1\n\t}\n\n\t_createClass(Metadata, [{\n\t\tkey: 'getCountries',\n\t\tvalue: function getCountries() {\n\t\t\treturn Object.keys(this.metadata.countries).filter(function (_) {\n\t\t\t\treturn _ !== '001';\n\t\t\t});\n\t\t}\n\t}, {\n\t\tkey: 'hasCountry',\n\t\tvalue: function hasCountry(country) {\n\t\t\treturn this.metadata.countries[country] !== undefined;\n\t\t}\n\t}, {\n\t\tkey: 'country',\n\t\tvalue: function country(_country) {\n\t\t\tif (!_country) {\n\t\t\t\tthis._country = undefined;\n\t\t\t\tthis.country_metadata = undefined;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (!this.hasCountry(_country)) {\n\t\t\t\tthrow new Error('Unknown country: ' + _country);\n\t\t\t}\n\n\t\t\tthis._country = _country;\n\t\t\tthis.country_metadata = this.metadata.countries[_country];\n\t\t\treturn this;\n\t\t}\n\t}, {\n\t\tkey: 'getDefaultCountryMetadataForRegion',\n\t\tvalue: function getDefaultCountryMetadataForRegion() {\n\t\t\treturn this.metadata.countries[this.countryCallingCodes()[this.countryCallingCode()][0]];\n\t\t}\n\t}, {\n\t\tkey: 'countryCallingCode',\n\t\tvalue: function countryCallingCode() {\n\t\t\treturn this.country_metadata[0];\n\t\t}\n\t}, {\n\t\tkey: 'IDDPrefix',\n\t\tvalue: function IDDPrefix() {\n\t\t\tif (this.v1 || this.v2) return;\n\t\t\treturn this.country_metadata[1];\n\t\t}\n\t}, {\n\t\tkey: 'defaultIDDPrefix',\n\t\tvalue: function defaultIDDPrefix() {\n\t\t\tif (this.v1 || this.v2) return;\n\t\t\treturn this.country_metadata[12];\n\t\t}\n\t}, {\n\t\tkey: 'nationalNumberPattern',\n\t\tvalue: function nationalNumberPattern() {\n\t\t\tif (this.v1 || this.v2) return this.country_metadata[1];\n\t\t\treturn this.country_metadata[2];\n\t\t}\n\t}, {\n\t\tkey: 'possibleLengths',\n\t\tvalue: function possibleLengths() {\n\t\t\tif (this.v1) return;\n\t\t\treturn this.country_metadata[this.v2 ? 2 : 3];\n\t\t}\n\t}, {\n\t\tkey: '_getFormats',\n\t\tvalue: function _getFormats(country_metadata) {\n\t\t\treturn country_metadata[this.v1 ? 2 : this.v2 ? 3 : 4];\n\t\t}\n\n\t\t// For countries of the same region (e.g. NANPA)\n\t\t// formats are all stored in the \"main\" country for that region.\n\t\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n\t}, {\n\t\tkey: 'formats',\n\t\tvalue: function formats() {\n\t\t\tvar _this = this;\n\n\t\t\tvar formats = this._getFormats(this.country_metadata) || this._getFormats(this.getDefaultCountryMetadataForRegion()) || [];\n\t\t\treturn formats.map(function (_) {\n\t\t\t\treturn new Format(_, _this);\n\t\t\t});\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefix',\n\t\tvalue: function nationalPrefix() {\n\t\t\treturn this.country_metadata[this.v1 ? 3 : this.v2 ? 4 : 5];\n\t\t}\n\t}, {\n\t\tkey: '_getNationalPrefixFormattingRule',\n\t\tvalue: function _getNationalPrefixFormattingRule(country_metadata) {\n\t\t\treturn country_metadata[this.v1 ? 4 : this.v2 ? 5 : 6];\n\t\t}\n\n\t\t// For countries of the same region (e.g. NANPA)\n\t\t// national prefix formatting rule is stored in the \"main\" country for that region.\n\t\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n\t}, {\n\t\tkey: 'nationalPrefixFormattingRule',\n\t\tvalue: function nationalPrefixFormattingRule() {\n\t\t\treturn this._getNationalPrefixFormattingRule(this.country_metadata) || this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion());\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefixForParsing',\n\t\tvalue: function nationalPrefixForParsing() {\n\t\t\t// If `national_prefix_for_parsing` is not set explicitly,\n\t\t\t// then infer it from `national_prefix` (if any)\n\t\t\treturn this.country_metadata[this.v1 ? 5 : this.v2 ? 6 : 7] || this.nationalPrefix();\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefixTransformRule',\n\t\tvalue: function nationalPrefixTransformRule() {\n\t\t\treturn this.country_metadata[this.v1 ? 6 : this.v2 ? 7 : 8];\n\t\t}\n\t}, {\n\t\tkey: '_getNationalPrefixIsOptionalWhenFormatting',\n\t\tvalue: function _getNationalPrefixIsOptionalWhenFormatting() {\n\t\t\treturn !!this.country_metadata[this.v1 ? 7 : this.v2 ? 8 : 9];\n\t\t}\n\n\t\t// For countries of the same region (e.g. NANPA)\n\t\t// \"national prefix is optional when parsing\" flag is\n\t\t// stored in the \"main\" country for that region.\n\t\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n\t}, {\n\t\tkey: 'nationalPrefixIsOptionalWhenFormatting',\n\t\tvalue: function nationalPrefixIsOptionalWhenFormatting() {\n\t\t\treturn this._getNationalPrefixIsOptionalWhenFormatting(this.country_metadata) || this._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion());\n\t\t}\n\t}, {\n\t\tkey: 'leadingDigits',\n\t\tvalue: function leadingDigits() {\n\t\t\treturn this.country_metadata[this.v1 ? 8 : this.v2 ? 9 : 10];\n\t\t}\n\t}, {\n\t\tkey: 'types',\n\t\tvalue: function types() {\n\t\t\treturn this.country_metadata[this.v1 ? 9 : this.v2 ? 10 : 11];\n\t\t}\n\t}, {\n\t\tkey: 'hasTypes',\n\t\tvalue: function hasTypes() {\n\t\t\t// Versions 1.2.0 - 1.2.4: can be `[]`.\n\t\t\t/* istanbul ignore next */\n\t\t\tif (this.types() && this.types().length === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t// Versions <= 1.2.4: can be `undefined`.\n\t\t\t// Version >= 1.2.5: can be `0`.\n\t\t\treturn !!this.types();\n\t\t}\n\t}, {\n\t\tkey: 'type',\n\t\tvalue: function type(_type) {\n\t\t\tif (this.hasTypes() && getType(this.types(), _type)) {\n\t\t\t\treturn new Type(getType(this.types(), _type), this);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'ext',\n\t\tvalue: function ext() {\n\t\t\tif (this.v1 || this.v2) return DEFAULT_EXT_PREFIX;\n\t\t\treturn this.country_metadata[13] || DEFAULT_EXT_PREFIX;\n\t\t}\n\t}, {\n\t\tkey: 'countryCallingCodes',\n\t\tvalue: function countryCallingCodes() {\n\t\t\tif (this.v1) return this.metadata.country_phone_code_to_countries;\n\t\t\treturn this.metadata.country_calling_codes;\n\t\t}\n\n\t\t// Formatting information for regions which share\n\t\t// a country calling code is contained by only one region\n\t\t// for performance reasons. For example, for NANPA region\n\t\t// (\"North American Numbering Plan Administration\",\n\t\t//  which includes USA, Canada, Cayman Islands, Bahamas, etc)\n\t\t// it will be contained in the metadata for `US`.\n\t\t//\n\t\t// `country_calling_code` is always valid.\n\t\t// But the actual country may not necessarily be part of the metadata.\n\t\t//\n\n\t}, {\n\t\tkey: 'chooseCountryByCountryCallingCode',\n\t\tvalue: function chooseCountryByCountryCallingCode(country_calling_code) {\n\t\t\tvar country = this.countryCallingCodes()[country_calling_code][0];\n\n\t\t\t// Do not want to test this case.\n\t\t\t// (custom metadata, not all countries).\n\t\t\t/* istanbul ignore else */\n\t\t\tif (this.hasCountry(country)) {\n\t\t\t\tthis.country(country);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'selectedCountry',\n\t\tvalue: function selectedCountry() {\n\t\t\treturn this._country;\n\t\t}\n\t}]);\n\n\treturn Metadata;\n}();\n\nexport default Metadata;\n\nvar Format = function () {\n\tfunction Format(format, metadata) {\n\t\t_classCallCheck(this, Format);\n\n\t\tthis._format = format;\n\t\tthis.metadata = metadata;\n\t}\n\n\t_createClass(Format, [{\n\t\tkey: 'pattern',\n\t\tvalue: function pattern() {\n\t\t\treturn this._format[0];\n\t\t}\n\t}, {\n\t\tkey: 'format',\n\t\tvalue: function format() {\n\t\t\treturn this._format[1];\n\t\t}\n\t}, {\n\t\tkey: 'leadingDigitsPatterns',\n\t\tvalue: function leadingDigitsPatterns() {\n\t\t\treturn this._format[2] || [];\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefixFormattingRule',\n\t\tvalue: function nationalPrefixFormattingRule() {\n\t\t\treturn this._format[3] || this.metadata.nationalPrefixFormattingRule();\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefixIsOptionalWhenFormatting',\n\t\tvalue: function nationalPrefixIsOptionalWhenFormatting() {\n\t\t\treturn !!this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormatting();\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefixIsMandatoryWhenFormatting',\n\t\tvalue: function nationalPrefixIsMandatoryWhenFormatting() {\n\t\t\t// National prefix is omitted if there's no national prefix formatting rule\n\t\t\t// set for this country, or when the national prefix formatting rule\n\t\t\t// contains no national prefix itself, or when this rule is set but\n\t\t\t// national prefix is optional for this phone number format\n\t\t\t// (and it is not enforced explicitly)\n\t\t\treturn this.usesNationalPrefix() && !this.nationalPrefixIsOptionalWhenFormatting();\n\t\t}\n\n\t\t// Checks whether national prefix formatting rule contains national prefix.\n\n\t}, {\n\t\tkey: 'usesNationalPrefix',\n\t\tvalue: function usesNationalPrefix() {\n\t\t\treturn this.nationalPrefixFormattingRule() &&\n\t\t\t// Check that national prefix formatting rule is not a dummy one.\n\t\t\tthis.nationalPrefixFormattingRule() !== '$1' &&\n\t\t\t// Check that national prefix formatting rule actually has national prefix digit(s).\n\t\t\t/\\d/.test(this.nationalPrefixFormattingRule().replace('$1', ''));\n\t\t}\n\t}, {\n\t\tkey: 'internationalFormat',\n\t\tvalue: function internationalFormat() {\n\t\t\treturn this._format[5] || this.format();\n\t\t}\n\t}]);\n\n\treturn Format;\n}();\n\nvar Type = function () {\n\tfunction Type(type, metadata) {\n\t\t_classCallCheck(this, Type);\n\n\t\tthis.type = type;\n\t\tthis.metadata = metadata;\n\t}\n\n\t_createClass(Type, [{\n\t\tkey: 'pattern',\n\t\tvalue: function pattern() {\n\t\t\tif (this.metadata.v1) return this.type;\n\t\t\treturn this.type[0];\n\t\t}\n\t}, {\n\t\tkey: 'possibleLengths',\n\t\tvalue: function possibleLengths() {\n\t\t\tif (this.metadata.v1) return;\n\t\t\treturn this.type[1] || this.metadata.possibleLengths();\n\t\t}\n\t}]);\n\n\treturn Type;\n}();\n\nfunction getType(types, type) {\n\tswitch (type) {\n\t\tcase 'FIXED_LINE':\n\t\t\treturn types[0];\n\t\tcase 'MOBILE':\n\t\t\treturn types[1];\n\t\tcase 'TOLL_FREE':\n\t\t\treturn types[2];\n\t\tcase 'PREMIUM_RATE':\n\t\t\treturn types[3];\n\t\tcase 'PERSONAL_NUMBER':\n\t\t\treturn types[4];\n\t\tcase 'VOICEMAIL':\n\t\t\treturn types[5];\n\t\tcase 'UAN':\n\t\t\treturn types[6];\n\t\tcase 'PAGER':\n\t\t\treturn types[7];\n\t\tcase 'VOIP':\n\t\t\treturn types[8];\n\t\tcase 'SHARED_COST':\n\t\t\treturn types[9];\n\t}\n}\n\nexport function validateMetadata(metadata) {\n\tif (!metadata) {\n\t\tthrow new Error('[libphonenumber-js] `metadata` argument not passed. Check your arguments.');\n\t}\n\n\t// `country_phone_code_to_countries` was renamed to\n\t// `country_calling_codes` in `1.0.18`.\n\tif (!is_object(metadata) || !is_object(metadata.countries) || !is_object(metadata.country_calling_codes) && !is_object(metadata.country_phone_code_to_countries)) {\n\t\tthrow new Error('[libphonenumber-js] `metadata` argument was passed but it\\'s not a valid metadata. Must be an object having `.countries` and `.country_calling_codes` child object properties. Got ' + (is_object(metadata) ? 'an object of shape: { ' + Object.keys(metadata).join(', ') + ' }' : 'a ' + type_of(metadata) + ': ' + metadata) + '.');\n\t}\n}\n\n// Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n/* istanbul ignore next */\nvar is_object = function is_object(_) {\n\treturn (typeof _ === 'undefined' ? 'undefined' : _typeof(_)) === 'object';\n};\n\n// Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n/* istanbul ignore next */\nvar type_of = function type_of(_) {\n\treturn typeof _ === 'undefined' ? 'undefined' : _typeof(_);\n};\n\n/**\r\n * Returns extension prefix for a country.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string?}\r\n * @example\r\n * // Returns \" ext. \"\r\n * getExtPrefix(\"US\")\r\n */\nexport function getExtPrefix(country, metadata) {\n\tmetadata = new Metadata(metadata);\n\tif (metadata.hasCountry(country)) {\n\t\treturn metadata.country(country).ext();\n\t}\n\treturn DEFAULT_EXT_PREFIX;\n}\n\n/**\r\n * Returns \"country calling code\" for a country.\r\n * Throws an error if the country doesn't exist or isn't supported by this library.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string}\r\n * @example\r\n * // Returns \"44\"\r\n * getCountryCallingCode(\"GB\")\r\n */\nexport function getCountryCallingCode(country, metadata) {\n\tmetadata = new Metadata(metadata);\n\tif (metadata.hasCountry(country)) {\n\t\treturn metadata.country(country).countryCallingCode();\n\t}\n\tthrow new Error('Unknown country: ' + country);\n}\n\nexport function isSupportedCountry(country, metadata) {\n\t// metadata = new Metadata(metadata)\n\t// return metadata.hasCountry(country)\n\treturn metadata.countries[country] !== undefined;\n}\n//# sourceMappingURL=metadata.js.map","// Copy-pasted from:\n// https://github.com/substack/semver-compare/blob/master/index.js\n//\n// Inlining this function because some users reported issues with\n// importing from `semver-compare` in a browser with ES6 \"native\" modules.\nexport default function cmp(a, b) {\n    var pa = a.split('.');\n    var pb = b.split('.');\n    for (var i = 0; i < 3; i++) {\n        var na = Number(pa[i]);\n        var nb = Number(pb[i]);\n        if (na > nb) return 1;\n        if (nb > na) return -1;\n        if (!isNaN(na) && isNaN(nb)) return 1;\n        if (isNaN(na) && !isNaN(nb)) return -1;\n    }\n    return 0;\n};\n//# sourceMappingURL=semver-compare.js.map","import { VALID_DIGITS } from './constants';\n\n// The RFC 3966 format for extensions.\nvar RFC3966_EXTN_PREFIX = ';ext=';\n\n// Pattern to capture digits used in an extension.\n// Places a maximum length of '7' for an extension.\nvar CAPTURING_EXTN_DIGITS = '([' + VALID_DIGITS + ']{1,7})';\n\n/**\r\n * Regexp of all possible ways to write extensions, for use when parsing. This\r\n * will be run as a case-insensitive regexp match. Wide character versions are\r\n * also provided after each ASCII version. There are three regular expressions\r\n * here. The first covers RFC 3966 format, where the extension is added using\r\n * ';ext='. The second more generic one starts with optional white space and\r\n * ends with an optional full stop (.), followed by zero or more spaces/tabs\r\n * /commas and then the numbers themselves. The other one covers the special\r\n * case of American numbers where the extension is written with a hash at the\r\n * end, such as '- 503#'. Note that the only capturing groups should be around\r\n * the digits that you want to capture as part of the extension, or else parsing\r\n * will fail! We allow two options for representing the accented o - the\r\n * character itself, and one in the unicode decomposed form with the combining\r\n * acute accent.\r\n */\nfunction create_extension_pattern(purpose) {\n\t// One-character symbols that can be used to indicate an extension.\n\tvar single_extension_characters = 'x\\uFF58#\\uFF03~\\uFF5E';\n\n\tswitch (purpose) {\n\t\t// For parsing, we are slightly more lenient in our interpretation than for matching. Here we\n\t\t// allow \"comma\" and \"semicolon\" as possible extension indicators. When matching, these are\n\t\tcase 'parsing':\n\t\t\tsingle_extension_characters = ',;' + single_extension_characters;\n\t}\n\n\treturn RFC3966_EXTN_PREFIX + CAPTURING_EXTN_DIGITS + '|' + '[ \\xA0\\\\t,]*' + '(?:e?xt(?:ensi(?:o\\u0301?|\\xF3))?n?|\\uFF45?\\uFF58\\uFF54\\uFF4E?|' +\n\t// \"доб.\"\n\t'\\u0434\\u043E\\u0431|' + '[' + single_extension_characters + ']|int|anexo|\\uFF49\\uFF4E\\uFF54)' + '[:\\\\.\\uFF0E]?[ \\xA0\\\\t,-]*' + CAPTURING_EXTN_DIGITS + '#?|' + '[- ]+([' + VALID_DIGITS + ']{1,5})#';\n}\n\n/**\r\n * Regexp of all possible ways to write extensions, for use when parsing. This\r\n * will be run as a case-insensitive regexp match. Wide character versions are\r\n * also provided after each ASCII version. There are three regular expressions\r\n * here. The first covers RFC 3966 format, where the extension is added using\r\n * ';ext='. The second more generic one starts with optional white space and\r\n * ends with an optional full stop (.), followed by zero or more spaces/tabs\r\n * /commas and then the numbers themselves. The other one covers the special\r\n * case of American numbers where the extension is written with a hash at the\r\n * end, such as '- 503#'. Note that the only capturing groups should be around\r\n * the digits that you want to capture as part of the extension, or else parsing\r\n * will fail! We allow two options for representing the accented o - the\r\n * character itself, and one in the unicode decomposed form with the combining\r\n * acute accent.\r\n */\nexport var EXTN_PATTERNS_FOR_PARSING = create_extension_pattern('parsing');\n\nexport var EXTN_PATTERNS_FOR_MATCHING = create_extension_pattern('matching');\n\n// Regexp of all known extension prefixes used by different regions followed by\n// 1 or more valid digits, for use when parsing.\nvar EXTN_PATTERN = new RegExp('(?:' + EXTN_PATTERNS_FOR_PARSING + ')$', 'i');\n\n// Strips any extension (as in, the part of the number dialled after the call is\n// connected, usually indicated with extn, ext, x or similar) from the end of\n// the number, and returns it.\nexport function extractExtension(number) {\n\tvar start = number.search(EXTN_PATTERN);\n\tif (start < 0) {\n\t\treturn {};\n\t}\n\n\t// If we find a potential extension, and the number preceding this is a viable\n\t// number, we assume it is an extension.\n\tvar number_without_extension = number.slice(0, start);\n\n\tvar matches = number.match(EXTN_PATTERN);\n\tvar i = 1;\n\twhile (i < matches.length) {\n\t\tif (matches[i] != null && matches[i].length > 0) {\n\t\t\treturn {\n\t\t\t\tnumber: number_without_extension,\n\t\t\t\text: matches[i]\n\t\t\t};\n\t\t}\n\t\ti++;\n\t}\n}\n//# sourceMappingURL=extension.js.map","import { MIN_LENGTH_FOR_NSN, VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS } from './constants';\n\nimport { EXTN_PATTERNS_FOR_PARSING } from './extension';\n\n//  Regular expression of viable phone numbers. This is location independent.\n//  Checks we have at least three leading digits, and only valid punctuation,\n//  alpha characters and digits in the phone number. Does not include extension\n//  data. The symbol 'x' is allowed here as valid punctuation since it is often\n//  used as a placeholder for carrier codes, for example in Brazilian phone\n//  numbers. We also allow multiple '+' characters at the start.\n//\n//  Corresponds to the following:\n//  [digits]{minLengthNsn}|\n//  plus_sign*\n//  (([punctuation]|[star])*[digits]){3,}([punctuation]|[star]|[digits]|[alpha])*\n//\n//  The first reg-ex is to allow short numbers (two digits long) to be parsed if\n//  they are entered as \"15\" etc, but only if there is no punctuation in them.\n//  The second expression restricts the number of digits to three or more, but\n//  then allows them to be in international form, and to have alpha-characters\n//  and punctuation. We split up the two reg-exes here and combine them when\n//  creating the reg-ex VALID_PHONE_NUMBER_PATTERN itself so we can prefix it\n//  with ^ and append $ to each branch.\n//\n//  \"Note VALID_PUNCTUATION starts with a -,\n//   so must be the first in the range\" (c) Google devs.\n//  (wtf did they mean by saying that; probably nothing)\n//\nvar MIN_LENGTH_PHONE_NUMBER_PATTERN = '[' + VALID_DIGITS + ']{' + MIN_LENGTH_FOR_NSN + '}';\n//\n// And this is the second reg-exp:\n// (see MIN_LENGTH_PHONE_NUMBER_PATTERN for a full description of this reg-exp)\n//\nvar VALID_PHONE_NUMBER = '[' + PLUS_CHARS + ']{0,1}' + '(?:' + '[' + VALID_PUNCTUATION + ']*' + '[' + VALID_DIGITS + ']' + '){3,}' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']*';\n\n// The combined regular expression for valid phone numbers:\n//\nvar VALID_PHONE_NUMBER_PATTERN = new RegExp(\n// Either a short two-digit-only phone number\n'^' + MIN_LENGTH_PHONE_NUMBER_PATTERN + '$' + '|' +\n// Or a longer fully parsed phone number (min 3 characters)\n'^' + VALID_PHONE_NUMBER +\n// Phone number extensions\n'(?:' + EXTN_PATTERNS_FOR_PARSING + ')?' + '$', 'i');\n\n// Checks to see if the string of characters could possibly be a phone number at\n// all. At the moment, checks to see that the string begins with at least 2\n// digits, ignoring any punctuation commonly found in phone numbers. This method\n// does not require the number to be normalized in advance - but does assume\n// that leading non-number symbols have been removed, such as by the method\n// `extract_possible_number`.\n//\nexport default function isViablePhoneNumber(number) {\n\treturn number.length >= MIN_LENGTH_FOR_NSN && VALID_PHONE_NUMBER_PATTERN.test(number);\n}\n//# sourceMappingURL=isViablePhoneNumber.js.map","// These mappings map a character (key) to a specific digit that should\n// replace it for normalization purposes. Non-European digits that\n// may be used in phone numbers are mapped to a European equivalent.\n//\n// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\n//\nexport var DIGITS = {\n\t'0': '0',\n\t'1': '1',\n\t'2': '2',\n\t'3': '3',\n\t'4': '4',\n\t'5': '5',\n\t'6': '6',\n\t'7': '7',\n\t'8': '8',\n\t'9': '9',\n\t'\\uFF10': '0', // Fullwidth digit 0\n\t'\\uFF11': '1', // Fullwidth digit 1\n\t'\\uFF12': '2', // Fullwidth digit 2\n\t'\\uFF13': '3', // Fullwidth digit 3\n\t'\\uFF14': '4', // Fullwidth digit 4\n\t'\\uFF15': '5', // Fullwidth digit 5\n\t'\\uFF16': '6', // Fullwidth digit 6\n\t'\\uFF17': '7', // Fullwidth digit 7\n\t'\\uFF18': '8', // Fullwidth digit 8\n\t'\\uFF19': '9', // Fullwidth digit 9\n\t'\\u0660': '0', // Arabic-indic digit 0\n\t'\\u0661': '1', // Arabic-indic digit 1\n\t'\\u0662': '2', // Arabic-indic digit 2\n\t'\\u0663': '3', // Arabic-indic digit 3\n\t'\\u0664': '4', // Arabic-indic digit 4\n\t'\\u0665': '5', // Arabic-indic digit 5\n\t'\\u0666': '6', // Arabic-indic digit 6\n\t'\\u0667': '7', // Arabic-indic digit 7\n\t'\\u0668': '8', // Arabic-indic digit 8\n\t'\\u0669': '9', // Arabic-indic digit 9\n\t'\\u06F0': '0', // Eastern-Arabic digit 0\n\t'\\u06F1': '1', // Eastern-Arabic digit 1\n\t'\\u06F2': '2', // Eastern-Arabic digit 2\n\t'\\u06F3': '3', // Eastern-Arabic digit 3\n\t'\\u06F4': '4', // Eastern-Arabic digit 4\n\t'\\u06F5': '5', // Eastern-Arabic digit 5\n\t'\\u06F6': '6', // Eastern-Arabic digit 6\n\t'\\u06F7': '7', // Eastern-Arabic digit 7\n\t'\\u06F8': '8', // Eastern-Arabic digit 8\n\t'\\u06F9': '9' // Eastern-Arabic digit 9\n};\n\nexport function parseDigit(character) {\n\treturn DIGITS[character];\n}\n\n/**\r\n * Parses phone number digits from a string.\r\n * Drops all punctuation leaving only digits.\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseDigits('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * ```\r\n */\nexport default function parseDigits(string) {\n\tvar result = '';\n\n\t// Using `.split('')` here instead of normal `for ... of`\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\n\t// (the ones consisting of four bytes) but digits\n\t// (including non-European ones) don't fall into that range\n\t// so such \"exotic\" characters would be discarded anyway.\n\tfor (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar character = _ref;\n\n\t\tvar digit = parseDigit(character);\n\t\tif (digit) {\n\t\t\tresult += digit;\n\t\t}\n\t}\n\n\treturn result;\n}\n//# sourceMappingURL=parseDigits.js.map","import { parseDigit } from './parseDigits';\n\n/**\r\n * Parses phone number characters from a string.\r\n * Drops all punctuation leaving only digits and the leading `+` sign (if any).\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseIncompletePhoneNumber('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * parseIncompletePhoneNumber('+7 800 555')\r\n * // Outputs '+7800555'.\r\n * ```\r\n */\nexport default function parseIncompletePhoneNumber(string) {\n\tvar result = '';\n\n\t// Using `.split('')` here instead of normal `for ... of`\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\n\t// (the ones consisting of four bytes) but digits\n\t// (including non-European ones) don't fall into that range\n\t// so such \"exotic\" characters would be discarded anyway.\n\tfor (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar character = _ref;\n\n\t\tresult += parsePhoneNumberCharacter(character, result) || '';\n\t}\n\n\treturn result;\n}\n\n/**\r\n * `input-format` `parse()` function.\r\n * https://github.com/catamphetamine/input-format\r\n * @param  {string} character - Yet another character from raw input string.\r\n * @param  {string} value - The value parsed so far.\r\n * @param  {object} meta - Optional custom use-case-specific metadata.\r\n * @return {string?} The parsed character.\r\n */\nexport function parsePhoneNumberCharacter(character, value) {\n\t// Only allow a leading `+`.\n\tif (character === '+') {\n\t\t// If this `+` is not the first parsed character\n\t\t// then discard it.\n\t\tif (value) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn '+';\n\t}\n\n\t// Allow digits.\n\treturn parseDigit(character);\n}\n//# sourceMappingURL=parseIncompletePhoneNumber.js.map","import Metadata from './metadata';\nimport { matchesEntirely, mergeArrays } from './util';\n\nvar NON_FIXED_LINE_PHONE_TYPES = ['MOBILE', 'PREMIUM_RATE', 'TOLL_FREE', 'SHARED_COST', 'VOIP', 'PERSONAL_NUMBER', 'PAGER', 'UAN', 'VOICEMAIL'];\n\n// Finds out national phone number type (fixed line, mobile, etc)\nexport default function getNumberType(input) {\n\tvar options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\tvar metadata = arguments[2];\n\n\t// When `parse()` returned `{}`\n\t// meaning that the phone number is not a valid one.\n\tif (!input.country) {\n\t\treturn;\n\t}\n\n\tmetadata = new Metadata(metadata);\n\n\tif (!metadata.hasCountry(input.country)) {\n\t\tthrow new Error('Unknown country: ' + input.country);\n\t}\n\n\tvar nationalNumber = options.v2 ? input.nationalNumber : input.phone;\n\tmetadata.country(input.country);\n\n\t// The following is copy-pasted from the original function:\n\t// https://github.com/googlei18n/libphonenumber/blob/3ea547d4fbaa2d0b67588904dfa5d3f2557c27ff/javascript/i18n/phonenumbers/phonenumberutil.js#L2835\n\n\t// Is this national number even valid for this country\n\tif (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern())) {\n\t\treturn;\n\t}\n\n\t// Is it fixed line number\n\tif (is_of_type(nationalNumber, 'FIXED_LINE', metadata)) {\n\t\t// Because duplicate regular expressions are removed\n\t\t// to reduce metadata size, if \"mobile\" pattern is \"\"\n\t\t// then it means it was removed due to being a duplicate of the fixed-line pattern.\n\t\t//\n\t\tif (metadata.type('MOBILE') && metadata.type('MOBILE').pattern() === '') {\n\t\t\treturn 'FIXED_LINE_OR_MOBILE';\n\t\t}\n\n\t\t// v1 metadata.\n\t\t// Legacy.\n\t\t// Deprecated.\n\t\tif (!metadata.type('MOBILE')) {\n\t\t\treturn 'FIXED_LINE_OR_MOBILE';\n\t\t}\n\n\t\t// Check if the number happens to qualify as both fixed line and mobile.\n\t\t// (no such country in the minimal metadata set)\n\t\t/* istanbul ignore if */\n\t\tif (is_of_type(nationalNumber, 'MOBILE', metadata)) {\n\t\t\treturn 'FIXED_LINE_OR_MOBILE';\n\t\t}\n\n\t\treturn 'FIXED_LINE';\n\t}\n\n\tfor (var _iterator = NON_FIXED_LINE_PHONE_TYPES, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar _type = _ref;\n\n\t\tif (is_of_type(nationalNumber, _type, metadata)) {\n\t\t\treturn _type;\n\t\t}\n\t}\n}\n\nexport function is_of_type(nationalNumber, type, metadata) {\n\ttype = metadata.type(type);\n\n\tif (!type || !type.pattern()) {\n\t\treturn false;\n\t}\n\n\t// Check if any possible number lengths are present;\n\t// if so, we use them to avoid checking\n\t// the validation pattern if they don't match.\n\t// If they are absent, this means they match\n\t// the general description, which we have\n\t// already checked before a specific number type.\n\tif (type.possibleLengths() && type.possibleLengths().indexOf(nationalNumber.length) < 0) {\n\t\treturn false;\n\t}\n\n\treturn matchesEntirely(nationalNumber, type.pattern());\n}\n\n// Should only be called for the \"new\" metadata which has \"possible lengths\".\nexport function checkNumberLengthForType(nationalNumber, type, metadata) {\n\tvar type_info = metadata.type(type);\n\n\t// There should always be \"<possiblePengths/>\" set for every type element.\n\t// This is declared in the XML schema.\n\t// For size efficiency, where a sub-description (e.g. fixed-line)\n\t// has the same \"<possiblePengths/>\" as the \"general description\", this is missing,\n\t// so we fall back to the \"general description\". Where no numbers of the type\n\t// exist at all, there is one possible length (-1) which is guaranteed\n\t// not to match the length of any real phone number.\n\tvar possible_lengths = type_info && type_info.possibleLengths() || metadata.possibleLengths();\n\t// let local_lengths    = type_info && type.possibleLengthsLocal() || metadata.possibleLengthsLocal()\n\n\tif (type === 'FIXED_LINE_OR_MOBILE') {\n\t\t// No such country in metadata.\n\t\t/* istanbul ignore next */\n\t\tif (!metadata.type('FIXED_LINE')) {\n\t\t\t// The rare case has been encountered where no fixedLine data is available\n\t\t\t// (true for some non-geographical entities), so we just check mobile.\n\t\t\treturn checkNumberLengthForType(nationalNumber, 'MOBILE', metadata);\n\t\t}\n\n\t\tvar mobile_type = metadata.type('MOBILE');\n\n\t\tif (mobile_type) {\n\t\t\t// Merge the mobile data in if there was any. \"Concat\" creates a new\n\t\t\t// array, it doesn't edit possible_lengths in place, so we don't need a copy.\n\t\t\t// Note that when adding the possible lengths from mobile, we have\n\t\t\t// to again check they aren't empty since if they are this indicates\n\t\t\t// they are the same as the general desc and should be obtained from there.\n\t\t\tpossible_lengths = mergeArrays(possible_lengths, mobile_type.possibleLengths());\n\t\t\t// The current list is sorted; we need to merge in the new list and\n\t\t\t// re-sort (duplicates are okay). Sorting isn't so expensive because\n\t\t\t// the lists are very small.\n\n\t\t\t// if (local_lengths)\n\t\t\t// {\n\t\t\t// \tlocal_lengths = mergeArrays(local_lengths, mobile_type.possibleLengthsLocal())\n\t\t\t// }\n\t\t\t// else\n\t\t\t// {\n\t\t\t// \tlocal_lengths = mobile_type.possibleLengthsLocal()\n\t\t\t// }\n\t\t}\n\t}\n\t// If the type doesn't exist then return 'INVALID_LENGTH'.\n\telse if (type && !type_info) {\n\t\t\treturn 'INVALID_LENGTH';\n\t\t}\n\n\tvar actual_length = nationalNumber.length;\n\n\t// In `libphonenumber-js` all \"local-only\" formats are dropped for simplicity.\n\t// // This is safe because there is never an overlap beween the possible lengths\n\t// // and the local-only lengths; this is checked at build time.\n\t// if (local_lengths && local_lengths.indexOf(nationalNumber.length) >= 0)\n\t// {\n\t// \treturn 'IS_POSSIBLE_LOCAL_ONLY'\n\t// }\n\n\tvar minimum_length = possible_lengths[0];\n\n\tif (minimum_length === actual_length) {\n\t\treturn 'IS_POSSIBLE';\n\t}\n\n\tif (minimum_length > actual_length) {\n\t\treturn 'TOO_SHORT';\n\t}\n\n\tif (possible_lengths[possible_lengths.length - 1] < actual_length) {\n\t\treturn 'TOO_LONG';\n\t}\n\n\t// We skip the first element since we've already checked it.\n\treturn possible_lengths.indexOf(actual_length, 1) >= 0 ? 'IS_POSSIBLE' : 'INVALID_LENGTH';\n}\n//# sourceMappingURL=getNumberType_.js.map","import Metadata from './metadata';\nimport { checkNumberLengthForType } from './getNumberType_';\n\nexport default function isPossibleNumber(input, options, metadata) {\n\t/* istanbul ignore if */\n\tif (options === undefined) {\n\t\toptions = {};\n\t}\n\n\tmetadata = new Metadata(metadata);\n\n\tif (options.v2) {\n\t\tif (!input.countryCallingCode) {\n\t\t\tthrow new Error('Invalid phone number object passed');\n\t\t}\n\t\tmetadata.chooseCountryByCountryCallingCode(input.countryCallingCode);\n\t} else {\n\t\tif (!input.phone) {\n\t\t\treturn false;\n\t\t}\n\t\tif (input.country) {\n\t\t\tif (!metadata.hasCountry(input.country)) {\n\t\t\t\tthrow new Error('Unknown country: ' + input.country);\n\t\t\t}\n\t\t\tmetadata.country(input.country);\n\t\t} else {\n\t\t\tif (!input.countryCallingCode) {\n\t\t\t\tthrow new Error('Invalid phone number object passed');\n\t\t\t}\n\t\t\tmetadata.chooseCountryByCountryCallingCode(input.countryCallingCode);\n\t\t}\n\t}\n\n\tif (!metadata.possibleLengths()) {\n\t\tthrow new Error('Metadata too old');\n\t}\n\n\treturn is_possible_number(input.phone || input.nationalNumber, undefined, metadata);\n}\n\nexport function is_possible_number(national_number, is_international, metadata) {\n\tswitch (checkNumberLengthForType(national_number, undefined, metadata)) {\n\t\tcase 'IS_POSSIBLE':\n\t\t\treturn true;\n\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\n\t\t// \treturn !is_international\n\t\tdefault:\n\t\t\treturn false;\n\t}\n}\n//# sourceMappingURL=isPossibleNumber_.js.map","import Metadata from './metadata';\nimport { VALID_DIGITS } from './constants';\n\nvar CAPTURING_DIGIT_PATTERN = new RegExp('([' + VALID_DIGITS + '])');\n\n/**\r\n * Pattern that makes it easy to distinguish whether a region has a single\r\n * international dialing prefix or not. If a region has a single international\r\n * prefix (e.g. 011 in USA), it will be represented as a string that contains\r\n * a sequence of ASCII digits, and possibly a tilde, which signals waiting for\r\n * the tone. If there are multiple available international prefixes in a\r\n * region, they will be represented as a regex string that always contains one\r\n * or more characters that are not ASCII digits or a tilde.\r\n */\nvar SINGLE_IDD_PREFIX = /^[\\d]+(?:[~\\u2053\\u223C\\uFF5E][\\d]+)?$/;\n\n// For regions that have multiple IDD prefixes\n// a preferred IDD prefix is returned.\nexport function getIDDPrefix(country, metadata) {\n\tvar countryMetadata = new Metadata(metadata);\n\tcountryMetadata.country(country);\n\n\tif (SINGLE_IDD_PREFIX.test(countryMetadata.IDDPrefix())) {\n\t\treturn countryMetadata.IDDPrefix();\n\t}\n\n\treturn countryMetadata.defaultIDDPrefix();\n}\n\nexport function stripIDDPrefix(number, country, metadata) {\n\tif (!country) {\n\t\treturn;\n\t}\n\n\t// Check if the number is IDD-prefixed.\n\n\tvar countryMetadata = new Metadata(metadata);\n\tcountryMetadata.country(country);\n\n\tvar IDDPrefixPattern = new RegExp(countryMetadata.IDDPrefix());\n\n\tif (number.search(IDDPrefixPattern) !== 0) {\n\t\treturn;\n\t}\n\n\t// Strip IDD prefix.\n\tnumber = number.slice(number.match(IDDPrefixPattern)[0].length);\n\n\t// Some kind of a weird edge case.\n\t// No explanation from Google given.\n\tvar matchedGroups = number.match(CAPTURING_DIGIT_PATTERN);\n\t/* istanbul ignore next */\n\tif (matchedGroups && matchedGroups[1] != null && matchedGroups[1].length > 0) {\n\t\tif (matchedGroups[1] === '0') {\n\t\t\treturn;\n\t\t}\n\t}\n\n\treturn number;\n}\n//# sourceMappingURL=IDD.js.map","var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nimport isViablePhoneNumber from './isViablePhoneNumber';\n\n// https://www.ietf.org/rfc/rfc3966.txt\n\n/**\r\n * @param  {string} text - Phone URI (RFC 3966).\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\nexport function parseRFC3966(text) {\n\tvar number = void 0;\n\tvar ext = void 0;\n\n\t// Replace \"tel:\" with \"tel=\" for parsing convenience.\n\ttext = text.replace(/^tel:/, 'tel=');\n\n\tfor (var _iterator = text.split(';'), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar part = _ref;\n\n\t\tvar _part$split = part.split('='),\n\t\t    _part$split2 = _slicedToArray(_part$split, 2),\n\t\t    name = _part$split2[0],\n\t\t    value = _part$split2[1];\n\n\t\tswitch (name) {\n\t\t\tcase 'tel':\n\t\t\t\tnumber = value;\n\t\t\t\tbreak;\n\t\t\tcase 'ext':\n\t\t\t\text = value;\n\t\t\t\tbreak;\n\t\t\tcase 'phone-context':\n\t\t\t\t// Only \"country contexts\" are supported.\n\t\t\t\t// \"Domain contexts\" are ignored.\n\t\t\t\tif (value[0] === '+') {\n\t\t\t\t\tnumber = value + number;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t// If the phone number is not viable, then abort.\n\tif (!isViablePhoneNumber(number)) {\n\t\treturn {};\n\t}\n\n\tvar result = { number: number };\n\tif (ext) {\n\t\tresult.ext = ext;\n\t}\n\treturn result;\n}\n\n/**\r\n * @param  {object} - `{ ?number, ?extension }`.\r\n * @return {string} Phone URI (RFC 3966).\r\n */\nexport function formatRFC3966(_ref2) {\n\tvar number = _ref2.number,\n\t    ext = _ref2.ext;\n\n\tif (!number) {\n\t\treturn '';\n\t}\n\n\tif (number[0] !== '+') {\n\t\tthrow new Error('\"formatRFC3966()\" expects \"number\" to be in E.164 format.');\n\t}\n\n\treturn 'tel:' + number + (ext ? ';ext=' + ext : '');\n}\n//# sourceMappingURL=RFC3966.js.map","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\n\nimport { VALID_PUNCTUATION } from './constants';\nimport { matchesEntirely } from './util';\nimport Metadata from './metadata';\nimport { getIDDPrefix } from './IDD';\nimport { formatRFC3966 } from './RFC3966';\n\nvar defaultOptions = {\n\tformatExtension: function formatExtension(formattedNumber, extension, metadata) {\n\t\treturn '' + formattedNumber + metadata.ext() + extension;\n\t}\n\n\t// Formats a phone number\n\t//\n\t// Example use cases:\n\t//\n\t// ```js\n\t// formatNumber('8005553535', 'RU', 'INTERNATIONAL')\n\t// formatNumber('8005553535', 'RU', 'INTERNATIONAL', metadata)\n\t// formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL')\n\t// formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL', metadata)\n\t// formatNumber('+78005553535', 'NATIONAL')\n\t// formatNumber('+78005553535', 'NATIONAL', metadata)\n\t// ```\n\t//\n};export default function formatNumber(input, format, options, metadata) {\n\t// Apply default options.\n\tif (options) {\n\t\toptions = _extends({}, defaultOptions, options);\n\t} else {\n\t\toptions = defaultOptions;\n\t}\n\n\tmetadata = new Metadata(metadata);\n\n\tif (input.country) {\n\t\t// Validate `input.country`.\n\t\tif (!metadata.hasCountry(input.country)) {\n\t\t\tthrow new Error('Unknown country: ' + input.country);\n\t\t}\n\t\tmetadata.country(input.country);\n\t} else if (input.countryCallingCode) {\n\t\tmetadata.chooseCountryByCountryCallingCode(input.countryCallingCode);\n\t} else return input.phone || '';\n\n\tvar countryCallingCode = metadata.countryCallingCode();\n\n\tvar nationalNumber = options.v2 ? input.nationalNumber : input.phone;\n\n\t// This variable should have been declared inside `case`s\n\t// but Babel has a bug and it says \"duplicate variable declaration\".\n\tvar number = void 0;\n\n\tswitch (format) {\n\t\tcase 'NATIONAL':\n\t\t\t// Legacy argument support.\n\t\t\t// (`{ country: ..., phone: '' }`)\n\t\t\tif (!nationalNumber) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\tnumber = format_national_number(nationalNumber, 'NATIONAL', metadata);\n\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension);\n\n\t\tcase 'INTERNATIONAL':\n\t\t\t// Legacy argument support.\n\t\t\t// (`{ country: ..., phone: '' }`)\n\t\t\tif (!nationalNumber) {\n\t\t\t\treturn '+' + countryCallingCode;\n\t\t\t}\n\t\t\tnumber = format_national_number(nationalNumber, 'INTERNATIONAL', metadata);\n\t\t\tnumber = '+' + countryCallingCode + ' ' + number;\n\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension);\n\n\t\tcase 'E.164':\n\t\t\t// `E.164` doesn't define \"phone number extensions\".\n\t\t\treturn '+' + countryCallingCode + nationalNumber;\n\n\t\tcase 'RFC3966':\n\t\t\treturn formatRFC3966({\n\t\t\t\tnumber: '+' + countryCallingCode + nationalNumber,\n\t\t\t\text: input.ext\n\t\t\t});\n\n\t\tcase 'IDD':\n\t\t\tif (!options.fromCountry) {\n\t\t\t\treturn;\n\t\t\t\t// throw new Error('`fromCountry` option not passed for IDD-prefixed formatting.')\n\t\t\t}\n\t\t\tvar IDDPrefix = getIDDPrefix(options.fromCountry, metadata.metadata);\n\t\t\tif (!IDDPrefix) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (options.humanReadable) {\n\t\t\t\tvar formattedForSameCountryCallingCode = countryCallingCode && formatIDDSameCountryCallingCodeNumber(nationalNumber, metadata.countryCallingCode(), options.fromCountry, metadata);\n\t\t\t\tif (formattedForSameCountryCallingCode) {\n\t\t\t\t\tnumber = formattedForSameCountryCallingCode;\n\t\t\t\t} else {\n\t\t\t\t\tnumber = IDDPrefix + ' ' + countryCallingCode + ' ' + format_national_number(nationalNumber, 'INTERNATIONAL', metadata);\n\t\t\t\t}\n\t\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension);\n\t\t\t}\n\t\t\treturn '' + IDDPrefix + countryCallingCode + nationalNumber;\n\n\t\tdefault:\n\t\t\tthrow new Error('Unknown \"format\" argument passed to \"formatNumber()\": \"' + format + '\"');\n\t}\n}\n\n// This was originally set to $1 but there are some countries for which the\n// first group is not used in the national pattern (e.g. Argentina) so the $1\n// group does not match correctly.  Therefore, we use \\d, so that the first\n// group actually used in the pattern will be matched.\nexport var FIRST_GROUP_PATTERN = /(\\$\\d)/;\n\nexport function format_national_number_using_format(number, format, useInternationalFormat, includeNationalPrefixForNationalFormat, metadata) {\n\tvar formattedNumber = number.replace(new RegExp(format.pattern()), useInternationalFormat ? format.internationalFormat() : format.nationalPrefixFormattingRule() && (!format.nationalPrefixIsOptionalWhenFormatting() || includeNationalPrefixForNationalFormat) ? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule()) : format.format());\n\n\tif (useInternationalFormat) {\n\t\treturn changeInternationalFormatStyle(formattedNumber);\n\t}\n\n\treturn formattedNumber;\n}\n\nfunction format_national_number(number, format_as, metadata) {\n\tvar format = choose_format_for_number(metadata.formats(), number);\n\tif (!format) {\n\t\treturn number;\n\t}\n\treturn format_national_number_using_format(number, format, format_as === 'INTERNATIONAL', true, metadata);\n}\n\nexport function choose_format_for_number(available_formats, national_number) {\n\tfor (var _iterator = available_formats, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar format = _ref;\n\n\t\t// Validate leading digits\n\t\tif (format.leadingDigitsPatterns().length > 0) {\n\t\t\t// The last leading_digits_pattern is used here, as it is the most detailed\n\t\t\tvar last_leading_digits_pattern = format.leadingDigitsPatterns()[format.leadingDigitsPatterns().length - 1];\n\n\t\t\t// If leading digits don't match then move on to the next phone number format\n\t\t\tif (national_number.search(last_leading_digits_pattern) !== 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\t// Check that the national number matches the phone number format regular expression\n\t\tif (matchesEntirely(national_number, format.pattern())) {\n\t\t\treturn format;\n\t\t}\n\t}\n}\n\n// Removes brackets and replaces dashes with spaces.\n//\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\n//\n// For some reason Google's metadata contains `<intlFormat/>`s with brackets and dashes.\n// Meanwhile, there's no single opinion about using punctuation in international phone numbers.\n//\n// For example, Google's `<intlFormat/>` for USA is `+1 213-373-4253`.\n// And here's a quote from WikiPedia's \"North American Numbering Plan\" page:\n// https://en.wikipedia.org/wiki/North_American_Numbering_Plan\n//\n// \"The country calling code for all countries participating in the NANP is 1.\n// In international format, an NANP number should be listed as +1 301 555 01 00,\n// where 301 is an area code (Maryland).\"\n//\n// I personally prefer the international format without any punctuation.\n// For example, brackets are remnants of the old age, meaning that the\n// phone number part in brackets (so called \"area code\") can be omitted\n// if dialing within the same \"area\".\n// And hyphens were clearly introduced for splitting local numbers into memorizable groups.\n// For example, remembering \"5553535\" is difficult but \"555-35-35\" is much simpler.\n// Imagine a man taking a bus from home to work and seeing an ad with a phone number.\n// He has a couple of seconds to memorize that number until it passes by.\n// If it were spaces instead of hyphens the man wouldn't necessarily get it,\n// but with hyphens instead of spaces the grouping is more explicit.\n// I personally think that hyphens introduce visual clutter,\n// so I prefer replacing them with spaces in international numbers.\n// In the modern age all output is done on displays where spaces are clearly distinguishable\n// so hyphens can be safely replaced with spaces without losing any legibility.\n//\nexport function changeInternationalFormatStyle(local) {\n\treturn local.replace(new RegExp('[' + VALID_PUNCTUATION + ']+', 'g'), ' ').trim();\n}\n\nfunction addExtension(formattedNumber, ext, metadata, formatExtension) {\n\treturn ext ? formatExtension(formattedNumber, ext, metadata) : formattedNumber;\n}\n\nexport function formatIDDSameCountryCallingCodeNumber(number, toCountryCallingCode, fromCountry, toCountryMetadata) {\n\tvar fromCountryMetadata = new Metadata(toCountryMetadata.metadata);\n\tfromCountryMetadata.country(fromCountry);\n\n\t// If calling within the same country calling code.\n\tif (toCountryCallingCode === fromCountryMetadata.countryCallingCode()) {\n\t\t// For NANPA regions, return the national format for these regions\n\t\t// but prefix it with the country calling code.\n\t\tif (toCountryCallingCode === '1') {\n\t\t\treturn toCountryCallingCode + ' ' + format_national_number(number, 'NATIONAL', toCountryMetadata);\n\t\t}\n\n\t\t// If regions share a country calling code, the country calling code need\n\t\t// not be dialled. This also applies when dialling within a region, so this\n\t\t// if clause covers both these cases. Technically this is the case for\n\t\t// dialling from La Reunion to other overseas departments of France (French\n\t\t// Guiana, Martinique, Guadeloupe), but not vice versa - so we don't cover\n\t\t// this edge case for now and for those cases return the version including\n\t\t// country calling code. Details here:\n\t\t// http://www.petitfute.com/voyage/225-info-pratiques-reunion\n\t\t//\n\t\treturn format_national_number(number, 'NATIONAL', toCountryMetadata);\n\t}\n}\n//# sourceMappingURL=format_.js.map","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport Metadata from './metadata';\nimport isPossibleNumber from './isPossibleNumber_';\nimport isValidNumber from './validate_';\nimport isValidNumberForRegion from './isValidNumberForRegion_';\nimport getNumberType from './getNumberType_';\nimport formatNumber from './format_';\n\nvar PhoneNumber = function () {\n\tfunction PhoneNumber(countryCallingCode, nationalNumber, metadata) {\n\t\t_classCallCheck(this, PhoneNumber);\n\n\t\tif (!countryCallingCode) {\n\t\t\tthrow new TypeError('`countryCallingCode` not passed');\n\t\t}\n\t\tif (!nationalNumber) {\n\t\t\tthrow new TypeError('`nationalNumber` not passed');\n\t\t}\n\t\t// If country code is passed then derive `countryCallingCode` from it.\n\t\t// Also store the country code as `.country`.\n\t\tif (isCountryCode(countryCallingCode)) {\n\t\t\tthis.country = countryCallingCode;\n\t\t\tvar _metadata = new Metadata(metadata);\n\t\t\t_metadata.country(countryCallingCode);\n\t\t\tcountryCallingCode = _metadata.countryCallingCode();\n\t\t}\n\t\tthis.countryCallingCode = countryCallingCode;\n\t\tthis.nationalNumber = nationalNumber;\n\t\tthis.number = '+' + this.countryCallingCode + this.nationalNumber;\n\t\tthis.metadata = metadata;\n\t}\n\n\t_createClass(PhoneNumber, [{\n\t\tkey: 'isPossible',\n\t\tvalue: function isPossible() {\n\t\t\treturn isPossibleNumber(this, { v2: true }, this.metadata);\n\t\t}\n\t}, {\n\t\tkey: 'isValid',\n\t\tvalue: function isValid() {\n\t\t\treturn isValidNumber(this, { v2: true }, this.metadata);\n\t\t}\n\n\t\t// // Is just an alias for `this.isValid() && this.country === country`.\n\t\t// // https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\n\t\t// isValidForRegion(country) {\n\t\t// \treturn isValidNumberForRegion(this, country, { v2: true }, this.metadata)\n\t\t// }\n\n\t}, {\n\t\tkey: 'getType',\n\t\tvalue: function getType() {\n\t\t\treturn getNumberType(this, { v2: true }, this.metadata);\n\t\t}\n\t}, {\n\t\tkey: 'format',\n\t\tvalue: function format(_format, options) {\n\t\t\treturn formatNumber(this, _format, options ? _extends({}, options, { v2: true }) : { v2: true }, this.metadata);\n\t\t}\n\t}, {\n\t\tkey: 'formatNational',\n\t\tvalue: function formatNational(options) {\n\t\t\treturn this.format('NATIONAL', options);\n\t\t}\n\t}, {\n\t\tkey: 'formatInternational',\n\t\tvalue: function formatInternational(options) {\n\t\t\treturn this.format('INTERNATIONAL', options);\n\t\t}\n\t}, {\n\t\tkey: 'getURI',\n\t\tvalue: function getURI(options) {\n\t\t\treturn this.format('RFC3966', options);\n\t\t}\n\t}]);\n\n\treturn PhoneNumber;\n}();\n\nexport default PhoneNumber;\n\n\nvar isCountryCode = function isCountryCode(value) {\n\treturn (/^[A-Z]{2}$/.test(value)\n\t);\n};\n//# sourceMappingURL=PhoneNumber.js.map","import Metadata from './metadata';\nimport { matchesEntirely } from './util';\nimport getNumberType from './getNumberType_';\n\n/**\r\n * Checks if a given phone number is valid.\r\n *\r\n * If the `number` is a string, it will be parsed to an object,\r\n * but only if it contains only valid phone number characters (including punctuation).\r\n * If the `number` is an object, it is used as is.\r\n *\r\n * The optional `defaultCountry` argument is the default country.\r\n * I.e. it does not restrict to just that country,\r\n * e.g. in those cases where several countries share\r\n * the same phone numbering rules (NANPA, Britain, etc).\r\n * For example, even though the number `07624 369230`\r\n * belongs to the Isle of Man (\"IM\" country code)\r\n * calling `isValidNumber('07624369230', 'GB', metadata)`\r\n * still returns `true` because the country is not restricted to `GB`,\r\n * it's just that `GB` is the default one for the phone numbering rules.\r\n * For restricting the country see `isValidNumberForRegion()`\r\n * though restricting a country might not be a good idea.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * isValidNumber('+78005553535', metadata)\r\n * isValidNumber('8005553535', 'RU', metadata)\r\n * isValidNumber('88005553535', 'RU', metadata)\r\n * isValidNumber({ phone: '8005553535', country: 'RU' }, metadata)\r\n * ```\r\n */\nexport default function isValidNumber(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var metadata = arguments[2];\n\n  metadata = new Metadata(metadata);\n\n  // This is just to support `isValidNumber({})`\n  // for cases when `parseNumber()` returns `{}`.\n  if (!input.country) {\n    return false;\n  }\n\n  if (!metadata.hasCountry(input.country)) {\n    throw new Error('Unknown country: ' + input.country);\n  }\n\n  metadata.country(input.country);\n\n  // By default, countries only have type regexps when it's required for\n  // distinguishing different countries having the same `countryCallingCode`.\n  if (metadata.hasTypes()) {\n    return getNumberType(input, options, metadata.metadata) !== undefined;\n  }\n\n  // If there are no type regexps for this country in metadata then use\n  // `nationalNumberPattern` as a \"better than nothing\" replacement.\n  var national_number = options.v2 ? input.nationalNumber : input.phone;\n  return matchesEntirely(national_number, metadata.nationalNumberPattern());\n}\n//# sourceMappingURL=validate_.js.map","// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\n\nimport { VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS, MIN_LENGTH_FOR_NSN, MAX_LENGTH_FOR_NSN, MAX_LENGTH_COUNTRY_CODE } from './constants';\n\nimport { matchesEntirely } from './util';\nimport ParseError from './ParseError';\nimport Metadata from './metadata';\nimport isViablePhoneNumber from './isViablePhoneNumber';\nimport { extractExtension } from './extension';\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber';\nimport getCountryCallingCode from './getCountryCallingCode';\nimport getNumberType, { checkNumberLengthForType } from './getNumberType_';\nimport { is_possible_number } from './isPossibleNumber_';\nimport { stripIDDPrefix } from './IDD';\nimport { parseRFC3966 } from './RFC3966';\nimport PhoneNumber from './PhoneNumber';\n\n// We don't allow input strings for parsing to be longer than 250 chars.\n// This prevents malicious input from consuming CPU.\nvar MAX_INPUT_STRING_LENGTH = 250;\n\n// This consists of the plus symbol, digits, and arabic-indic digits.\nvar PHONE_NUMBER_START_PATTERN = new RegExp('[' + PLUS_CHARS + VALID_DIGITS + ']');\n\n// Regular expression of trailing characters that we want to remove.\nvar AFTER_PHONE_NUMBER_END_PATTERN = new RegExp('[^' + VALID_DIGITS + ']+$');\n\n// `options`:\n//  {\n//    country:\n//    {\n//      restrict - (a two-letter country code)\n//                 the phone number must be in this country\n//\n//      default - (a two-letter country code)\n//                default country to use for phone number parsing and validation\n//                (if no country code could be derived from the phone number)\n//    }\n//  }\n//\n// Returns `{ country, number }`\n//\n// Example use cases:\n//\n// ```js\n// parse('8 (800) 555-35-35', 'RU')\n// parse('8 (800) 555-35-35', 'RU', metadata)\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } })\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } }, metadata)\n// parse('+7 800 555 35 35')\n// parse('+7 800 555 35 35', metadata)\n// ```\n//\nexport default function parse(text) {\n\tvar options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\tvar metadata = arguments[2];\n\n\tmetadata = new Metadata(metadata);\n\n\t// Validate `defaultCountry`.\n\tif (options.defaultCountry && !metadata.hasCountry(options.defaultCountry)) {\n\t\tif (options.v2) {\n\t\t\tthrow new ParseError('INVALID_COUNTRY');\n\t\t}\n\t\tthrow new Error('Unknown country: ' + options.defaultCountry);\n\t}\n\n\t// Parse the phone number.\n\n\tvar _parse_input = parse_input(text, options.v2),\n\t    formattedPhoneNumber = _parse_input.number,\n\t    ext = _parse_input.ext;\n\n\t// If the phone number is not viable then return nothing.\n\n\n\tif (!formattedPhoneNumber) {\n\t\tif (options.v2) {\n\t\t\tthrow new ParseError('NOT_A_NUMBER');\n\t\t}\n\t\treturn {};\n\t}\n\n\tvar _parsePhoneNumber = parsePhoneNumber(formattedPhoneNumber, options.defaultCountry, metadata),\n\t    country = _parsePhoneNumber.country,\n\t    nationalNumber = _parsePhoneNumber.nationalNumber,\n\t    countryCallingCode = _parsePhoneNumber.countryCallingCode,\n\t    carrierCode = _parsePhoneNumber.carrierCode;\n\n\tif (!metadata.selectedCountry()) {\n\t\tif (options.v2) {\n\t\t\tthrow new ParseError('INVALID_COUNTRY');\n\t\t}\n\t\treturn {};\n\t}\n\n\t// Validate national (significant) number length.\n\tif (!nationalNumber || nationalNumber.length < MIN_LENGTH_FOR_NSN) {\n\t\t// Won't throw here because the regexp already demands length > 1.\n\t\t/* istanbul ignore if */\n\t\tif (options.v2) {\n\t\t\tthrow new ParseError('TOO_SHORT');\n\t\t}\n\t\t// Google's demo just throws an error in this case.\n\t\treturn {};\n\t}\n\n\t// Validate national (significant) number length.\n\t//\n\t// A sidenote:\n\t//\n\t// They say that sometimes national (significant) numbers\n\t// can be longer than `MAX_LENGTH_FOR_NSN` (e.g. in Germany).\n\t// https://github.com/googlei18n/libphonenumber/blob/7e1748645552da39c4e1ba731e47969d97bdb539/resources/phonenumber.proto#L36\n\t// Such numbers will just be discarded.\n\t//\n\tif (nationalNumber.length > MAX_LENGTH_FOR_NSN) {\n\t\tif (options.v2) {\n\t\t\tthrow new ParseError('TOO_LONG');\n\t\t}\n\t\t// Google's demo just throws an error in this case.\n\t\treturn {};\n\t}\n\n\tif (options.v2) {\n\t\tvar phoneNumber = new PhoneNumber(countryCallingCode, nationalNumber, metadata.metadata);\n\n\t\tif (country) {\n\t\t\tphoneNumber.country = country;\n\t\t}\n\t\tif (carrierCode) {\n\t\t\tphoneNumber.carrierCode = carrierCode;\n\t\t}\n\t\tif (ext) {\n\t\t\tphoneNumber.ext = ext;\n\t\t}\n\n\t\treturn phoneNumber;\n\t}\n\n\t// Check if national phone number pattern matches the number.\n\t// National number pattern is different for each country,\n\t// even for those ones which are part of the \"NANPA\" group.\n\tvar valid = country && matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) ? true : false;\n\n\tif (!options.extended) {\n\t\treturn valid ? result(country, nationalNumber, ext) : {};\n\t}\n\n\treturn {\n\t\tcountry: country,\n\t\tcountryCallingCode: countryCallingCode,\n\t\tcarrierCode: carrierCode,\n\t\tvalid: valid,\n\t\tpossible: valid ? true : options.extended === true && metadata.possibleLengths() && is_possible_number(nationalNumber, countryCallingCode !== undefined, metadata),\n\t\tphone: nationalNumber,\n\t\text: ext\n\t};\n}\n\n/**\r\n * Extracts a parseable phone number.\r\n * @param  {string} text - Input.\r\n * @return {string}.\r\n */\nexport function extract_formatted_phone_number(text, v2) {\n\tif (!text) {\n\t\treturn;\n\t}\n\n\tif (text.length > MAX_INPUT_STRING_LENGTH) {\n\t\tif (v2) {\n\t\t\tthrow new ParseError('TOO_LONG');\n\t\t}\n\t\treturn;\n\t}\n\n\t// Attempt to extract a possible number from the string passed in\n\n\tvar starts_at = text.search(PHONE_NUMBER_START_PATTERN);\n\n\tif (starts_at < 0) {\n\t\treturn;\n\t}\n\n\treturn text\n\t// Trim everything to the left of the phone number\n\t.slice(starts_at)\n\t// Remove trailing non-numerical characters\n\t.replace(AFTER_PHONE_NUMBER_END_PATTERN, '');\n}\n\n// Strips any national prefix (such as 0, 1) present in the number provided.\n// \"Carrier codes\" are only used  in Colombia and Brazil,\n// and only when dialing within those countries from a mobile phone to a fixed line number.\nexport function strip_national_prefix_and_carrier_code(number, metadata) {\n\tif (!number || !metadata.nationalPrefixForParsing()) {\n\t\treturn { number: number };\n\t}\n\n\t// In many countries the national prefix\n\t// is not just a constant digit (like `0` in UK)\n\t// but can be different depending on the phone number\n\t// (and can be also absent for some phone numbers).\n\t//\n\t// So `national_prefix_for_parsing` is used when parsing\n\t// a national-prefixed (local) phone number\n\t// into a national significant phone number\n\t// extracting that possible national prefix out of it.\n\t//\n\t// Example `national_prefix_for_parsing` for Australia (AU) is `0|(183[12])`.\n\t// Which means that in Australia the national prefix can be: `0`, `1831`, `1832`.\n\n\t// Attempt to parse the first digits as a national prefix\n\tvar national_prefix_pattern = new RegExp('^(?:' + metadata.nationalPrefixForParsing() + ')');\n\tvar national_prefix_matcher = national_prefix_pattern.exec(number);\n\n\t// If no national prefix is present in the phone number,\n\t// but the national prefix is optional for this country,\n\t// then consider this phone number valid.\n\t//\n\t// Google's reference `libphonenumber` implementation\n\t// wouldn't recognize such phone numbers as valid,\n\t// but I think it would perfectly make sense\n\t// to consider such phone numbers as valid\n\t// because if a national phone number was originally\n\t// formatted without the national prefix\n\t// then it must be parseable back into the original national number.\n\t// In other words, `parse(format(number))`\n\t// must always be equal to `number`.\n\t//\n\tif (!national_prefix_matcher) {\n\t\treturn { number: number };\n\t}\n\n\tvar national_significant_number = void 0;\n\n\t// In more complex cases just `national_prefix_for_parsing` regexp\n\t// is not enough to extract the national number and then strip it\n\t// like `number.slice(national_prefix.length)` because when parsing\n\t// national numbers it's not always clear whether the first digits\n\t// are a national prefix or part of the national significant number.\n\t// For such cases `national_prefix_transform_rule` regexp is present\n\t// which contains \"capturing groups\" that are later used in such\n\t// `national_prefix_transform_rule` to transform the national number\n\t// being parsed into the national significant number.\n\t//\n\t// Example.\n\t// Country: U.S. Virgin Islands (VI).\n\t// Country calling code: +1.\n\t// Leading digits: 340.\n\t// Phone number format: +1 (340) xxx-xxxx.\n\t// National prefix: 1.\n\t// National prefix for parsing: 1|([2-9]\\d{6})$.\n\t// National prefix transform rule: 340$1.\n\t//\n\t// So for input \"13401234567\" \"national prefix for parsing\" regexp\n\t// will return \"1\" and the national significant number will be\n\t// \"13401234567\".slice(\"1\".length) === \"(340) 123-4567\".\n\t//\n\t// And for input \"3401234567\" \"national prefix for parsing\" regexp\n\t// the \"captured group\" will be \"3401234567\" and the national significant\n\t// number will be \"3401234567\".replace(\"340123\", \"340340123\") === \"(340) 3401234567\".\n\t//\n\t// `national_prefix_matcher[captured_groups_count]` means that\n\t// the corresponding \"captured group\" is not empty.\n\t// It can be empty if the regexp either doesn't have any \"capturing groups\"\n\t// or if the \"capturing groups\" are defined as optional.\n\t// Example: \"0?(?:...)?\" for Argentina.\n\t//\n\tvar captured_groups_count = national_prefix_matcher.length - 1;\n\tif (metadata.nationalPrefixTransformRule() && national_prefix_matcher[captured_groups_count]) {\n\t\tnational_significant_number = number.replace(national_prefix_pattern, metadata.nationalPrefixTransformRule());\n\t}\n\t// If it's a simple-enough case then just strip the national prefix from the number.\n\telse {\n\t\t\t// National prefix is the whole substring matched by\n\t\t\t// the `national_prefix_for_parsing` regexp.\n\t\t\tvar national_prefix = national_prefix_matcher[0];\n\t\t\tnational_significant_number = number.slice(national_prefix.length);\n\t\t}\n\n\tvar carrierCode = void 0;\n\tif (captured_groups_count > 0) {\n\t\tcarrierCode = national_prefix_matcher[1];\n\t}\n\n\t// The following is done in `get_country_and_national_number_for_local_number()` instead.\n\t//\n\t// // Verify the parsed national (significant) number for this country\n\t// const national_number_rule = new RegExp(metadata.nationalNumberPattern())\n\t// //\n\t// // If the original number (before stripping national prefix) was viable,\n\t// // and the resultant number is not, then prefer the original phone number.\n\t// // This is because for some countries (e.g. Russia) the same digit could be both\n\t// // a national prefix and a leading digit of a valid national phone number,\n\t// // like `8` is the national prefix for Russia and both\n\t// // `8 800 555 35 35` and `800 555 35 35` are valid numbers.\n\t// if (matchesEntirely(number, national_number_rule) &&\n\t// \t\t!matchesEntirely(national_significant_number, national_number_rule))\n\t// {\n\t// \treturn number\n\t// }\n\n\t// Return the parsed national (significant) number\n\treturn {\n\t\tnumber: national_significant_number,\n\t\tcarrierCode: carrierCode\n\t};\n}\n\nexport function find_country_code(country_calling_code, national_phone_number, metadata) {\n\t// Is always non-empty, because `country_calling_code` is always valid\n\tvar possible_countries = metadata.countryCallingCodes()[country_calling_code];\n\n\t// If there's just one country corresponding to the country code,\n\t// then just return it, without further phone number digits validation.\n\tif (possible_countries.length === 1) {\n\t\treturn possible_countries[0];\n\t}\n\n\treturn _find_country_code(possible_countries, national_phone_number, metadata.metadata);\n}\n\n// Changes `metadata` `country`.\nfunction _find_country_code(possible_countries, national_phone_number, metadata) {\n\tmetadata = new Metadata(metadata);\n\n\tfor (var _iterator = possible_countries, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar country = _ref;\n\n\t\tmetadata.country(country);\n\n\t\t// Leading digits check would be the simplest one\n\t\tif (metadata.leadingDigits()) {\n\t\t\tif (national_phone_number && national_phone_number.search(metadata.leadingDigits()) === 0) {\n\t\t\t\treturn country;\n\t\t\t}\n\t\t}\n\t\t// Else perform full validation with all of those\n\t\t// fixed-line/mobile/etc regular expressions.\n\t\telse if (getNumberType({ phone: national_phone_number, country: country }, undefined, metadata.metadata)) {\n\t\t\t\treturn country;\n\t\t\t}\n\t}\n}\n\n/**\r\n * @param  {string} text - Input.\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\nfunction parse_input(text, v2) {\n\t// Parse RFC 3966 phone number URI.\n\tif (text && text.indexOf('tel:') === 0) {\n\t\treturn parseRFC3966(text);\n\t}\n\n\tvar number = extract_formatted_phone_number(text, v2);\n\n\t// If the phone number is not viable, then abort.\n\tif (!number || !isViablePhoneNumber(number)) {\n\t\treturn {};\n\t}\n\n\t// Attempt to parse extension first, since it doesn't require region-specific\n\t// data and we want to have the non-normalised number here.\n\tvar with_extension_stripped = extractExtension(number);\n\tif (with_extension_stripped.ext) {\n\t\treturn with_extension_stripped;\n\t}\n\n\treturn { number: number };\n}\n\n/**\r\n * Creates `parse()` result object.\r\n */\nfunction result(country, national_number, ext) {\n\tvar result = {\n\t\tcountry: country,\n\t\tphone: national_number\n\t};\n\n\tif (ext) {\n\t\tresult.ext = ext;\n\t}\n\n\treturn result;\n}\n\n/**\r\n * Parses a viable phone number.\r\n * @param {string} formattedPhoneNumber\r\n * @param {string} [defaultCountry]\r\n * @param {Metadata} metadata\r\n * @return {object} Returns `{ country: string?, countryCallingCode: string?, nationalNumber: string? }`.\r\n */\nfunction parsePhoneNumber(formattedPhoneNumber, defaultCountry, metadata) {\n\tvar _extractCountryCallin = extractCountryCallingCode(formattedPhoneNumber, defaultCountry, metadata.metadata),\n\t    countryCallingCode = _extractCountryCallin.countryCallingCode,\n\t    number = _extractCountryCallin.number;\n\n\tvar country = void 0;\n\n\tif (countryCallingCode) {\n\t\tmetadata.chooseCountryByCountryCallingCode(countryCallingCode);\n\t}\n\t// If `formattedPhoneNumber` is in \"national\" format\n\t// then `number` is defined and `countryCallingCode` isn't.\n\telse if (number && defaultCountry) {\n\t\t\tmetadata.country(defaultCountry);\n\t\t\tcountry = defaultCountry;\n\t\t\tcountryCallingCode = getCountryCallingCode(defaultCountry, metadata.metadata);\n\t\t} else return {};\n\n\tif (!number) {\n\t\treturn { countryCallingCode: countryCallingCode };\n\t}\n\n\tvar _parseNationalNumber = parseNationalNumber(number, metadata),\n\t    nationalNumber = _parseNationalNumber.nationalNumber,\n\t    carrierCode = _parseNationalNumber.carrierCode;\n\n\t// Sometimes there are several countries\n\t// corresponding to the same country phone code\n\t// (e.g. NANPA countries all having `1` country phone code).\n\t// Therefore, to reliably determine the exact country,\n\t// national (significant) number should have been parsed first.\n\t//\n\t// When `metadata.json` is generated, all \"ambiguous\" country phone codes\n\t// get their countries populated with the full set of\n\t// \"phone number type\" regular expressions.\n\t//\n\n\n\tvar exactCountry = find_country_code(countryCallingCode, nationalNumber, metadata);\n\tif (exactCountry) {\n\t\tcountry = exactCountry;\n\t\tmetadata.country(country);\n\t}\n\n\treturn {\n\t\tcountry: country,\n\t\tcountryCallingCode: countryCallingCode,\n\t\tnationalNumber: nationalNumber,\n\t\tcarrierCode: carrierCode\n\t};\n}\n\nfunction parseNationalNumber(number, metadata) {\n\tvar nationalNumber = parseIncompletePhoneNumber(number);\n\tvar carrierCode = void 0;\n\n\t// Parsing national prefixes and carrier codes\n\t// is only required for local phone numbers\n\t// but some people don't understand that\n\t// and sometimes write international phone numbers\n\t// with national prefixes (or maybe even carrier codes).\n\t// http://ucken.blogspot.ru/2016/03/trunk-prefixes-in-skype4b.html\n\t// Google's original library forgives such mistakes\n\t// and so does this library, because it has been requested:\n\t// https://github.com/catamphetamine/libphonenumber-js/issues/127\n\n\tvar _strip_national_prefi = strip_national_prefix_and_carrier_code(nationalNumber, metadata),\n\t    potentialNationalNumber = _strip_national_prefi.number,\n\t    potentialCarrierCode = _strip_national_prefi.carrierCode;\n\n\t// If metadata has \"possible lengths\" then employ the new algorythm.\n\n\n\tif (metadata.possibleLengths()) {\n\t\t// We require that the NSN remaining after stripping the national prefix and\n\t\t// carrier code be long enough to be a possible length for the region.\n\t\t// Otherwise, we don't do the stripping, since the original number could be\n\t\t// a valid short number.\n\t\tswitch (checkNumberLengthForType(potentialNationalNumber, undefined, metadata)) {\n\t\t\tcase 'TOO_SHORT':\n\t\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\n\t\t\tcase 'INVALID_LENGTH':\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tnationalNumber = potentialNationalNumber;\n\t\t\t\tcarrierCode = potentialCarrierCode;\n\t\t}\n\t} else {\n\t\t// If the original number (before stripping national prefix) was viable,\n\t\t// and the resultant number is not, then prefer the original phone number.\n\t\t// This is because for some countries (e.g. Russia) the same digit could be both\n\t\t// a national prefix and a leading digit of a valid national phone number,\n\t\t// like `8` is the national prefix for Russia and both\n\t\t// `8 800 555 35 35` and `800 555 35 35` are valid numbers.\n\t\tif (matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) && !matchesEntirely(potentialNationalNumber, metadata.nationalNumberPattern())) {\n\t\t\t// Keep the number without stripping national prefix.\n\t\t} else {\n\t\t\tnationalNumber = potentialNationalNumber;\n\t\t\tcarrierCode = potentialCarrierCode;\n\t\t}\n\t}\n\n\treturn {\n\t\tnationalNumber: nationalNumber,\n\t\tcarrierCode: carrierCode\n\t};\n}\n\n// Determines the country for a given (possibly incomplete) phone number.\n// export function get_country_from_phone_number(number, metadata)\n// {\n// \treturn parsePhoneNumber(number, null, metadata).country\n// }\n\n// Parses a formatted phone number\n// and returns `{ countryCallingCode, number }`\n// where `number` is just the \"number\" part\n// which is left after extracting `countryCallingCode`\n// and is not necessarily a \"national (significant) number\"\n// and might as well contain national prefix.\n//\nexport function extractCountryCallingCode(number, country, metadata) {\n\tnumber = parseIncompletePhoneNumber(number);\n\n\tif (!number) {\n\t\treturn {};\n\t}\n\n\t// If this is not an international phone number,\n\t// then don't extract country phone code.\n\tif (number[0] !== '+') {\n\t\t// Convert an \"out-of-country\" dialing phone number\n\t\t// to a proper international phone number.\n\t\tvar numberWithoutIDD = stripIDDPrefix(number, country, metadata);\n\n\t\t// If an IDD prefix was stripped then\n\t\t// convert the number to international one\n\t\t// for subsequent parsing.\n\t\tif (numberWithoutIDD && numberWithoutIDD !== number) {\n\t\t\tnumber = '+' + numberWithoutIDD;\n\t\t} else {\n\t\t\treturn { number: number };\n\t\t}\n\t}\n\n\t// Fast abortion: country codes do not begin with a '0'\n\tif (number[1] === '0') {\n\t\treturn {};\n\t}\n\n\tmetadata = new Metadata(metadata);\n\n\t// The thing with country phone codes\n\t// is that they are orthogonal to each other\n\t// i.e. there's no such country phone code A\n\t// for which country phone code B exists\n\t// where B starts with A.\n\t// Therefore, while scanning digits,\n\t// if a valid country code is found,\n\t// that means that it is the country code.\n\t//\n\tvar i = 2;\n\twhile (i - 1 <= MAX_LENGTH_COUNTRY_CODE && i <= number.length) {\n\t\tvar countryCallingCode = number.slice(1, i);\n\n\t\tif (metadata.countryCallingCodes()[countryCallingCode]) {\n\t\t\treturn {\n\t\t\t\tcountryCallingCode: countryCallingCode,\n\t\t\t\tnumber: number.slice(i)\n\t\t\t};\n\t\t}\n\n\t\ti++;\n\t}\n\n\treturn {};\n}\n//# sourceMappingURL=parse_.js.map","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nimport parseNumber from './parse_';\n\nexport default function parsePhoneNumber(text, options, metadata) {\n\treturn parseNumber(text, _extends({}, options, { v2: true }), metadata);\n}\n//# sourceMappingURL=parsePhoneNumber_.js.map","var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nimport parsePhoneNumber_ from './parsePhoneNumber_';\n\nexport default function parsePhoneNumber() {\n\tvar _normalizeArguments = normalizeArguments(arguments),\n\t    text = _normalizeArguments.text,\n\t    options = _normalizeArguments.options,\n\t    metadata = _normalizeArguments.metadata;\n\n\treturn parsePhoneNumber_(text, options, metadata);\n}\n\nexport function normalizeArguments(args) {\n\tvar _Array$prototype$slic = Array.prototype.slice.call(args),\n\t    _Array$prototype$slic2 = _slicedToArray(_Array$prototype$slic, 4),\n\t    arg_1 = _Array$prototype$slic2[0],\n\t    arg_2 = _Array$prototype$slic2[1],\n\t    arg_3 = _Array$prototype$slic2[2],\n\t    arg_4 = _Array$prototype$slic2[3];\n\n\tvar text = void 0;\n\tvar options = void 0;\n\tvar metadata = void 0;\n\n\t// If the phone number is passed as a string.\n\t// `parsePhoneNumber('88005553535', ...)`.\n\tif (typeof arg_1 === 'string') {\n\t\ttext = arg_1;\n\t} else throw new TypeError('A text for parsing must be a string.');\n\n\t// If \"default country\" argument is being passed then move it to `options`.\n\t// `parsePhoneNumber('88005553535', 'RU', [options], metadata)`.\n\tif (!arg_2 || typeof arg_2 === 'string') {\n\t\tif (arg_4) {\n\t\t\toptions = arg_3;\n\t\t\tmetadata = arg_4;\n\t\t} else {\n\t\t\toptions = undefined;\n\t\t\tmetadata = arg_3;\n\t\t}\n\n\t\tif (arg_2) {\n\t\t\toptions = _extends({ defaultCountry: arg_2 }, options);\n\t\t}\n\t}\n\t// `defaultCountry` is not passed.\n\t// Example: `parsePhoneNumber('+78005553535', [options], metadata)`.\n\telse if (isObject(arg_2)) {\n\t\t\tif (arg_3) {\n\t\t\t\toptions = arg_2;\n\t\t\t\tmetadata = arg_3;\n\t\t\t} else {\n\t\t\t\tmetadata = arg_2;\n\t\t\t}\n\t\t} else throw new Error('Invalid second argument: ' + arg_2);\n\n\treturn {\n\t\ttext: text,\n\t\toptions: options,\n\t\tmetadata: metadata\n\t};\n}\n\n// Otherwise istanbul would show this as \"branch not covered\".\n/* istanbul ignore next */\nvar isObject = function isObject(_) {\n\treturn (typeof _ === 'undefined' ? 'undefined' : _typeof(_)) === 'object';\n};\n//# sourceMappingURL=parsePhoneNumber.js.map","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nimport parsePhoneNumber from './parsePhoneNumber_';\nimport ParseError from './ParseError';\nimport { isSupportedCountry } from './metadata';\n\nexport default function parsePhoneNumberFromString(text, options, metadata) {\n\t// Validate `defaultCountry`.\n\tif (options && options.defaultCountry && !isSupportedCountry(options.defaultCountry, metadata)) {\n\t\toptions = _extends({}, options, {\n\t\t\tdefaultCountry: undefined\n\t\t});\n\t}\n\t// Parse phone number.\n\ttry {\n\t\treturn parsePhoneNumber(text, options, metadata);\n\t} catch (error) {\n\t\t/* istanbul ignore else */\n\t\tif (error instanceof ParseError) {\n\t\t\t//\n\t\t} else {\n\t\t\tthrow error;\n\t\t}\n\t}\n}\n//# sourceMappingURL=parsePhoneNumberFromString_.js.map","import { normalizeArguments } from './parsePhoneNumber';\nimport parsePhoneNumberFromString_ from './parsePhoneNumberFromString_';\n\nexport default function parsePhoneNumberFromString() {\n\tvar _normalizeArguments = normalizeArguments(arguments),\n\t    text = _normalizeArguments.text,\n\t    options = _normalizeArguments.options,\n\t    metadata = _normalizeArguments.metadata;\n\n\treturn parsePhoneNumberFromString_(text, options, metadata);\n}\n//# sourceMappingURL=parsePhoneNumberFromString.js.map","var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// This is an enhanced port of Google Android `libphonenumber`'s\n// `asyoutypeformatter.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/blob/8d21a365061de2ba0675c878a710a7b24f74d2ae/javascript/i18n/phonenumbers/asyoutypeformatter.js\n//\n// Simplified: does not differentiate between \"local-only\" numbers\n// and \"internationally dialable\" numbers.\n// For example, doesn't include changes like this:\n// https://github.com/googlei18n/libphonenumber/commit/865da605da12b01053c4f053310bac7c5fbb7935\n\nimport Metadata from './metadata';\n\nimport PhoneNumber from './PhoneNumber';\n\nimport { VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS } from './constants';\n\nimport { matchesEntirely } from './util';\n\nimport { extractCountryCallingCode as _extractCountryCallingCode, extract_formatted_phone_number, find_country_code, strip_national_prefix_and_carrier_code } from './parse_';\n\nimport { FIRST_GROUP_PATTERN, format_national_number_using_format, changeInternationalFormatStyle } from './format_';\n\nimport { checkNumberLengthForType } from './getNumberType_';\n\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber';\n\n// Used in phone number format template creation.\n// Could be any digit, I guess.\nvar DUMMY_DIGIT = '9';\n// I don't know why is it exactly `15`\nvar LONGEST_NATIONAL_PHONE_NUMBER_LENGTH = 15;\n// Create a phone number consisting only of the digit 9 that matches the\n// `number_pattern` by applying the pattern to the \"longest phone number\" string.\nvar LONGEST_DUMMY_PHONE_NUMBER = repeat(DUMMY_DIGIT, LONGEST_NATIONAL_PHONE_NUMBER_LENGTH);\n\n// The digits that have not been entered yet will be represented by a \\u2008,\n// the punctuation space.\nexport var DIGIT_PLACEHOLDER = 'x'; // '\\u2008' (punctuation space)\nvar DIGIT_PLACEHOLDER_MATCHER = new RegExp(DIGIT_PLACEHOLDER);\n\n// Deprecated: Google has removed some formatting pattern related code from their repo.\n// https://github.com/googlei18n/libphonenumber/commit/a395b4fef3caf57c4bc5f082e1152a4d2bd0ba4c\n// \"We no longer have numbers in formatting matching patterns, only \\d.\"\n// Because this library supports generating custom metadata\n// some users may still be using old metadata so the relevant\n// code seems to stay until some next major version update.\nvar SUPPORT_LEGACY_FORMATTING_PATTERNS = true;\n\n// A pattern that is used to match character classes in regular expressions.\n// An example of a character class is \"[1-4]\".\nvar CREATE_CHARACTER_CLASS_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && function () {\n\treturn (/\\[([^\\[\\]])*\\]/g\n\t);\n};\n\n// Any digit in a regular expression that actually denotes a digit. For\n// example, in the regular expression \"80[0-2]\\d{6,10}\", the first 2 digits\n// (8 and 0) are standalone digits, but the rest are not.\n// Two look-aheads are needed because the number following \\\\d could be a\n// two-digit number, since the phone number can be as long as 15 digits.\nvar CREATE_STANDALONE_DIGIT_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && function () {\n\treturn (/\\d(?=[^,}][^,}])/g\n\t);\n};\n\n// A pattern that is used to determine if a `format` is eligible\n// to be used by the \"as you type formatter\".\n// It is eligible when the `format` contains groups of the dollar sign\n// followed by a single digit, separated by valid phone number punctuation.\n// This prevents invalid punctuation (such as the star sign in Israeli star numbers)\n// getting into the output of the \"as you type formatter\".\nvar ELIGIBLE_FORMAT_PATTERN = new RegExp('^' + '[' + VALID_PUNCTUATION + ']*' + '(\\\\$\\\\d[' + VALID_PUNCTUATION + ']*)+' + '$');\n\n// This is the minimum length of the leading digits of a phone number\n// to guarantee the first \"leading digits pattern\" for a phone number format\n// to be preemptive.\nvar MIN_LEADING_DIGITS_LENGTH = 3;\n\nvar VALID_INCOMPLETE_PHONE_NUMBER = '[' + PLUS_CHARS + ']{0,1}' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']*';\n\nvar VALID_INCOMPLETE_PHONE_NUMBER_PATTERN = new RegExp('^' + VALID_INCOMPLETE_PHONE_NUMBER + '$', 'i');\n\nvar AsYouType = function () {\n\n\t/**\r\n  * @param {string?} [defaultCountry] - The default country used for parsing non-international phone numbers.\r\n  * @param {Object} metadata\r\n  */\n\tfunction AsYouType(defaultCountry, metadata) {\n\t\t_classCallCheck(this, AsYouType);\n\n\t\tthis.options = {};\n\n\t\tthis.metadata = new Metadata(metadata);\n\n\t\tif (defaultCountry && this.metadata.hasCountry(defaultCountry)) {\n\t\t\tthis.defaultCountry = defaultCountry;\n\t\t}\n\n\t\tthis.reset();\n\t}\n\t// Not setting `options` to a constructor argument\n\t// not to break backwards compatibility\n\t// for older versions of the library.\n\n\n\t_createClass(AsYouType, [{\n\t\tkey: 'input',\n\t\tvalue: function input(text) {\n\t\t\t// Parse input\n\n\t\t\tvar extracted_number = extract_formatted_phone_number(text) || '';\n\n\t\t\t// Special case for a lone '+' sign\n\t\t\t// since it's not considered a possible phone number.\n\t\t\tif (!extracted_number) {\n\t\t\t\tif (text && text.indexOf('+') >= 0) {\n\t\t\t\t\textracted_number = '+';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Validate possible first part of a phone number\n\t\t\tif (!VALID_INCOMPLETE_PHONE_NUMBER_PATTERN.test(extracted_number)) {\n\t\t\t\treturn this.currentOutput;\n\t\t\t}\n\n\t\t\treturn this.processInput(parseIncompletePhoneNumber(extracted_number));\n\t\t}\n\t}, {\n\t\tkey: 'processInput',\n\t\tvalue: function processInput(input) {\n\t\t\t// If an out of position '+' sign detected\n\t\t\t// (or a second '+' sign),\n\t\t\t// then just drop it from the input.\n\t\t\tif (input[0] === '+') {\n\t\t\t\tif (!this.parsedInput) {\n\t\t\t\t\tthis.parsedInput += '+';\n\n\t\t\t\t\t// If a default country was set\n\t\t\t\t\t// then reset it because an explicitly international\n\t\t\t\t\t// phone number is being entered\n\t\t\t\t\tthis.resetCountriness();\n\t\t\t\t}\n\n\t\t\t\tinput = input.slice(1);\n\t\t\t}\n\n\t\t\t// Raw phone number\n\t\t\tthis.parsedInput += input;\n\n\t\t\t// // Reset phone number validation state\n\t\t\t// this.valid = false\n\n\t\t\t// Add digits to the national number\n\t\t\tthis.nationalNumber += input;\n\n\t\t\t// TODO: Deprecated: rename `this.nationalNumber`\n\t\t\t// to `this.nationalNumber` and remove `.getNationalNumber()`.\n\n\t\t\t// Try to format the parsed input\n\n\t\t\tif (this.isInternational()) {\n\t\t\t\tif (!this.countryCallingCode) {\n\t\t\t\t\t// Extract country calling code from the digits entered so far.\n\n\t\t\t\t\t// There must be some digits in order to extract anything from them.\n\t\t\t\t\tif (!this.nationalNumber) {\n\t\t\t\t\t\t// Return raw phone number\n\t\t\t\t\t\treturn this.parsedInput;\n\t\t\t\t\t}\n\n\t\t\t\t\t// If one looks at country phone codes\n\t\t\t\t\t// then he can notice that no one country phone code\n\t\t\t\t\t// is ever a (leftmost) substring of another country phone code.\n\t\t\t\t\t// So if a valid country code is extracted so far\n\t\t\t\t\t// then it means that this is the country code.\n\n\t\t\t\t\t// If no country phone code could be extracted so far,\n\t\t\t\t\t// then just return the raw phone number,\n\t\t\t\t\t// because it has no way of knowing\n\t\t\t\t\t// how to format the phone number so far.\n\t\t\t\t\tif (!this.extractCountryCallingCode()) {\n\t\t\t\t\t\t// Return raw phone number\n\t\t\t\t\t\treturn this.parsedInput;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Initialize country-specific data\n\t\t\t\t\tthis.initialize_phone_number_formats_for_this_country_calling_code();\n\t\t\t\t\tthis.resetFormat();\n\t\t\t\t\tthis.determineTheCountry();\n\t\t\t\t}\n\t\t\t\t// `this.country` could be `undefined`,\n\t\t\t\t// for instance, when there is ambiguity\n\t\t\t\t// in a form of several different countries\n\t\t\t\t// each corresponding to the same country phone code\n\t\t\t\t// (e.g. NANPA: USA, Canada, etc),\n\t\t\t\t// and there's not enough digits entered\n\t\t\t\t// to reliably determine the country\n\t\t\t\t// the phone number belongs to.\n\t\t\t\t// Therefore, in cases of such ambiguity,\n\t\t\t\t// each time something is input,\n\t\t\t\t// try to determine the country\n\t\t\t\t// (if it's not determined yet).\n\t\t\t\telse if (!this.country) {\n\t\t\t\t\t\tthis.determineTheCountry();\n\t\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Some national prefixes are substrings of other national prefixes\n\t\t\t\t// (for the same country), therefore try to extract national prefix each time\n\t\t\t\t// because a longer national prefix might be available at some point in time.\n\n\t\t\t\tvar previous_national_prefix = this.nationalPrefix;\n\t\t\t\tthis.nationalNumber = this.nationalPrefix + this.nationalNumber;\n\n\t\t\t\t// Possibly extract a national prefix\n\t\t\t\tthis.extractNationalPrefix();\n\n\t\t\t\tif (this.nationalPrefix !== previous_national_prefix) {\n\t\t\t\t\t// National number has changed\n\t\t\t\t\t// (due to another national prefix been extracted)\n\t\t\t\t\t// therefore national number has changed\n\t\t\t\t\t// therefore reset all previous formatting data.\n\t\t\t\t\t// (and leading digits matching state)\n\t\t\t\t\tthis.matching_formats = undefined;\n\t\t\t\t\tthis.resetFormat();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// if (!this.shouldFormat())\n\t\t\t// {\n\t\t\t// \treturn this.format_as_non_formatted_number()\n\t\t\t// }\n\n\t\t\tif (!this.nationalNumber) {\n\t\t\t\treturn this.format_as_non_formatted_number();\n\t\t\t}\n\n\t\t\t// Check the available phone number formats\n\t\t\t// based on the currently available leading digits.\n\t\t\tthis.match_formats_by_leading_digits();\n\n\t\t\t// Format the phone number (given the next digits)\n\t\t\tvar formatted_national_phone_number = this.formatNationalNumber(input);\n\n\t\t\t// If the phone number could be formatted,\n\t\t\t// then return it, possibly prepending with country phone code\n\t\t\t// (for international phone numbers only)\n\t\t\tif (formatted_national_phone_number) {\n\t\t\t\treturn this.formatFullNumber(formatted_national_phone_number);\n\t\t\t}\n\n\t\t\t// If the phone number couldn't be formatted,\n\t\t\t// then just fall back to the raw phone number.\n\t\t\treturn this.format_as_non_formatted_number();\n\t\t}\n\t}, {\n\t\tkey: 'format_as_non_formatted_number',\n\t\tvalue: function format_as_non_formatted_number() {\n\t\t\t// Strip national prefix for incorrectly inputted international phones.\n\t\t\tif (this.isInternational() && this.countryCallingCode) {\n\t\t\t\treturn '+' + this.countryCallingCode + this.nationalNumber;\n\t\t\t}\n\n\t\t\treturn this.parsedInput;\n\t\t}\n\t}, {\n\t\tkey: 'formatNationalNumber',\n\t\tvalue: function formatNationalNumber(next_digits) {\n\t\t\t// Format the next phone number digits\n\t\t\t// using the previously chosen phone number format.\n\t\t\t//\n\t\t\t// This is done here because if `attempt_to_format_complete_phone_number`\n\t\t\t// was placed before this call then the `template`\n\t\t\t// wouldn't reflect the situation correctly (and would therefore be inconsistent)\n\t\t\t//\n\t\t\tvar national_number_formatted_with_previous_format = void 0;\n\t\t\tif (this.chosenFormat) {\n\t\t\t\tnational_number_formatted_with_previous_format = this.formatNextNationalNumberDigits(next_digits);\n\t\t\t}\n\n\t\t\t// See if the input digits can be formatted properly already. If not,\n\t\t\t// use the results from formatNextNationalNumberDigits(), which does formatting\n\t\t\t// based on the formatting pattern chosen.\n\n\t\t\tvar formatted_number = this.attempt_to_format_complete_phone_number();\n\n\t\t\t// Just because a phone number doesn't have a suitable format\n\t\t\t// that doesn't mean that the phone is invalid\n\t\t\t// because phone number formats only format phone numbers,\n\t\t\t// they don't validate them and some (rare) phone numbers\n\t\t\t// are meant to stay non-formatted.\n\t\t\tif (formatted_number) {\n\t\t\t\treturn formatted_number;\n\t\t\t}\n\n\t\t\t// For some phone number formats national prefix\n\n\t\t\t// If the previously chosen phone number format\n\t\t\t// didn't match the next (current) digit being input\n\t\t\t// (leading digits pattern didn't match).\n\t\t\tif (this.chooseAnotherFormat()) {\n\t\t\t\t// And a more appropriate phone number format\n\t\t\t\t// has been chosen for these `leading digits`,\n\t\t\t\t// then format the national phone number (so far)\n\t\t\t\t// using the newly selected phone number pattern.\n\n\t\t\t\t// Will return `undefined` if it couldn't format\n\t\t\t\t// the supplied national number\n\t\t\t\t// using the selected phone number pattern.\n\n\t\t\t\treturn this.reformatNationalNumber();\n\t\t\t}\n\n\t\t\t// If could format the next (current) digit\n\t\t\t// using the previously chosen phone number format\n\t\t\t// then return the formatted number so far.\n\n\t\t\t// If no new phone number format could be chosen,\n\t\t\t// and couldn't format the supplied national number\n\t\t\t// using the selected phone number pattern,\n\t\t\t// then it will return `undefined`.\n\n\t\t\treturn national_number_formatted_with_previous_format;\n\t\t}\n\t}, {\n\t\tkey: 'reset',\n\t\tvalue: function reset() {\n\t\t\t// Input stripped of non-phone-number characters.\n\t\t\t// Can only contain a possible leading '+' sign and digits.\n\t\t\tthis.parsedInput = '';\n\n\t\t\tthis.currentOutput = '';\n\n\t\t\t// This contains the national prefix that has been extracted. It contains only\n\t\t\t// digits without formatting.\n\t\t\tthis.nationalPrefix = '';\n\n\t\t\tthis.nationalNumber = '';\n\t\t\tthis.carrierCode = '';\n\n\t\t\tthis.resetCountriness();\n\n\t\t\tthis.resetFormat();\n\n\t\t\treturn this;\n\t\t}\n\t}, {\n\t\tkey: 'resetCountry',\n\t\tvalue: function resetCountry() {\n\t\t\tif (this.isInternational()) {\n\t\t\t\tthis.country = undefined;\n\t\t\t} else {\n\t\t\t\tthis.country = this.defaultCountry;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'resetCountriness',\n\t\tvalue: function resetCountriness() {\n\t\t\tthis.resetCountry();\n\n\t\t\tif (this.defaultCountry && !this.isInternational()) {\n\t\t\t\tthis.metadata.country(this.defaultCountry);\n\t\t\t\tthis.countryCallingCode = this.metadata.countryCallingCode();\n\n\t\t\t\tthis.initialize_phone_number_formats_for_this_country_calling_code();\n\t\t\t} else {\n\t\t\t\tthis.metadata.country(undefined);\n\t\t\t\tthis.countryCallingCode = undefined;\n\n\t\t\t\t// \"Available formats\" are all formats available for the country.\n\t\t\t\t// \"Matching formats\" are only formats eligible for the national number being entered.\n\t\t\t\tthis.available_formats = [];\n\t\t\t\tthis.matching_formats = undefined;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'resetFormat',\n\t\tvalue: function resetFormat() {\n\t\t\tthis.chosenFormat = undefined;\n\t\t\tthis.template = undefined;\n\t\t\tthis.partially_populated_template = undefined;\n\t\t\tthis.last_match_position = -1;\n\t\t}\n\n\t\t// Format each digit of national phone number (so far)\n\t\t// using the newly selected phone number pattern.\n\n\t}, {\n\t\tkey: 'reformatNationalNumber',\n\t\tvalue: function reformatNationalNumber() {\n\t\t\t// Format each digit of national phone number (so far)\n\t\t\t// using the selected phone number pattern.\n\t\t\treturn this.formatNextNationalNumberDigits(this.nationalNumber);\n\t\t}\n\t}, {\n\t\tkey: 'initialize_phone_number_formats_for_this_country_calling_code',\n\t\tvalue: function initialize_phone_number_formats_for_this_country_calling_code() {\n\t\t\t// Get all \"eligible\" phone number formats for this country\n\t\t\tthis.available_formats = this.metadata.formats().filter(function (format) {\n\t\t\t\treturn ELIGIBLE_FORMAT_PATTERN.test(format.internationalFormat());\n\t\t\t});\n\n\t\t\tthis.matching_formats = undefined;\n\t\t}\n\t}, {\n\t\tkey: 'match_formats_by_leading_digits',\n\t\tvalue: function match_formats_by_leading_digits() {\n\t\t\tvar leading_digits = this.nationalNumber;\n\n\t\t\t// \"leading digits\" pattern list starts with a\n\t\t\t// \"leading digits\" pattern fitting a maximum of 3 leading digits.\n\t\t\t// So, after a user inputs 3 digits of a national (significant) phone number\n\t\t\t// this national (significant) number can already be formatted.\n\t\t\t// The next \"leading digits\" pattern is for 4 leading digits max,\n\t\t\t// and the \"leading digits\" pattern after it is for 5 leading digits max, etc.\n\n\t\t\t// This implementation is different from Google's\n\t\t\t// in that it searches for a fitting format\n\t\t\t// even if the user has entered less than\n\t\t\t// `MIN_LEADING_DIGITS_LENGTH` digits of a national number.\n\t\t\t// Because some leading digits patterns already match for a single first digit.\n\t\t\tvar index_of_leading_digits_pattern = leading_digits.length - MIN_LEADING_DIGITS_LENGTH;\n\t\t\tif (index_of_leading_digits_pattern < 0) {\n\t\t\t\tindex_of_leading_digits_pattern = 0;\n\t\t\t}\n\n\t\t\t// \"Available formats\" are all formats available for the country.\n\t\t\t// \"Matching formats\" are only formats eligible for the national number being entered.\n\n\t\t\t// If at least `MIN_LEADING_DIGITS_LENGTH` digits of a national number are available\n\t\t\t// then format matching starts narrowing down the list of possible formats\n\t\t\t// (only previously matched formats are considered for next digits).\n\t\t\tvar available_formats = this.had_enough_leading_digits && this.matching_formats || this.available_formats;\n\t\t\tthis.had_enough_leading_digits = this.shouldFormat();\n\n\t\t\tthis.matching_formats = available_formats.filter(function (format) {\n\t\t\t\tvar leading_digits_patterns_count = format.leadingDigitsPatterns().length;\n\n\t\t\t\t// If this format is not restricted to a certain\n\t\t\t\t// leading digits pattern then it fits.\n\t\t\t\tif (leading_digits_patterns_count === 0) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tvar leading_digits_pattern_index = Math.min(index_of_leading_digits_pattern, leading_digits_patterns_count - 1);\n\t\t\t\tvar leading_digits_pattern = format.leadingDigitsPatterns()[leading_digits_pattern_index];\n\n\t\t\t\t// Brackets are required for `^` to be applied to\n\t\t\t\t// all or-ed (`|`) parts, not just the first one.\n\t\t\t\treturn new RegExp('^(' + leading_digits_pattern + ')').test(leading_digits);\n\t\t\t});\n\n\t\t\t// If there was a phone number format chosen\n\t\t\t// and it no longer holds given the new leading digits then reset it.\n\t\t\t// The test for this `if` condition is marked as:\n\t\t\t// \"Reset a chosen format when it no longer holds given the new leading digits\".\n\t\t\t// To construct a valid test case for this one can find a country\n\t\t\t// in `PhoneNumberMetadata.xml` yielding one format for 3 `<leadingDigits>`\n\t\t\t// and yielding another format for 4 `<leadingDigits>` (Australia in this case).\n\t\t\tif (this.chosenFormat && this.matching_formats.indexOf(this.chosenFormat) === -1) {\n\t\t\t\tthis.resetFormat();\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'shouldFormat',\n\t\tvalue: function shouldFormat() {\n\t\t\t// Start matching any formats at all when the national number\n\t\t\t// entered so far is at least 3 digits long,\n\t\t\t// otherwise format matching would give false negatives\n\t\t\t// like when the digits entered so far are `2`\n\t\t\t// and the leading digits pattern is `21` –\n\t\t\t// it's quite obvious in this case that the format could be the one\n\t\t\t// but due to the absence of further digits it would give false negative.\n\t\t\t//\n\t\t\t// Presumably the limitation of \"3 digits min\"\n\t\t\t// is imposed to exclude false matches,\n\t\t\t// e.g. when there are two different formats\n\t\t\t// each one fitting one or two leading digits being input.\n\t\t\t// But for this case I would propose a specific `if/else` condition.\n\t\t\t//\n\t\t\treturn this.nationalNumber.length >= MIN_LEADING_DIGITS_LENGTH;\n\t\t}\n\n\t\t// Check to see if there is an exact pattern match for these digits. If so, we\n\t\t// should use this instead of any other formatting template whose\n\t\t// `leadingDigitsPattern` also matches the input.\n\n\t}, {\n\t\tkey: 'attempt_to_format_complete_phone_number',\n\t\tvalue: function attempt_to_format_complete_phone_number() {\n\t\t\tfor (var _iterator = this.matching_formats, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\t\t\tvar _ref;\n\n\t\t\t\tif (_isArray) {\n\t\t\t\t\tif (_i >= _iterator.length) break;\n\t\t\t\t\t_ref = _iterator[_i++];\n\t\t\t\t} else {\n\t\t\t\t\t_i = _iterator.next();\n\t\t\t\t\tif (_i.done) break;\n\t\t\t\t\t_ref = _i.value;\n\t\t\t\t}\n\n\t\t\t\tvar format = _ref;\n\n\t\t\t\tvar matcher = new RegExp('^(?:' + format.pattern() + ')$');\n\n\t\t\t\tif (!matcher.test(this.nationalNumber)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (!this.isFormatApplicable(format)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// To leave the formatter in a consistent state\n\t\t\t\tthis.resetFormat();\n\t\t\t\tthis.chosenFormat = format;\n\n\t\t\t\tvar formatted_number = format_national_number_using_format(this.nationalNumber, format, this.isInternational(), this.nationalPrefix !== '', this.metadata);\n\n\t\t\t\t// Special handling for NANPA countries for AsYouType formatter.\n\t\t\t\t// Copied from Google's `libphonenumber`:\n\t\t\t\t// https://github.com/googlei18n/libphonenumber/blob/66986dbbe443ee8450e2b54dcd44ac384b3bbee8/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L535-L573\n\t\t\t\tif (this.nationalPrefix && this.countryCallingCode === '1') {\n\t\t\t\t\tformatted_number = '1 ' + formatted_number;\n\t\t\t\t}\n\n\t\t\t\t// Set `this.template` and `this.partially_populated_template`.\n\t\t\t\t//\n\t\t\t\t// `else` case doesn't ever happen\n\t\t\t\t// with the current metadata,\n\t\t\t\t// but just in case.\n\t\t\t\t//\n\t\t\t\t/* istanbul ignore else */\n\t\t\t\tif (this.createFormattingTemplate(format)) {\n\t\t\t\t\t// Populate `this.partially_populated_template`\n\t\t\t\t\tthis.reformatNationalNumber();\n\t\t\t\t} else {\n\t\t\t\t\t// Prepend `+CountryCode` in case of an international phone number\n\t\t\t\t\tvar full_number = this.formatFullNumber(formatted_number);\n\t\t\t\t\tthis.template = full_number.replace(/[\\d\\+]/g, DIGIT_PLACEHOLDER);\n\t\t\t\t\tthis.partially_populated_template = full_number;\n\t\t\t\t}\n\n\t\t\t\treturn formatted_number;\n\t\t\t}\n\t\t}\n\n\t\t// Prepends `+CountryCode` in case of an international phone number\n\n\t}, {\n\t\tkey: 'formatFullNumber',\n\t\tvalue: function formatFullNumber(formattedNationalNumber) {\n\t\t\tif (this.isInternational()) {\n\t\t\t\treturn '+' + this.countryCallingCode + ' ' + formattedNationalNumber;\n\t\t\t}\n\t\t\treturn formattedNationalNumber;\n\t\t}\n\n\t\t// Extracts the country calling code from the beginning\n\t\t// of the entered `national_number` (so far),\n\t\t// and places the remaining input into the `national_number`.\n\n\t}, {\n\t\tkey: 'extractCountryCallingCode',\n\t\tvalue: function extractCountryCallingCode() {\n\t\t\tvar _extractCountryCallin = _extractCountryCallingCode(this.parsedInput, this.defaultCountry, this.metadata.metadata),\n\t\t\t    countryCallingCode = _extractCountryCallin.countryCallingCode,\n\t\t\t    number = _extractCountryCallin.number;\n\n\t\t\tif (!countryCallingCode) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.countryCallingCode = countryCallingCode;\n\n\t\t\t// Sometimes people erroneously write national prefix\n\t\t\t// as part of an international number, e.g. +44 (0) ....\n\t\t\t// This violates the standards for international phone numbers,\n\t\t\t// so \"As You Type\" formatter assumes no national prefix\n\t\t\t// when parsing a phone number starting from `+`.\n\t\t\t// Even if it did attempt to filter-out that national prefix\n\t\t\t// it would look weird for a user trying to enter a digit\n\t\t\t// because from user's perspective the keyboard \"wouldn't be working\".\n\t\t\tthis.nationalNumber = number;\n\n\t\t\tthis.metadata.chooseCountryByCountryCallingCode(countryCallingCode);\n\t\t\treturn this.metadata.selectedCountry() !== undefined;\n\t\t}\n\t}, {\n\t\tkey: 'extractNationalPrefix',\n\t\tvalue: function extractNationalPrefix() {\n\t\t\tthis.nationalPrefix = '';\n\n\t\t\tif (!this.metadata.selectedCountry()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Only strip national prefixes for non-international phone numbers\n\t\t\t// because national prefixes can't be present in international phone numbers.\n\t\t\t// While `parseNumber()` is forgiving is such cases, `AsYouType` is not.\n\n\t\t\tvar _strip_national_prefi = strip_national_prefix_and_carrier_code(this.nationalNumber, this.metadata),\n\t\t\t    potential_national_number = _strip_national_prefi.number,\n\t\t\t    carrierCode = _strip_national_prefi.carrierCode;\n\n\t\t\tif (carrierCode) {\n\t\t\t\tthis.carrierCode = carrierCode;\n\t\t\t}\n\n\t\t\t// We require that the NSN remaining after stripping the national prefix and\n\t\t\t// carrier code be long enough to be a possible length for the region.\n\t\t\t// Otherwise, we don't do the stripping, since the original number could be\n\t\t\t// a valid short number.\n\t\t\tif (!this.metadata.possibleLengths() || this.isPossibleNumber(this.nationalNumber) && !this.isPossibleNumber(potential_national_number)) {\n\t\t\t\t// Verify the parsed national (significant) number for this country\n\t\t\t\t//\n\t\t\t\t// If the original number (before stripping national prefix) was viable,\n\t\t\t\t// and the resultant number is not, then prefer the original phone number.\n\t\t\t\t// This is because for some countries (e.g. Russia) the same digit could be both\n\t\t\t\t// a national prefix and a leading digit of a valid national phone number,\n\t\t\t\t// like `8` is the national prefix for Russia and both\n\t\t\t\t// `8 800 555 35 35` and `800 555 35 35` are valid numbers.\n\t\t\t\tif (matchesEntirely(this.nationalNumber, this.metadata.nationalNumberPattern()) && !matchesEntirely(potential_national_number, this.metadata.nationalNumberPattern())) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.nationalPrefix = this.nationalNumber.slice(0, this.nationalNumber.length - potential_national_number.length);\n\t\t\tthis.nationalNumber = potential_national_number;\n\n\t\t\treturn this.nationalPrefix;\n\t\t}\n\t}, {\n\t\tkey: 'isPossibleNumber',\n\t\tvalue: function isPossibleNumber(number) {\n\t\t\tvar validation_result = checkNumberLengthForType(number, undefined, this.metadata);\n\t\t\tswitch (validation_result) {\n\t\t\t\tcase 'IS_POSSIBLE':\n\t\t\t\t\treturn true;\n\t\t\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\n\t\t\t\t// \treturn !this.isInternational()\n\t\t\t\tdefault:\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'chooseAnotherFormat',\n\t\tvalue: function chooseAnotherFormat() {\n\t\t\t// When there are multiple available formats, the formatter uses the first\n\t\t\t// format where a formatting template could be created.\n\t\t\tfor (var _iterator2 = this.matching_formats, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n\t\t\t\tvar _ref2;\n\n\t\t\t\tif (_isArray2) {\n\t\t\t\t\tif (_i2 >= _iterator2.length) break;\n\t\t\t\t\t_ref2 = _iterator2[_i2++];\n\t\t\t\t} else {\n\t\t\t\t\t_i2 = _iterator2.next();\n\t\t\t\t\tif (_i2.done) break;\n\t\t\t\t\t_ref2 = _i2.value;\n\t\t\t\t}\n\n\t\t\t\tvar format = _ref2;\n\n\t\t\t\t// If this format is currently being used\n\t\t\t\t// and is still possible, then stick to it.\n\t\t\t\tif (this.chosenFormat === format) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// If this `format` is suitable for \"as you type\",\n\t\t\t\t// then extract the template from this format\n\t\t\t\t// and use it to format the phone number being input.\n\n\t\t\t\tif (!this.isFormatApplicable(format)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (!this.createFormattingTemplate(format)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tthis.chosenFormat = format;\n\n\t\t\t\t// With a new formatting template, the matched position\n\t\t\t\t// using the old template needs to be reset.\n\t\t\t\tthis.last_match_position = -1;\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// No format matches the phone number,\n\t\t\t// therefore set `country` to `undefined`\n\t\t\t// (or to the default country).\n\t\t\tthis.resetCountry();\n\n\t\t\t// No format matches the national phone number entered\n\t\t\tthis.resetFormat();\n\t\t}\n\t}, {\n\t\tkey: 'isFormatApplicable',\n\t\tvalue: function isFormatApplicable(format) {\n\t\t\t// If national prefix is mandatory for this phone number format\n\t\t\t// and the user didn't input the national prefix\n\t\t\t// then this phone number format isn't suitable.\n\t\t\tif (!this.isInternational() && !this.nationalPrefix && format.nationalPrefixIsMandatoryWhenFormatting()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t// If this format doesn't use national prefix\n\t\t\t// but the user did input national prefix\n\t\t\t// then this phone number format isn't suitable.\n\t\t\tif (this.nationalPrefix && !format.usesNationalPrefix() && !format.nationalPrefixIsOptionalWhenFormatting()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}, {\n\t\tkey: 'createFormattingTemplate',\n\t\tvalue: function createFormattingTemplate(format) {\n\t\t\t// The formatter doesn't format numbers when numberPattern contains '|', e.g.\n\t\t\t// (20|3)\\d{4}. In those cases we quickly return.\n\t\t\t// (Though there's no such format in current metadata)\n\t\t\t/* istanbul ignore if */\n\t\t\tif (SUPPORT_LEGACY_FORMATTING_PATTERNS && format.pattern().indexOf('|') >= 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Get formatting template for this phone number format\n\t\t\tvar template = this.getTemplateForNumberFormatPattern(format);\n\n\t\t\t// If the national number entered is too long\n\t\t\t// for any phone number format, then abort.\n\t\t\tif (!template) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// This one is for national number only\n\t\t\tthis.partially_populated_template = template;\n\n\t\t\t// For convenience, the public `.template` property\n\t\t\t// contains the whole international number\n\t\t\t// if the phone number being input is international:\n\t\t\t// 'x' for the '+' sign, 'x'es for the country phone code,\n\t\t\t// a spacebar and then the template for the formatted national number.\n\t\t\tif (this.isInternational()) {\n\t\t\t\tthis.template = DIGIT_PLACEHOLDER + repeat(DIGIT_PLACEHOLDER, this.countryCallingCode.length) + ' ' + template;\n\t\t\t}\n\t\t\t// For local numbers, replace national prefix\n\t\t\t// with a digit placeholder.\n\t\t\telse {\n\t\t\t\t\tthis.template = template.replace(/\\d/g, DIGIT_PLACEHOLDER);\n\t\t\t\t}\n\n\t\t\t// This one is for the full phone number\n\t\t\treturn this.template;\n\t\t}\n\n\t\t// Generates formatting template for a phone number format\n\n\t}, {\n\t\tkey: 'getTemplateForNumberFormatPattern',\n\t\tvalue: function getTemplateForNumberFormatPattern(format) {\n\t\t\t// A very smart trick by the guys at Google\n\t\t\tvar number_pattern = format.pattern();\n\n\t\t\t/* istanbul ignore else */\n\t\t\tif (SUPPORT_LEGACY_FORMATTING_PATTERNS) {\n\t\t\t\tnumber_pattern = number_pattern\n\t\t\t\t// Replace anything in the form of [..] with \\d\n\t\t\t\t.replace(CREATE_CHARACTER_CLASS_PATTERN(), '\\\\d')\n\t\t\t\t// Replace any standalone digit (not the one in `{}`) with \\d\n\t\t\t\t.replace(CREATE_STANDALONE_DIGIT_PATTERN(), '\\\\d');\n\t\t\t}\n\n\t\t\t// This match will always succeed,\n\t\t\t// because the \"longest dummy phone number\"\n\t\t\t// has enough length to accomodate any possible\n\t\t\t// national phone number format pattern.\n\t\t\tvar dummy_phone_number_matching_format_pattern = LONGEST_DUMMY_PHONE_NUMBER.match(number_pattern)[0];\n\n\t\t\t// If the national number entered is too long\n\t\t\t// for any phone number format, then abort.\n\t\t\tif (this.nationalNumber.length > dummy_phone_number_matching_format_pattern.length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Prepare the phone number format\n\t\t\tvar number_format = this.getFormatFormat(format);\n\n\t\t\t// Get a formatting template which can be used to efficiently format\n\t\t\t// a partial number where digits are added one by one.\n\n\t\t\t// Below `strict_pattern` is used for the\n\t\t\t// regular expression (with `^` and `$`).\n\t\t\t// This wasn't originally in Google's `libphonenumber`\n\t\t\t// and I guess they don't really need it\n\t\t\t// because they're not using \"templates\" to format phone numbers\n\t\t\t// but I added `strict_pattern` after encountering\n\t\t\t// South Korean phone number formatting bug.\n\t\t\t//\n\t\t\t// Non-strict regular expression bug demonstration:\n\t\t\t//\n\t\t\t// this.nationalNumber : `111111111` (9 digits)\n\t\t\t//\n\t\t\t// number_pattern : (\\d{2})(\\d{3,4})(\\d{4})\n\t\t\t// number_format : `$1 $2 $3`\n\t\t\t// dummy_phone_number_matching_format_pattern : `9999999999` (10 digits)\n\t\t\t//\n\t\t\t// '9999999999'.replace(new RegExp(/(\\d{2})(\\d{3,4})(\\d{4})/g), '$1 $2 $3') = \"99 9999 9999\"\n\t\t\t//\n\t\t\t// template : xx xxxx xxxx\n\t\t\t//\n\t\t\t// But the correct template in this case is `xx xxx xxxx`.\n\t\t\t// The template was generated incorrectly because of the\n\t\t\t// `{3,4}` variability in the `number_pattern`.\n\t\t\t//\n\t\t\t// The fix is, if `this.nationalNumber` has already sufficient length\n\t\t\t// to satisfy the `number_pattern` completely then `this.nationalNumber` is used\n\t\t\t// instead of `dummy_phone_number_matching_format_pattern`.\n\n\t\t\tvar strict_pattern = new RegExp('^' + number_pattern + '$');\n\t\t\tvar national_number_dummy_digits = this.nationalNumber.replace(/\\d/g, DUMMY_DIGIT);\n\n\t\t\t// If `this.nationalNumber` has already sufficient length\n\t\t\t// to satisfy the `number_pattern` completely then use it\n\t\t\t// instead of `dummy_phone_number_matching_format_pattern`.\n\t\t\tif (strict_pattern.test(national_number_dummy_digits)) {\n\t\t\t\tdummy_phone_number_matching_format_pattern = national_number_dummy_digits;\n\t\t\t}\n\n\t\t\t// Generate formatting template for this phone number format\n\t\t\treturn dummy_phone_number_matching_format_pattern\n\t\t\t// Format the dummy phone number according to the format\n\t\t\t.replace(new RegExp(number_pattern), number_format)\n\t\t\t// Replace each dummy digit with a DIGIT_PLACEHOLDER\n\t\t\t.replace(new RegExp(DUMMY_DIGIT, 'g'), DIGIT_PLACEHOLDER);\n\t\t}\n\t}, {\n\t\tkey: 'formatNextNationalNumberDigits',\n\t\tvalue: function formatNextNationalNumberDigits(digits) {\n\t\t\t// Using `.split('')` to iterate through a string here\n\t\t\t// to avoid requiring `Symbol.iterator` polyfill.\n\t\t\t// `.split('')` is generally not safe for Unicode,\n\t\t\t// but in this particular case for `digits` it is safe.\n\t\t\t// for (const digit of digits)\n\t\t\tfor (var _iterator3 = digits.split(''), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n\t\t\t\tvar _ref3;\n\n\t\t\t\tif (_isArray3) {\n\t\t\t\t\tif (_i3 >= _iterator3.length) break;\n\t\t\t\t\t_ref3 = _iterator3[_i3++];\n\t\t\t\t} else {\n\t\t\t\t\t_i3 = _iterator3.next();\n\t\t\t\t\tif (_i3.done) break;\n\t\t\t\t\t_ref3 = _i3.value;\n\t\t\t\t}\n\n\t\t\t\tvar digit = _ref3;\n\n\t\t\t\t// If there is room for more digits in current `template`,\n\t\t\t\t// then set the next digit in the `template`,\n\t\t\t\t// and return the formatted digits so far.\n\n\t\t\t\t// If more digits are entered than the current format could handle\n\t\t\t\tif (this.partially_populated_template.slice(this.last_match_position + 1).search(DIGIT_PLACEHOLDER_MATCHER) === -1) {\n\t\t\t\t\t// Reset the current format,\n\t\t\t\t\t// so that the new format will be chosen\n\t\t\t\t\t// in a subsequent `this.chooseAnotherFormat()` call\n\t\t\t\t\t// later in code.\n\t\t\t\t\tthis.chosenFormat = undefined;\n\t\t\t\t\tthis.template = undefined;\n\t\t\t\t\tthis.partially_populated_template = undefined;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis.last_match_position = this.partially_populated_template.search(DIGIT_PLACEHOLDER_MATCHER);\n\t\t\t\tthis.partially_populated_template = this.partially_populated_template.replace(DIGIT_PLACEHOLDER_MATCHER, digit);\n\t\t\t}\n\n\t\t\t// Return the formatted phone number so far.\n\t\t\treturn cut_stripping_dangling_braces(this.partially_populated_template, this.last_match_position + 1);\n\n\t\t\t// The old way which was good for `input-format` but is not so good\n\t\t\t// for `react-phone-number-input`'s default input (`InputBasic`).\n\t\t\t// return close_dangling_braces(this.partially_populated_template, this.last_match_position + 1)\n\t\t\t// \t.replace(DIGIT_PLACEHOLDER_MATCHER_GLOBAL, ' ')\n\t\t}\n\t}, {\n\t\tkey: 'isInternational',\n\t\tvalue: function isInternational() {\n\t\t\treturn this.parsedInput && this.parsedInput[0] === '+';\n\t\t}\n\t}, {\n\t\tkey: 'getFormatFormat',\n\t\tvalue: function getFormatFormat(format) {\n\t\t\tif (this.isInternational()) {\n\t\t\t\treturn changeInternationalFormatStyle(format.internationalFormat());\n\t\t\t}\n\n\t\t\t// If national prefix formatting rule is set\n\t\t\t// for this phone number format\n\t\t\tif (format.nationalPrefixFormattingRule()) {\n\t\t\t\t// If the user did input the national prefix\n\t\t\t\t// (or if the national prefix formatting rule does not require national prefix)\n\t\t\t\t// then maybe make it part of the phone number template\n\t\t\t\tif (this.nationalPrefix || !format.usesNationalPrefix()) {\n\t\t\t\t\t// Make the national prefix part of the phone number template\n\t\t\t\t\treturn format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule());\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Special handling for NANPA countries for AsYouType formatter.\n\t\t\t// Copied from Google's `libphonenumber`:\n\t\t\t// https://github.com/googlei18n/libphonenumber/blob/66986dbbe443ee8450e2b54dcd44ac384b3bbee8/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L535-L573\n\t\t\telse if (this.countryCallingCode === '1' && this.nationalPrefix === '1') {\n\t\t\t\t\treturn '1 ' + format.format();\n\t\t\t\t}\n\n\t\t\treturn format.format();\n\t\t}\n\n\t\t// Determines the country of the phone number\n\t\t// entered so far based on the country phone code\n\t\t// and the national phone number.\n\n\t}, {\n\t\tkey: 'determineTheCountry',\n\t\tvalue: function determineTheCountry() {\n\t\t\tthis.country = find_country_code(this.countryCallingCode, this.nationalNumber, this.metadata);\n\t\t}\n\n\t\t/**\r\n   * Returns an instance of `PhoneNumber` class.\r\n   * Will return `undefined` if no national (significant) number\r\n   * digits have been entered so far, or if no `defaultCountry` has been\r\n   * set and the user enters a phone number not in international format.\r\n   */\n\n\t}, {\n\t\tkey: 'getNumber',\n\t\tvalue: function getNumber() {\n\t\t\tif (!this.countryCallingCode || !this.nationalNumber) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tvar phoneNumber = new PhoneNumber(this.country || this.countryCallingCode, this.nationalNumber, this.metadata.metadata);\n\t\t\tif (this.carrierCode) {\n\t\t\t\tphoneNumber.carrierCode = this.carrierCode;\n\t\t\t}\n\t\t\t// Phone number extensions are not supported by \"As You Type\" formatter.\n\t\t\treturn phoneNumber;\n\t\t}\n\n\t\t// This method is still used in `react-phone-number-input/source/input-control.js`.\n\n\t}, {\n\t\tkey: 'getNationalNumber',\n\t\tvalue: function getNationalNumber() {\n\t\t\treturn this.nationalNumber;\n\t\t}\n\t}, {\n\t\tkey: 'getTemplate',\n\t\tvalue: function getTemplate() {\n\t\t\tif (!this.template) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar index = -1;\n\n\t\t\tvar i = 0;\n\t\t\twhile (i < this.parsedInput.length) {\n\t\t\t\tindex = this.template.indexOf(DIGIT_PLACEHOLDER, index + 1);\n\t\t\t\ti++;\n\t\t\t}\n\n\t\t\treturn cut_stripping_dangling_braces(this.template, index + 1);\n\t\t}\n\t}]);\n\n\treturn AsYouType;\n}();\n\nexport default AsYouType;\n\n\nexport function strip_dangling_braces(string) {\n\tvar dangling_braces = [];\n\tvar i = 0;\n\twhile (i < string.length) {\n\t\tif (string[i] === '(') {\n\t\t\tdangling_braces.push(i);\n\t\t} else if (string[i] === ')') {\n\t\t\tdangling_braces.pop();\n\t\t}\n\t\ti++;\n\t}\n\n\tvar start = 0;\n\tvar cleared_string = '';\n\tdangling_braces.push(string.length);\n\tfor (var _iterator4 = dangling_braces, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {\n\t\tvar _ref4;\n\n\t\tif (_isArray4) {\n\t\t\tif (_i4 >= _iterator4.length) break;\n\t\t\t_ref4 = _iterator4[_i4++];\n\t\t} else {\n\t\t\t_i4 = _iterator4.next();\n\t\t\tif (_i4.done) break;\n\t\t\t_ref4 = _i4.value;\n\t\t}\n\n\t\tvar index = _ref4;\n\n\t\tcleared_string += string.slice(start, index);\n\t\tstart = index + 1;\n\t}\n\n\treturn cleared_string;\n}\n\nexport function cut_stripping_dangling_braces(string, cut_before_index) {\n\tif (string[cut_before_index] === ')') {\n\t\tcut_before_index++;\n\t}\n\treturn strip_dangling_braces(string.slice(0, cut_before_index));\n}\n\nexport function close_dangling_braces(template, cut_before) {\n\tvar retained_template = template.slice(0, cut_before);\n\n\tvar opening_braces = count_occurences('(', retained_template);\n\tvar closing_braces = count_occurences(')', retained_template);\n\n\tvar dangling_braces = opening_braces - closing_braces;\n\twhile (dangling_braces > 0 && cut_before < template.length) {\n\t\tif (template[cut_before] === ')') {\n\t\t\tdangling_braces--;\n\t\t}\n\t\tcut_before++;\n\t}\n\n\treturn template.slice(0, cut_before);\n}\n\n// Counts all occurences of a symbol in a string.\n// Unicode-unsafe (because using `.split()`).\nexport function count_occurences(symbol, string) {\n\tvar count = 0;\n\n\t// Using `.split('')` to iterate through a string here\n\t// to avoid requiring `Symbol.iterator` polyfill.\n\t// `.split('')` is generally not safe for Unicode,\n\t// but in this particular case for counting brackets it is safe.\n\t// for (const character of string)\n\tfor (var _iterator5 = string.split(''), _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {\n\t\tvar _ref5;\n\n\t\tif (_isArray5) {\n\t\t\tif (_i5 >= _iterator5.length) break;\n\t\t\t_ref5 = _iterator5[_i5++];\n\t\t} else {\n\t\t\t_i5 = _iterator5.next();\n\t\t\tif (_i5.done) break;\n\t\t\t_ref5 = _i5.value;\n\t\t}\n\n\t\tvar character = _ref5;\n\n\t\tif (character === symbol) {\n\t\t\tcount++;\n\t\t}\n\t}\n\n\treturn count;\n}\n\n// Repeats a string (or a symbol) N times.\n// http://stackoverflow.com/questions/202605/repeat-string-javascript\nexport function repeat(string, times) {\n\tif (times < 1) {\n\t\treturn '';\n\t}\n\n\tvar result = '';\n\n\twhile (times > 1) {\n\t\tif (times & 1) {\n\t\t\tresult += string;\n\t\t}\n\n\t\ttimes >>= 1;\n\t\tstring += string;\n\t}\n\n\treturn result + string;\n}\n//# sourceMappingURL=AsYouType.js.map","import Metadata from './metadata';\n\nexport default function getCountries(metadata) {\n\treturn new Metadata(metadata).getCountries();\n}\n//# sourceMappingURL=getCountries.js.map","import { getCountryCallingCode } from 'libphonenumber-js/core';\nexport function getInputValuePrefix(country, international, metadata) {\n  return country && international ? \"+\".concat(getCountryCallingCode(country, metadata)) : '';\n}\nexport function removeInputValuePrefix(value, prefix) {\n  if (prefix) {\n    value = value.slice(prefix.length);\n\n    if (value[0] === ' ') {\n      value = value.slice(1);\n    }\n  }\n\n  return value;\n}\n//# sourceMappingURL=inputValuePrefix.js.map","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport Input from 'input-format/react';\nimport { AsYouType, parsePhoneNumberCharacter } from 'libphonenumber-js/core';\nimport { getInputValuePrefix, removeInputValuePrefix } from './inputValuePrefix';\n/**\n * This input uses `input-format` library\n * for \"smart\" caret positioning.\n */\n\nexport function createInput(defaultMetadata) {\n  function InputSmart(_ref, ref) {\n    var country = _ref.country,\n        international = _ref.international,\n        metadata = _ref.metadata,\n        rest = _objectWithoutProperties(_ref, [\"country\", \"international\", \"metadata\"]);\n\n    var format = useCallback(function (value) {\n      // \"As you type\" formatter.\n      var formatter = new AsYouType(country, metadata);\n      var prefix = getInputValuePrefix(country, international, metadata); // Format the number.\n\n      var text = formatter.input(prefix + value);\n      var template = formatter.getTemplate();\n\n      if (prefix) {\n        text = removeInputValuePrefix(text, prefix); // `AsYouType.getTemplate()` can be `undefined`.\n\n        if (template) {\n          template = removeInputValuePrefix(template, prefix);\n        }\n      }\n\n      return {\n        text: text,\n        template: template\n      };\n    }, [country, metadata]);\n    return React.createElement(Input, _extends({}, rest, {\n      ref: ref,\n      parse: parsePhoneNumberCharacter,\n      format: format\n    }));\n  }\n\n  InputSmart = React.forwardRef(InputSmart);\n  InputSmart.propTypes = {\n    /**\n     * A two-letter country code for formatting `value`\n     * as a national phone number (e.g. `(800) 555 35 35`).\n     * E.g. \"US\", \"RU\", etc.\n     * If no `country` is passed then `value`\n     * is formatted as an international phone number.\n     * (e.g. `+7 800 555 35 35`)\n     * Perhaps the `country` property should have been called `defaultCountry`\n     * because if `value` is an international number then `country` is ignored.\n     */\n    country: PropTypes.string,\n\n    /**\n     * If `country` property is passed along with `international={true}` property\n     * then the phone number will be input in \"international\" format for that `country`\n     * (without \"country calling code\").\n     * For example, if `country=\"US\"` property is passed to \"without country select\" input\n     * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\n     * But if both `country=\"US\"` and `international={true}` properties are passed then\n     * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\n     * (without \"country calling code\" `+1`).\n     */\n    international: PropTypes.bool,\n\n    /**\n     * `libphonenumber-js` metadata.\n     */\n    metadata: PropTypes.object.isRequired\n  };\n  InputSmart.defaultProps = {\n    metadata: defaultMetadata\n  };\n  return InputSmart;\n}\nexport default createInput();\n//# sourceMappingURL=InputSmart.js.map","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { parseIncompletePhoneNumber, formatIncompletePhoneNumber } from 'libphonenumber-js/core';\nimport { getInputValuePrefix, removeInputValuePrefix } from './inputValuePrefix';\nexport function createInput(defaultMetadata) {\n  /**\n   * `InputBasic`'s caret is not as \"smart\" as the default `inputComponent`'s\n   * but still works good enough. When erasing or inserting digits in the middle\n   * of a phone number the caret usually jumps to the end: this is the expected\n   * behaviour and it's the workaround for the [Samsung Galaxy smart caret positioning bug](https://github.com/catamphetamine/react-phone-number-input/issues/75).\n   */\n  function InputBasic(_ref, ref) {\n    var value = _ref.value,\n        onChange = _ref.onChange,\n        country = _ref.country,\n        international = _ref.international,\n        metadata = _ref.metadata,\n        Input = _ref.inputComponent,\n        rest = _objectWithoutProperties(_ref, [\"value\", \"onChange\", \"country\", \"international\", \"metadata\", \"inputComponent\"]);\n\n    var prefix = getInputValuePrefix(country, international, metadata);\n\n    var _onChange = useCallback(function (event) {\n      var newValue = parseIncompletePhoneNumber(event.target.value); // By default, if a value is something like `\"(123)\"`\n      // then Backspace would only erase the rightmost brace\n      // becoming something like `\"(123\"`\n      // which would give the same `\"123\"` value\n      // which would then be formatted back to `\"(123)\"`\n      // and so a user wouldn't be able to erase the phone number.\n      // Working around this issue with this simple hack.\n\n      if (newValue === value) {\n        var newValueFormatted = format(prefix, newValue, country, metadata);\n\n        if (newValueFormatted.indexOf(event.target.value) === 0) {\n          // Trim the last digit (or plus sign).\n          newValue = newValue.slice(0, -1);\n        }\n      }\n\n      onChange(newValue);\n    }, [prefix, value, onChange, country, metadata]);\n\n    return React.createElement(Input, _extends({}, rest, {\n      ref: ref,\n      value: format(prefix, value, country, metadata),\n      onChange: _onChange\n    }));\n  }\n\n  InputBasic = React.forwardRef(InputBasic);\n  InputBasic.propTypes = {\n    /**\n     * The parsed phone number.\n     * \"Parsed\" not in a sense of \"E.164\"\n     * but rather in a sense of \"having only\n     * digits and possibly a leading plus character\".\n     * Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\n     */\n    value: PropTypes.string.isRequired,\n\n    /**\n     * Updates the `value`.\n     */\n    onChange: PropTypes.func.isRequired,\n\n    /**\n     * A two-letter country code for formatting `value`\n     * as a national phone number (e.g. `(800) 555 35 35`).\n     * E.g. \"US\", \"RU\", etc.\n     * If no `country` is passed then `value`\n     * is formatted as an international phone number.\n     * (e.g. `+7 800 555 35 35`)\n     * Perhaps the `country` property should have been called `defaultCountry`\n     * because if `value` is an international number then `country` is ignored.\n     */\n    country: PropTypes.string,\n\n    /**\n     * If `country` property is passed along with `international={true}` property\n     * then the phone number will be input in \"international\" format for that `country`\n     * (without \"country calling code\").\n     * For example, if `country=\"US\"` property is passed to \"without country select\" input\n     * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\n     * But if both `country=\"US\"` and `international={true}` properties are passed then\n     * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\n     * (without \"country calling code\" `+1`).\n     */\n    international: PropTypes.bool,\n\n    /**\n     * `libphonenumber-js` metadata.\n     */\n    metadata: PropTypes.object.isRequired,\n\n    /**\n     * The `<input/>` component.\n     */\n    inputComponent: PropTypes.elementType.isRequired\n  };\n  InputBasic.defaultProps = {\n    metadata: defaultMetadata,\n    inputComponent: 'input'\n  };\n  return InputBasic;\n}\nexport default createInput();\n\nfunction format(prefix, value, country, metadata) {\n  return removeInputValuePrefix(formatIncompletePhoneNumber(prefix + value, country, metadata), prefix);\n}\n//# sourceMappingURL=InputBasic.js.map","import AsYouType from './AsYouType';\n\n/**\r\n * Formats a (possibly incomplete) phone number.\r\n * The phone number can be either in E.164 format\r\n * or in a form of national number digits.\r\n * @param {string} value - A possibly incomplete phone number. Either in E.164 format or in a form of national number digits.\r\n * @param {string?} country - Two-letter (\"ISO 3166-1 alpha-2\") country code.\r\n * @return {string} Formatted (possibly incomplete) phone number.\r\n */\nexport default function formatIncompletePhoneNumber(value, country, metadata) {\n  if (!metadata) {\n    metadata = country;\n    country = undefined;\n  }\n  return new AsYouType(country, metadata).input(value);\n}\n//# sourceMappingURL=formatIncompletePhoneNumber.js.map","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames'; // Default country flag icon.\n// `<img/>` is wrapped in a `<div/>` to prevent SVGs from exploding in size in IE 11.\n// https://github.com/catamphetamine/react-phone-number-input/issues/111\n\nexport default function FlagComponent(_ref) {\n  var country = _ref.country,\n      countryName = _ref.countryName,\n      flags = _ref.flags,\n      flagUrl = _ref.flagUrl,\n      rest = _objectWithoutProperties(_ref, [\"country\", \"countryName\", \"flags\", \"flagUrl\"]);\n\n  if (flags && flags[country]) {\n    return flags[country]({\n      title: countryName\n    });\n  }\n\n  return React.createElement(\"img\", _extends({}, rest, {\n    alt: countryName,\n    src: flagUrl.replace('{XX}', country).replace('{xx}', country.toLowerCase())\n  }));\n}\nFlagComponent.propTypes = {\n  // The country to be selected by default.\n  // Two-letter country code (\"ISO 3166-1 alpha-2\").\n  country: PropTypes.string.isRequired,\n  // Will be HTML `title` attribute of the `<img/>`.\n  countryName: PropTypes.string.isRequired,\n  // Country flag icon components.\n  // By default flag icons are inserted as `<img/>`s\n  // with their `src` pointed to `country-flag-icons` github pages website.\n  // There might be cases (e.g. an offline application)\n  // where having a large (3 megabyte) `<svg/>` flags\n  // bundle is more appropriate.\n  // `import flags from 'react-phone-number-input/flags'`.\n  flags: PropTypes.objectOf(PropTypes.elementType),\n  // A URL for a country flag icon.\n  // By default it points to `country-flag-icons` github pages website.\n  flagUrl: PropTypes.string.isRequired\n};\n//# sourceMappingURL=Flag.js.map","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nexport default function InternationalIcon(_ref) {\n  var aspectRatio = _ref.aspectRatio,\n      rest = _objectWithoutProperties(_ref, [\"aspectRatio\"]);\n\n  if (aspectRatio === 1) {\n    return React.createElement(InternationalIcon1x1, rest);\n  } else {\n    return React.createElement(InternationalIcon3x2, rest);\n  }\n}\nInternationalIcon.propTypes = {\n  title: PropTypes.string.isRequired,\n  aspectRatio: PropTypes.number\n}; // 3x2.\n// Using `<title/>` in `<svg/>`s:\n// https://developer.mozilla.org/en-US/docs/Web/SVG/Element/title\n\nfunction InternationalIcon3x2(_ref2) {\n  var title = _ref2.title,\n      rest = _objectWithoutProperties(_ref2, [\"title\"]);\n\n  return React.createElement(\"svg\", _extends({}, rest, {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 75 50\"\n  }), React.createElement(\"title\", null, title), React.createElement(\"g\", {\n    className: \"PhoneInputInternationalIconGlobe\",\n    stroke: \"currentColor\",\n    fill: \"none\",\n    strokeWidth: \"2\",\n    strokeMiterlimit: \"10\"\n  }, React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    d: \"M47.2,36.1C48.1,36,49,36,50,36c7.4,0,14,1.7,18.5,4.3\"\n  }), React.createElement(\"path\", {\n    d: \"M68.6,9.6C64.2,12.3,57.5,14,50,14c-7.4,0-14-1.7-18.5-4.3\"\n  }), React.createElement(\"line\", {\n    x1: \"26\",\n    y1: \"25\",\n    x2: \"74\",\n    y2: \"25\"\n  }), React.createElement(\"line\", {\n    x1: \"50\",\n    y1: \"1\",\n    x2: \"50\",\n    y2: \"49\"\n  }), React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    d: \"M46.3,48.7c1.2,0.2,2.5,0.3,3.7,0.3c13.3,0,24-10.7,24-24S63.3,1,50,1S26,11.7,26,25c0,2,0.3,3.9,0.7,5.8\"\n  }), React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    d: \"M46.8,48.2c1,0.6,2.1,0.8,3.2,0.8c6.6,0,12-10.7,12-24S56.6,1,50,1S38,11.7,38,25c0,1.4,0.1,2.7,0.2,4c0,0.1,0,0.2,0,0.2\"\n  })), React.createElement(\"path\", {\n    className: \"PhoneInputInternationalIconPhone\",\n    stroke: \"none\",\n    fill: \"currentColor\",\n    d: \"M12.4,17.9c2.9-2.9,5.4-4.8,0.3-11.2S4.1,5.2,1.3,8.1C-2,11.4,1.1,23.5,13.1,35.6s24.3,15.2,27.5,11.9c2.8-2.8,7.8-6.3,1.4-11.5s-8.3-2.6-11.2,0.3c-2,2-7.2-2.2-11.7-6.7S10.4,19.9,12.4,17.9z\"\n  }));\n}\n\nInternationalIcon3x2.propTypes = {\n  title: PropTypes.string.isRequired\n}; // 1x1.\n// Using `<title/>` in `<svg/>`s:\n// https://developer.mozilla.org/en-US/docs/Web/SVG/Element/title\n\nfunction InternationalIcon1x1(_ref3) {\n  var title = _ref3.title,\n      rest = _objectWithoutProperties(_ref3, [\"title\"]);\n\n  return React.createElement(\"svg\", _extends({}, rest, {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 50 50\"\n  }), React.createElement(\"title\", null, title), React.createElement(\"g\", {\n    className: \"PhoneInputInternationalIconGlobe\",\n    stroke: \"currentColor\",\n    fill: \"none\",\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\"\n  }, React.createElement(\"path\", {\n    d: \"M8.45,13A21.44,21.44,0,1,1,37.08,41.56\"\n  }), React.createElement(\"path\", {\n    d: \"M19.36,35.47a36.9,36.9,0,0,1-2.28-13.24C17.08,10.39,21.88.85,27.8.85s10.72,9.54,10.72,21.38c0,6.48-1.44,12.28-3.71,16.21\"\n  }), React.createElement(\"path\", {\n    d: \"M17.41,33.4A39,39,0,0,1,27.8,32.06c6.62,0,12.55,1.5,16.48,3.86\"\n  }), React.createElement(\"path\", {\n    d: \"M44.29,8.53c-3.93,2.37-9.86,3.88-16.49,3.88S15.25,10.9,11.31,8.54\"\n  }), React.createElement(\"line\", {\n    x1: \"27.8\",\n    y1: \"0.85\",\n    x2: \"27.8\",\n    y2: \"34.61\"\n  }), React.createElement(\"line\", {\n    x1: \"15.2\",\n    y1: \"22.23\",\n    x2: \"49.15\",\n    y2: \"22.23\"\n  })), React.createElement(\"path\", {\n    className: \"PhoneInputInternationalIconPhone\",\n    stroke: \"transparent\",\n    fill: \"currentColor\",\n    d: \"M9.42,26.64c2.22-2.22,4.15-3.59.22-8.49S3.08,17,.93,19.17c-2.49,2.48-.13,11.74,9,20.89s18.41,11.5,20.89,9c2.15-2.15,5.91-4.77,1-8.71s-6.27-2-8.49.22c-1.55,1.55-5.48-1.69-8.86-5.08S7.87,28.19,9.42,26.64Z\"\n  }));\n}\n\nInternationalIcon1x1.propTypes = {\n  title: PropTypes.string.isRequired\n};\n//# sourceMappingURL=InternationalIcon.js.map","import { isSupportedCountry } from 'libphonenumber-js/core';\nexport { getCountries } from 'libphonenumber-js/core';\n/**\n * Sorts country `<select/>` options.\n * Can move some country `<select/>` options\n * to the top of the list, for example.\n * @param  {object[]} countryOptions — Country `<select/>` options.\n * @param  {string[]} [countryOptionsOrder] — Country `<select/>` options order. Example: `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`.\n * @return {object[]}\n */\n\nexport function sortCountryOptions(options, order) {\n  if (!order) {\n    return options;\n  }\n\n  var optionsOnTop = [];\n  var optionsOnBottom = [];\n  var appendTo = optionsOnTop;\n\n  var _loop = function _loop() {\n    if (_isArray) {\n      if (_i >= _iterator.length) return \"break\";\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) return \"break\";\n      _ref = _i.value;\n    }\n\n    var element = _ref;\n\n    if (element === '|') {\n      appendTo.push({\n        divider: true\n      });\n    } else if (element === '...' || element === '…') {\n      appendTo = optionsOnBottom;\n    } else {\n      // Find the position of the option.\n      var index = options.indexOf(options.filter(function (option) {\n        return option.value === element;\n      })[0]); // Get the option.\n\n      var option = options[index]; // Remove the option from its default position.\n\n      options.splice(index, 1); // Add the option on top.\n\n      appendTo.push(option);\n    }\n  };\n\n  for (var _iterator = order, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    var _ret = _loop();\n\n    if (_ret === \"break\") break;\n  }\n\n  return optionsOnTop.concat(options).concat(optionsOnBottom);\n}\nexport function getSupportedCountryOptions(countryOptions, metadata) {\n  if (countryOptions) {\n    countryOptions = countryOptions.filter(function (option) {\n      switch (option) {\n        case '|':\n        case '...':\n        case '…':\n          return true;\n\n        default:\n          return isCountrySupportedWithError(option, metadata);\n      }\n    });\n\n    if (countryOptions.length > 0) {\n      return countryOptions;\n    }\n  }\n}\nexport function isCountrySupportedWithError(country, metadata) {\n  if (isSupportedCountry(country, metadata)) {\n    return true;\n  } else {\n    console.error(\"Country not found: \".concat(country));\n    return false;\n  }\n}\nexport function getSupportedCountries(countries, metadata) {\n  if (countries) {\n    countries = countries.filter(function (country) {\n      return isCountrySupportedWithError(country, metadata);\n    });\n\n    if (countries.length === 0) {\n      countries = undefined;\n    }\n  }\n\n  return countries;\n}\n//# sourceMappingURL=countries.js.map","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport DefaultInternationalIcon from './InternationalIcon';\nimport Flag from './Flag';\nexport function createCountryIconComponent(_ref) {\n  var flags = _ref.flags,\n      flagUrl = _ref.flagUrl,\n      FlagComponent = _ref.flagComponent,\n      InternationalIcon = _ref.internationalIcon;\n\n  function CountryIcon(_ref2) {\n    var country = _ref2.country,\n        label = _ref2.label,\n        aspectRatio = _ref2.aspectRatio;\n\n    // `aspectRatio` is currently a hack for the default \"International\" icon\n    // to render it as a square when Unicode flag icons are used.\n    // So `aspectRatio` property is only used with the default \"International\" icon.\n    var _aspectRatio = InternationalIcon === DefaultInternationalIcon ? aspectRatio : undefined;\n\n    return React.createElement(\"div\", {\n      className: classNames('PhoneInputCountryIcon', {\n        'PhoneInputCountryIcon--square': _aspectRatio === 1,\n        'PhoneInputCountryIcon--border': country\n      })\n    }, country ? React.createElement(FlagComponent, {\n      country: country,\n      countryName: label,\n      flags: flags,\n      flagUrl: flagUrl,\n      className: \"PhoneInputCountryIconImg\"\n    }) : React.createElement(InternationalIcon, {\n      title: label,\n      aspectRatio: _aspectRatio,\n      className: \"PhoneInputCountryIconImg\"\n    }));\n  }\n\n  CountryIcon.propTypes = {\n    country: PropTypes.string,\n    label: PropTypes.string.isRequired,\n    aspectRatio: PropTypes.number\n  };\n  return CountryIcon;\n}\nexport default createCountryIconComponent({\n  // Must be equal to `defaultProps.flagUrl` in `./PhoneInputWithCountry.js`.\n  flagUrl: 'https://catamphetamine.github.io/country-flag-icons/3x2/{XX}.svg',\n  flagComponent: Flag,\n  internationalIcon: DefaultInternationalIcon\n});\n//# sourceMappingURL=CountryIcon.js.map","import PropTypes from 'prop-types';\nexport var metadata = PropTypes.shape({\n  country_calling_codes: PropTypes.object.isRequired,\n  countries: PropTypes.object.isRequired\n});\nexport var labels = PropTypes.objectOf(PropTypes.string);\n//# sourceMappingURL=PropTypes.js.map","import { parsePhoneNumberFromString, getCountryCallingCode, AsYouType, Metadata } from 'libphonenumber-js/core';\n/**\n * Decides which country should be pre-selected\n * when the phone number input component is first mounted.\n * @param  {object?} phoneNumber - An instance of `PhoneNumber` class.\n * @param  {string?} country - Pre-defined country (two-letter code).\n * @param  {string[]?} countries - A list of countries available.\n * @param  {boolean} includeInternationalOption - Whether \"International\" country option is available.\n * @param  {object} metadata - `libphonenumber-js` metadata\n * @return {string?}\n */\n\nexport function getPreSelectedCountry(phoneNumber, country, countries, includeInternationalOption, metadata) {\n  // If can get country from E.164 phone number\n  // then it overrides the `country` passed (or not passed).\n  if (phoneNumber && phoneNumber.country) {\n    // `country` will be left `undefined` in case of non-detection.\n    country = phoneNumber.country;\n  } // Only pre-select a country if it's in the available `countries` list.\n\n\n  if (countries && countries.indexOf(country) < 0) {\n    country = undefined;\n  } // If there will be no \"International\" option\n  // then some `country` must be selected.\n  // It will still be the wrong country though.\n  // But still country `<select/>` can't be left in a broken state.\n\n\n  if (!country && !includeInternationalOption && countries && countries.length > 0) {\n    country = countries[0];\n  }\n\n  return country;\n}\n/**\n * Generates a sorted list of country `<select/>` options.\n * @param  {string[]} countries - A list of two-letter (\"ISO 3166-1 alpha-2\") country codes.\n * @param  {object} labels - Custom country labels. E.g. `{ RU: 'Россия', US: 'США', ... }`.\n * @param  {boolean} includeInternationalOption - Whether should include \"International\" option at the top of the list.\n * @return {object[]} A list of objects having shape `{ value : string, label : string }`.\n */\n\nexport function getCountrySelectOptions(countries, country_names, includeInternationalOption) {\n  // Generates a `<Select/>` option for each country.\n  var country_select_options = countries.map(function (country) {\n    return {\n      value: country,\n      label: country_names[country]\n    };\n  }); // Sort the list of countries alphabetically.\n\n  country_select_options.sort(function (a, b) {\n    return compare_strings(a.label, b.label);\n  }); // Add the \"International\" option to the country list (if suitable)\n\n  if (includeInternationalOption) {\n    country_select_options.unshift({\n      label: country_names.ZZ\n    });\n  }\n\n  return country_select_options;\n}\n/**\n * Parses a E.164 phone number to an instance of `PhoneNumber` class.\n * @param {string?} value = E.164 phone number.\n * @param  {object} metadata - `libphonenumber-js` metadata\n * @example\n * parsePhoneNumber('+78005553535')\n */\n\nexport function parsePhoneNumber(value, metadata) {\n  return parsePhoneNumberFromString(value || '', metadata);\n}\n/**\n * Generates national number digits for a parsed phone.\n * May prepend national prefix.\n * The phone number must be a complete and valid phone number.\n * @param  {object} phoneNumber - An instance of `PhoneNumber` class.\n * @param  {object} metadata - `libphonenumber-js` metadata\n * @return {string}\n * @example\n * getNationalNumberDigits({ country: 'RU', phone: '8005553535' })\n * // returns '88005553535'\n */\n\nexport function generateNationalNumberDigits(phoneNumber) {\n  return phoneNumber.formatNational().replace(/\\D/g, '');\n}\n/**\n * Migrates parsed `<input/>` `value` for the newly selected `country`.\n * @param {string?} value - The `value` parsed from phone number `<input/>` (it's the `parsed_input` state property, not the `value` property).\n * @param {string?} previousCountry - Previously selected country.\n * @param {string?} newCountry - Newly selected country. Can't be same as previously selected country.\n * @param {object} metadata - `libphonenumber-js` metadata.\n * @param {boolean} preferNationalFormat - whether should attempt to convert from international to national number for the new country.\n * @return {string?}\n */\n\nexport function migrateParsedInputForNewCountry(value, previous_country, new_country, metadata, preferNationalFormat) {\n  // If `parsed_input` is empty\n  // then no need to migrate anything.\n  if (!value) {\n    return value;\n  } // If switching to some country.\n  // (from \"International\" or another country)\n  // If switching from \"International\" then `value` starts with a `+`.\n  // Otherwise it may or may not start with a `+`.\n\n\n  if (new_country) {\n    // If the phone number was entered in international format\n    // then migrate it to the newly selected country.\n    // The phone number may be incomplete.\n    // The phone number entered not necessarily starts with\n    // the previously selected country phone prefix.\n    if (value[0] === '+') {\n      // If the international phone number is for the new country\n      // then convert it to local if required.\n      if (preferNationalFormat) {\n        // // If a phone number is being input in international form\n        // // and the country can already be derived from it,\n        // // and if it is the new country, then format as a national number.\n        // const derived_country = get_country_from_possibly_incomplete_international_phone_number(value, metadata)\n        // if (derived_country === new_country)\n        // {\n        // \treturn strip_country_calling_code(value, derived_country, metadata)\n        // }\n        // Actually, the two countries don't necessarily need to match:\n        // the condition could be looser here, because several countries\n        // might share the same international phone number format\n        // (for example, \"NANPA\" countries like US, Canada, etc).\n        // The looser condition would be just \"same nternational phone number format\"\n        // which would mean \"same country calling code\" in the context of `libphonenumber-js`.\n        if (value.indexOf('+' + getCountryCallingCode(new_country, metadata)) === 0) {\n          return strip_country_calling_code(value, new_country, metadata);\n        } // Simply discard the previously entered international phone number,\n        // because otherwise any \"smart\" transformation like getting the\n        // \"national (significant) number\" part and then prepending the\n        // newly selected country's \"country calling code\" to it\n        // would just be confusing for a user without being actually useful.\n\n\n        return ''; // // Simply strip the leading `+` character\n        // // therefore simply converting all digits into a \"local\" phone number.\n        // // https://github.com/catamphetamine/react-phone-number-input/issues/287\n        // return value.slice(1)\n      } // If the international phone number already contains\n      // any country calling code then trim the country calling code part.\n      // (that could also be the newly selected country phone code prefix as well)\n      // `value` doesn't neccessarily belong to `previous_country`.\n      // (e.g. if a user enters an international number\n      //  not belonging to any of the reduced `countries` list).\n\n\n      value = strip_country_calling_code(value, previous_country, metadata); // Prepend country calling code prefix\n      // for the newly selected country.\n\n      return e164(value, new_country, metadata) || \"+\".concat(getCountryCallingCode(new_country, metadata));\n    }\n  } // If switching to \"International\" from a country.\n  else {\n      // If the phone number was entered in national format.\n      if (value[0] !== '+') {\n        // Format the national phone number as an international one.\n        // The phone number entered not necessarily even starts with\n        // the previously selected country phone prefix.\n        // Even if the phone number belongs to whole another country\n        // it will still be parsed into some national phone number.\n        return e164(value, previous_country, metadata) || '';\n      }\n    }\n\n  return value;\n}\n/**\n * Converts phone number digits to a (possibly incomplete) E.164 phone number.\n * @param  {string?} number - A possibly incomplete phone number digits string. Can be a possibly incomplete E.164 phone number.\n * @param  {string?} country\n * @param  {[object} metadata - `libphonenumber-js` metadata.\n * @return {string?}\n */\n\nexport function e164(number, country, metadata) {\n  if (!number) {\n    return;\n  } // If the phone number is being input in international format.\n\n\n  if (number[0] === '+') {\n    // If it's just the `+` sign then return nothing.\n    if (number === '+') {\n      return;\n    } // If there are any digits then the `value` is returned as is.\n\n\n    return number;\n  } // For non-international phone numbers\n  // an accompanying country code is required.\n\n\n  if (!country) {\n    return;\n  }\n\n  var partial_national_significant_number = getNationalSignificantNumberDigits(number, country, metadata);\n\n  if (partial_national_significant_number) {\n    return \"+\".concat(getCountryCallingCode(country, metadata)).concat(partial_national_significant_number);\n  }\n}\n/**\n * Trims phone number digits if they exceed the maximum possible length\n * for a national (significant) number for the country.\n * @param  {string} number - A possibly incomplete phone number digits string. Can be a possibly incomplete E.164 phone number.\n * @param  {string} country\n * @param  {object} metadata - `libphonenumber-js` metadata.\n * @return {string} Can be empty.\n */\n\nexport function trimNumber(number, country, metadata) {\n  var nationalSignificantNumberPart = getNationalSignificantNumberDigits(number, country, metadata);\n\n  if (nationalSignificantNumberPart) {\n    var overflowDigitsCount = nationalSignificantNumberPart.length - getMaxNumberLength(country, metadata);\n\n    if (overflowDigitsCount > 0) {\n      return number.slice(0, number.length - overflowDigitsCount);\n    }\n  }\n\n  return number;\n}\n\nfunction getMaxNumberLength(country, metadata) {\n  // Get \"possible lengths\" for a phone number of the country.\n  metadata = new Metadata(metadata);\n  metadata.country(country); // Return the last \"possible length\".\n\n  return metadata.possibleLengths()[metadata.possibleLengths().length - 1];\n} // If the phone number being input is an international one\n// then tries to derive the country from the phone number.\n// (regardless of whether there's any country currently selected)\n\n/**\n * @param {string} parsedInput - A possibly incomplete E.164 phone number.\n * @param {string?} country - Currently selected country.\n * @param {string[]?} countries - A list of available countries. If not passed then \"all countries\" are assumed.\n * @param {boolean} includeInternationalOption - Whether \"International\" country option is available.\n * @param  {object} metadata - `libphonenumber-js` metadata.\n * @return {string?}\n */\n\n\nexport function getCountryForPartialE164Number(partialE164Number, country, countries, includeInternationalOption, metadata) {\n  if (partialE164Number === '+') {\n    // Don't change the currently selected country yet.\n    return country;\n  }\n\n  var derived_country = get_country_from_possibly_incomplete_international_phone_number(partialE164Number, metadata); // If a phone number is being input in international form\n  // and the country can already be derived from it,\n  // then select that country.\n\n  if (derived_country && (!countries || countries.indexOf(derived_country) >= 0)) {\n    return derived_country;\n  } // If \"International\" country option has not been disabled\n  // and the international phone number entered doesn't correspond\n  // to the currently selected country then reset the currently selected country.\n  else if (country && includeInternationalOption && !could_number_belong_to_country(partialE164Number, country, metadata)) {\n      return undefined;\n    } // Don't change the currently selected country.\n\n\n  return country;\n}\n/**\n * Parses `<input/>` value. Derives `country` from `input`. Derives an E.164 `value`.\n * @param  {string?} input — Parsed `<input/>` value. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\n * @param  {string?} prevInput — Previous parsed `<input/>` value. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\n * @param  {string?} country - Currently selected country.\n * @param  {string[]?} countries - A list of available countries. If not passed then \"all countries\" are assumed.\n * @param  {boolean} includeInternationalOption - Whether \"International\" country option is available.\n * @param  {boolean} limitMaxLength — Whether to enable limiting phone number max length.\n * @param  {object} metadata - `libphonenumber-js` metadata.\n * @return {object} An object of shape `{ input, country, value }`.\n */\n\nexport function parseInput(input, prevInput, country, defaultCountry, countries, includeInternationalOption, limitMaxLength, metadata) {\n  // Trim the input to not exceed the maximum possible number length.\n  if (input && country && limitMaxLength) {\n    input = trimNumber(input, country, metadata);\n  } // If this `onChange()` event was triggered\n  // as a result of selecting \"International\" country\n  // then force-prepend a `+` sign if the phone number\n  // `<input/>` value isn't in international format.\n\n\n  if (input && !country && input[0] !== '+') {\n    input = '+' + input;\n  } // If the previously entered phone number\n  // has been entered in international format\n  // and the user decides to erase it,\n  // then also reset the `country`\n  // because it was most likely automatically selected\n  // while the user was typing in the phone number\n  // in international format.\n  // This fixes the issue when a user is presented\n  // with a phone number input with no country selected\n  // and then types in their local phone number\n  // then discovers that the input's messed up\n  // (a `+` has been prepended at the start of their input\n  //  and a random country has been selected),\n  // decides to undo it all by erasing everything\n  // and then types in their local phone number again\n  // resulting in a seemingly correct phone number\n  // but in reality that phone number has incorrect country.\n  // https://github.com/catamphetamine/react-phone-number-input/issues/273\n\n\n  if (!input && prevInput && prevInput[0] === '+') {\n    country = defaultCountry;\n  } // Also resets such \"randomly\" selected country\n  // as soon as the user erases the number\n  // digit-by-digit up to the leading `+` sign.\n\n\n  if (input === '+' && prevInput && prevInput[0] === '+' && prevInput.length > '+'.length) {\n    country = undefined;\n  } // Generate the new `value` property.\n\n\n  var value;\n\n  if (input) {\n    if (input[0] === '+') {\n      if (input !== '+') {\n        value = input;\n      }\n    } else {\n      value = e164(input, country, metadata);\n    }\n  } // Derive the country from the phone number.\n  // (regardless of whether there's any country currently selected)\n\n\n  if (value) {\n    country = getCountryForPartialE164Number(value, country, countries, includeInternationalOption, metadata);\n  }\n\n  return {\n    input: input,\n    country: country,\n    value: value\n  };\n}\n/**\n * Determines the country for a given (possibly incomplete) E.164 phone number.\n * @param  {string} number - A possibly incomplete E.164 phone number.\n * @param  {object} metadata - `libphonenumber-js` metadata.\n * @return {string?}\n */\n\nexport function get_country_from_possibly_incomplete_international_phone_number(number, metadata) {\n  var formatter = new AsYouType(null, metadata);\n  formatter.input(number); // `001` is a special \"non-geograpical entity\" code\n  // in Google's `libphonenumber` library.\n\n  if (formatter.country === '001') {\n    return;\n  }\n\n  return formatter.country;\n}\n/**\n * Compares two strings.\n * A helper for `Array.sort()`.\n */\n\nexport function compare_strings(a, b) {\n  // Use `String.localeCompare` if it's available.\n  // https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\n  // Which means everyone except IE <= 10 and Safari <= 10.\n  // `localeCompare()` is available in latest Node.js versions.\n\n  /* istanbul ignore else */\n  if (String.prototype.localeCompare) {\n    return a.localeCompare(b);\n  }\n  /* istanbul ignore next */\n\n\n  return a < b ? -1 : a > b ? 1 : 0;\n}\n/**\n * Strips `+${countryCallingCode}` prefix from an E.164 phone number.\n * @param {string} number - (possibly incomplete) E.164 phone number.\n * @param {string?} country - A possible country for this phone number.\n * @param {object} metadata - `libphonenumber-js` metadata.\n * @return {string}\n */\n\nexport function strip_country_calling_code(number, country, metadata) {\n  // Just an optimization, so that it\n  // doesn't have to iterate through all country calling codes.\n  if (country) {\n    var country_calling_prefix = '+' + getCountryCallingCode(country, metadata); // If `country` fits the actual `number`.\n\n    if (number.length < country_calling_prefix.length) {\n      if (country_calling_prefix.indexOf(number) === 0) {\n        return '';\n      }\n    } else {\n      if (number.indexOf(country_calling_prefix) === 0) {\n        return number.slice(country_calling_prefix.length);\n      }\n    }\n  } // If `country` doesn't fit the actual `number`.\n  // Try all available country calling codes.\n\n\n  for (var _i = 0, _Object$keys = Object.keys(metadata.country_calling_codes); _i < _Object$keys.length; _i++) {\n    var country_calling_code = _Object$keys[_i];\n\n    if (number.indexOf(country_calling_code) === '+'.length) {\n      return number.slice('+'.length + country_calling_code.length);\n    }\n  }\n\n  return '';\n}\n/**\n * Parses a partially entered national phone number digits\n * (or a partially entered E.164 international phone number)\n * and returns the national significant number part.\n * National significant number returned doesn't come with a national prefix.\n * @param {string} number - National number digits. Or possibly incomplete E.164 phone number.\n * @param {string?} country\n * @param {object} metadata - `libphonenumber-js` metadata.\n * @return {string} [result]\n */\n\nexport function getNationalSignificantNumberDigits(number, country, metadata) {\n  // Create \"as you type\" formatter.\n  var formatter = new AsYouType(country, metadata); // Input partial national phone number.\n\n  formatter.input(number); // Return the parsed partial national phone number.\n\n  var phoneNumber = formatter.getNumber();\n  return phoneNumber && phoneNumber.nationalNumber;\n}\n/**\n * Checks if a partially entered E.164 phone number could belong to a country.\n * @param  {string} number\n * @param  {string} country\n * @return {boolean}\n */\n\nexport function could_number_belong_to_country(number, country, metadata) {\n  var country_calling_code = getCountryCallingCode(country, metadata);\n  var i = 0;\n\n  while (i + 1 < number.length && i < country_calling_code.length) {\n    if (number[i + 1] !== country_calling_code[i]) {\n      return false;\n    }\n\n    i++;\n  }\n\n  return true;\n}\n//# sourceMappingURL=phoneInputHelpers.js.map","function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport InputSmart from './InputSmart';\nimport InputBasic from './InputBasic';\nimport Flag from './Flag';\nimport InternationalIcon from './InternationalIcon';\nimport { sortCountryOptions, isCountrySupportedWithError, getSupportedCountries, getSupportedCountryOptions, getCountries } from './countries';\nimport { createCountryIconComponent } from './CountryIcon';\nimport { metadata as metadataPropType, labels as labelsPropType } from './PropTypes';\nimport { getPreSelectedCountry, getCountrySelectOptions, parsePhoneNumber, generateNationalNumberDigits, migrateParsedInputForNewCountry, getCountryForPartialE164Number, parseInput, e164 } from './phoneInputHelpers';\n\nvar PhoneNumberInput_ =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(PhoneNumberInput_, _React$PureComponent);\n\n  function PhoneNumberInput_(props) {\n    var _this;\n\n    _classCallCheck(this, PhoneNumberInput_);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PhoneNumberInput_).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"inputRef\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"isCountrySupportedWithError\", function (country) {\n      var metadata = _this.props.metadata;\n      return isCountrySupportedWithError(country, metadata);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCountryChange\", function (newCountry) {\n      var _this$props = _this.props,\n          metadata = _this$props.metadata,\n          onChange = _this$props.onChange;\n      var _this$state = _this.state,\n          prevParsedInput = _this$state.parsedInput,\n          prevCountry = _this$state.country; // After the new `country` has been selected,\n      // if the phone number `<input/>` holds any digits\n      // then migrate those digits for the new `country`.\n\n      var newParsedInput = migrateParsedInputForNewCountry(prevParsedInput, prevCountry, newCountry, metadata, // Convert the phone number to \"national\" format\n      // when the user changes the selected country by hand.\n      true);\n      var newValue = e164(newParsedInput, newCountry, metadata); // Focus phone number `<input/>` upon country selection.\n\n      _this.getInputRef().current.focus(); // If the user has already manually selected a country\n      // then don't override that already selected country\n      // if the `defaultCountry` property changes.\n      // That's what `hasUserSelectedACountry` flag is for.\n\n\n      _this.setState({\n        country: newCountry,\n        hasUserSelectedACountry: true,\n        parsedInput: newParsedInput,\n        value: newValue\n      }, function () {\n        // Update the new `value` property.\n        // Doing it after the `state` has been updated\n        // because `onChange()` will trigger `getDerivedStateFromProps()`\n        // with the new `value` which will be compared to `state.value` there.\n        onChange(newValue);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onChange\", function (_input) {\n      var _this$props2 = _this.props,\n          defaultCountry = _this$props2.defaultCountry,\n          onChange = _this$props2.onChange,\n          addInternationalOption = _this$props2.addInternationalOption,\n          limitMaxLength = _this$props2.limitMaxLength,\n          metadata = _this$props2.metadata;\n\n      var _parseInput = parseInput(_input, _this.state.parsedInput, _this.state.country, defaultCountry, _this.state.countries, addInternationalOption, limitMaxLength, metadata),\n          input = _parseInput.input,\n          country = _parseInput.country,\n          value = _parseInput.value;\n\n      _this.setState({\n        parsedInput: input,\n        value: value,\n        country: country\n      }, // Update the new `value` property.\n      // Doing it after the `state` has been updated\n      // because `onChange()` will trigger `getDerivedStateFromProps()`\n      // with the new `value` which will be compared to `state.value` there.\n      function () {\n        return onChange(value);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onFocus\", function () {\n      return true;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onBlur\", function () {\n      return _this.setState({\n        isFocused: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFocus\", function (event) {\n      _this._onFocus();\n\n      var onFocus = _this.props.onFocus;\n\n      if (onFocus) {\n        onFocus(event);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onBlur\", function (event) {\n      var onBlur = _this.props.onBlur;\n\n      _this._onBlur();\n\n      if (onBlur) {\n        onBlur(event);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCountryFocus\", function (event) {\n      _this._onFocus(); // this.setState({ countrySelectFocused: true })\n\n\n      var countrySelectProps = _this.props.countrySelectProps;\n\n      if (countrySelectProps) {\n        var onFocus = countrySelectProps.onFocus;\n\n        if (onFocus) {\n          onFocus(event);\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCountryBlur\", function (event) {\n      _this._onBlur(); // this.setState({ countrySelectFocused: false })\n\n\n      var countrySelectProps = _this.props.countrySelectProps;\n\n      if (countrySelectProps) {\n        var onBlur = countrySelectProps.onBlur;\n\n        if (onBlur) {\n          onBlur(event);\n        }\n      }\n    });\n\n    var _this$props3 = _this.props,\n        _value = _this$props3.value,\n        labels = _this$props3.labels,\n        _addInternationalOption = _this$props3.addInternationalOption,\n        _metadata = _this$props3.metadata,\n        countryOptionsOrder = _this$props3.countryOptionsOrder;\n    var _this$props4 = _this.props,\n        _defaultCountry = _this$props4.defaultCountry,\n        countries = _this$props4.countries; // Validate `defaultCountry`.\n\n    if (_defaultCountry) {\n      if (!_this.isCountrySupportedWithError(_defaultCountry)) {\n        _defaultCountry = undefined;\n      }\n    } // Validate `countries`.\n\n\n    countries = getSupportedCountries(countries, _metadata);\n    var phoneNumber = parsePhoneNumber(_value, _metadata);\n    _this.CountryIcon = createCountryIconComponent(_this.props);\n    _this.state = {\n      // Workaround for `this.props` inside `getDerivedStateFromProps()`.\n      props: _this.props,\n      // The country selected.\n      country: getPreSelectedCountry(phoneNumber, _defaultCountry, countries || getCountries(_metadata), _addInternationalOption, _metadata),\n      // `countries` are stored in `this.state` because they're filtered.\n      // For example, a developer might theoretically pass some unsupported\n      // countries as part of the `countries` property, and because of that\n      // the component uses `this.state.countries` (which are filtered)\n      // instead of `this.props.countries`\n      // (which could potentially contain unsupported countries).\n      countries: countries,\n      // `parsedInput` state property holds non-formatted user's input.\n      // The reason is that there's no way of finding out\n      // in which form should `value` be displayed: international or national.\n      // E.g. if `value` is `+78005553535` then it could be input\n      // by a user both as `8 (800) 555-35-35` and `+7 800 555 35 35`.\n      // Hence storing just `value`is not sufficient for correct formatting.\n      // E.g. if a user entered `8 (800) 555-35-35`\n      // then value is `+78005553535` and `parsedInput` is `88005553535`\n      // and if a user entered `+7 800 555 35 35`\n      // then value is `+78005553535` and `parsedInput` is `+78005553535`.\n      parsedInput: generateParsedInput(_value, phoneNumber, _this.props),\n      // `value` property is duplicated in state.\n      // The reason is that `getDerivedStateFromProps()`\n      // needs this `value` to compare to the new `value` property\n      // to find out if `parsedInput` needs updating:\n      // If the `value` property was changed externally\n      // then it won't be equal to `state.value`\n      // in which case `parsedInput` and `country` should be updated.\n      value: _value\n    };\n    return _this;\n  }\n\n  _createClass(PhoneNumberInput_, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var onCountryChange = this.props.onCountryChange;\n      var defaultCountry = this.props.defaultCountry;\n      var selectedCountry = this.state.country;\n\n      if (onCountryChange) {\n        if (defaultCountry) {\n          if (!this.isCountrySupportedWithError(defaultCountry)) {\n            defaultCountry = undefined;\n          }\n        }\n\n        if (selectedCountry !== defaultCountry) {\n          onCountryChange(selectedCountry);\n        }\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var onCountryChange = this.props.onCountryChange;\n      var country = this.state.country; // Call `onCountryChange` when user selects another country.\n\n      if (onCountryChange && country !== prevState.country) {\n        onCountryChange(country);\n      }\n    } // A shorthand for not passing `metadata` as a second argument.\n\n  }, {\n    key: \"getInputRef\",\n    value: function getInputRef() {\n      var inputRef = this.props.inputRef;\n      return inputRef || this.inputRef;\n    } // `state` holds previous props as `props`, and also:\n    // * `country` — The currently selected country, e.g. `\"RU\"`.\n    // * `value` — The currently entered phone number (E.164), e.g. `+78005553535`.\n    // * `parsedInput` — The parsed `<input/>` value, e.g. `8005553535`.\n    // (and a couple of other less significant properties)\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props5 = this.props,\n          name = _this$props5.name,\n          disabled = _this$props5.disabled,\n          autoComplete = _this$props5.autoComplete,\n          style = _this$props5.style,\n          className = _this$props5.className,\n          inputRef = _this$props5.inputRef,\n          inputComponent = _this$props5.inputComponent,\n          numberInputProps = _this$props5.numberInputProps,\n          smartCaret = _this$props5.smartCaret,\n          CountrySelectComponent = _this$props5.countrySelectComponent,\n          countrySelectProps = _this$props5.countrySelectProps,\n          defaultCountry = _this$props5.defaultCountry,\n          countries = _this$props5.countries,\n          countryOptionsOrder = _this$props5.countryOptionsOrder,\n          labels = _this$props5.labels,\n          flags = _this$props5.flags,\n          flagComponent = _this$props5.flagComponent,\n          flagUrl = _this$props5.flagUrl,\n          addInternationalOption = _this$props5.addInternationalOption,\n          internationalIcon = _this$props5.internationalIcon,\n          displayInitialValueAsLocalNumber = _this$props5.displayInitialValueAsLocalNumber,\n          onCountryChange = _this$props5.onCountryChange,\n          limitMaxLength = _this$props5.limitMaxLength,\n          reset = _this$props5.reset,\n          metadata = _this$props5.metadata,\n          rest = _objectWithoutProperties(_this$props5, [\"name\", \"disabled\", \"autoComplete\", \"style\", \"className\", \"inputRef\", \"inputComponent\", \"numberInputProps\", \"smartCaret\", \"countrySelectComponent\", \"countrySelectProps\", \"defaultCountry\", \"countries\", \"countryOptionsOrder\", \"labels\", \"flags\", \"flagComponent\", \"flagUrl\", \"addInternationalOption\", \"internationalIcon\", \"displayInitialValueAsLocalNumber\", \"onCountryChange\", \"limitMaxLength\", \"reset\", \"metadata\"]);\n\n      var _this$state2 = this.state,\n          country = _this$state2.country,\n          parsedInput = _this$state2.parsedInput,\n          isFocused = _this$state2.isFocused;\n      var InputComponent = smartCaret ? InputSmart : InputBasic;\n      var countrySelectOptions = useMemoCountrySelectOptions(function () {\n        return sortCountryOptions(getCountrySelectOptions(countries || getCountries(metadata), labels, addInternationalOption), getSupportedCountryOptions(countryOptionsOrder, metadata));\n      }, [countries, countryOptionsOrder, addInternationalOption, labels, metadata]);\n      return React.createElement(\"div\", {\n        style: style,\n        className: classNames(className, 'PhoneInput', {\n          'PhoneInput--focus': isFocused\n        })\n      }, React.createElement(CountrySelectComponent, _extends({\n        name: name ? \"\".concat(name, \"Country\") : undefined,\n        \"aria-label\": labels.country\n      }, countrySelectProps, {\n        value: country,\n        options: countrySelectOptions,\n        onChange: this.onCountryChange,\n        onFocus: this.onCountryFocus,\n        onBlur: this.onCountryBlur,\n        disabled: disabled || countrySelectProps && countrySelectProps.disabled,\n        iconComponent: this.CountryIcon\n      })), React.createElement(InputComponent, _extends({\n        ref: this.getInputRef(),\n        type: \"tel\",\n        autoComplete: autoComplete\n      }, numberInputProps, rest, {\n        name: name,\n        metadata: metadata,\n        country: country,\n        value: parsedInput || '',\n        onChange: this.onChange,\n        onFocus: this.onFocus,\n        onBlur: this.onBlur,\n        disabled: disabled,\n        inputComponent: inputComponent,\n        className: classNames('PhoneInputInput', numberInputProps && numberInputProps.className, rest.className)\n      })));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      var country = state.country,\n          hasUserSelectedACountry = state.hasUserSelectedACountry,\n          value = state.value,\n          _state$props = state.props,\n          prevDefaultCountry = _state$props.defaultCountry,\n          prevValue = _state$props.value,\n          prevReset = _state$props.reset;\n      var metadata = props.metadata,\n          countries = props.countries,\n          newDefaultCountry = props.defaultCountry,\n          newValue = props.value,\n          newReset = props.reset;\n      var newState = {\n        // Emulate `prevProps` via `state.props`.\n        props: props,\n        // If the user has already manually selected a country\n        // then don't override that already selected country\n        // if the `defaultCountry` property changes.\n        // That's what `hasUserSelectedACountry` flag is for.\n        hasUserSelectedACountry: hasUserSelectedACountry\n      }; // Some users requested a way to reset the component\n      // (both number `<input/>` and country `<select/>`).\n      // Whenever `reset` property changes both number `<input/>`\n      // and country `<select/>` are reset.\n      // It's not implemented as some instance `.reset()` method\n      // because `ref` is forwarded to `<input/>`.\n      // It's also not replaced with just resetting `country` on\n      // external `value` reset, because a user could select a country\n      // and then not input any `value`, and so the selected country\n      // would be \"stuck\", if not using this `reset` property.\n      // https://github.com/catamphetamine/react-phone-number-input/issues/300\n\n      if (newReset !== prevReset) {\n        return _objectSpread({}, newState, {\n          parsedInput: undefined,\n          value: undefined,\n          country: newDefaultCountry,\n          hasUserSelectedACountry: undefined\n        });\n      } // If the default country changed.\n      // (e.g. in case of ajax GeoIP detection after page loaded)\n      // then select it but only if the user hasn't already manually\n      // selected a country and no phone number has been entered so far.\n      // Because if the user has already started inputting a phone number\n      // then he's okay with no country being selected at all (\"International\")\n      // and doesn't want to be disturbed, doesn't want his input to be screwed, etc.\n\n\n      if (newDefaultCountry !== prevDefaultCountry && !hasUserSelectedACountry && !value && !newValue) {\n        return _objectSpread({}, newState, {\n          country: isCountrySupportedWithError(newDefaultCountry, metadata) ? newDefaultCountry : prevDefaultCountry // `value` is `undefined`.\n          // `parsedInput` is `undefined` because `value` is `undefined`.\n\n        });\n      } // If a new `value` is set externally.\n      // (e.g. as a result of an ajax API request\n      //  to get user's phone after page loaded)\n      // The first part — `newValue !== prevValue` —\n      // is basically `props.value !== prevProps.value`\n      // so it means \"if value property was changed externally\".\n      // The second part — `newValue !== value` —\n      // is for ignoring the `getDerivedStateFromProps()` call\n      // which happens in `this.onChange()` right after `this.setState()`.\n      // If this `getDerivedStateFromProps()` call isn't ignored\n      // then the country flag would reset on each input.\n      else if (newValue !== prevValue && newValue !== value) {\n          var phoneNumber = parsePhoneNumber(newValue, metadata);\n          var parsedCountry;\n\n          if (phoneNumber) {\n            var _countries = getSupportedCountries(props.countries, metadata);\n\n            if (!_countries || _countries.indexOf(phoneNumber.country) >= 0) {\n              parsedCountry = phoneNumber.country;\n            }\n          }\n\n          if (!newValue) {\n            newState.hasUserSelectedACountry = undefined;\n          }\n\n          return _objectSpread({}, newState, {\n            parsedInput: generateParsedInput(newValue, phoneNumber, props),\n            value: newValue,\n            country: newValue ? parsedCountry : newDefaultCountry\n          });\n        } // `defaultCountry` didn't change.\n      // `value` didn't change.\n      // `parsedInput` didn't change, because `value` didn't change.\n      //\n      // So no need to update state here really.\n      // Could as well return `null` explicitly\n      // to indicate that the `state` hasn't changed.\n      // But just in case, returns `newState`.\n      // (who knows if someone adds something\n      // changing `newState` above in some future)\n\n\n      return newState;\n    }\n  }]);\n\n  return PhoneNumberInput_;\n}(React.PureComponent); // This wrapper is only to `.forwardRef()` to the `<input/>`.\n\n\nvar PhoneNumberInput = React.forwardRef(function (props, ref) {\n  return React.createElement(PhoneNumberInput_, _extends({}, props, {\n    inputRef: ref\n  }));\n});\nPhoneNumberInput.propTypes = {\n  /**\n   * Phone number in `E.164` format.\n   *\n   * Example:\n   *\n   * `\"+12223333333\"`\n   */\n  value: PropTypes.string,\n\n  /**\n   * Updates the `value` as the user inputs the phone number.\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * Toggles the `--focus` CSS class.\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * `onBlur` is usually passed by `redux-form`.\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * `onKeyDown` handler (e.g. to handle Enter key press).\n   * @ignore\n   */\n  onKeyDown: PropTypes.func,\n\n  /**\n   * Set to `true` to disable both the phone number `<input/>`\n   * and the country `<select/>`.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Sets `autoComplete` property for phone number `<input/>`.\n   *\n   * Web browser's \"autocomplete\" feature\n   * remembers the phone number being input\n   * and can also autofill the `<input/>`\n   * with previously remembered phone numbers.\n   *\n   * https://developers.google.com\n   * /web/updates/2015/06/checkout-faster-with-autofill\n   *\n   * For example, can be used to turn it off:\n   *\n   * \"So when should you use `autocomplete=\"off\"`?\n   *  One example is when you've implemented your own version\n   *  of autocomplete for search. Another example is any form field\n   *  where users will input and submit different kinds of information\n   *  where it would not be useful to have the browser remember\n   *  what was submitted previously\".\n   */\n  // (is `\"tel\"` by default)\n  autoComplete: PropTypes.string.isRequired,\n\n  /**\n   * Set to `true` to show the initial `value` in\n   * \"national\" format rather than \"international\".\n   *\n   * For example, if this flag is set to `true`\n   * and the initial `value=\"+12133734253\"` is passed\n   * then the `<input/>` value will be `\"(213) 373-4253\"`.\n   *\n   * By default, this flag is set to `false`,\n   * meaning that if the initial `value=\"+12133734253\"` is passed\n   * then the `<input/>` value will be `\"+1 213 373 4253\"`.\n   *\n   * The reason for such default behaviour is that\n   * the newer generation grows up when there are no stationary phones\n   * and therefore everyone inputs phone numbers in international format\n   * in their smartphones so people gradually get more accustomed to\n   * writing phone numbers in international format rather than in local format.\n   * Future people won't be using \"national\" format, only \"international\".\n   */\n  // (is `false` by default)\n  displayInitialValueAsLocalNumber: PropTypes.bool.isRequired,\n\n  /**\n   * The country to be selected by default.\n   * For example, can be set after a GeoIP lookup.\n   *\n   * Example: `\"US\"`.\n   */\n  // A two-letter country code (\"ISO 3166-1 alpha-2\").\n  defaultCountry: PropTypes.string,\n\n  /**\n   * If specified, only these countries will be available for selection.\n   *\n   * Example:\n   *\n   * `[\"RU\", \"UA\", \"KZ\"]`\n   */\n  countries: PropTypes.arrayOf(PropTypes.string),\n\n  /**\n   * Custom country `<select/>` option names.\n   * Also some labels like \"ext\" and country `<select/>` `aria-label`.\n   *\n   * Example:\n   *\n   * `{ \"ZZ\": \"Международный\", RU: \"Россия\", US: \"США\", ... }`\n   *\n   * See the `locales` directory for examples.\n   */\n  labels: labelsPropType.isRequired,\n\n  /**\n   * A URL template of a country flag, where\n   * \"{XX}\" is a two-letter country code in upper case,\n   * or where \"{xx}\" is a two-letter country code in lower case.\n   * By default it points to `country-flag-icons` github pages website.\n   * I imagine someone might want to download those country flag icons\n   * and host them on their own servers instead\n   * (all flags are available in the `country-flag-icons` library).\n   * There's a catch though: new countries may be added in future,\n   * so when hosting country flag icons on your own server\n   * one should check the `CHANGELOG.md` every time before updating this library,\n   * otherwise there's a possibility that some new country flag would be missing.\n   */\n  flagUrl: PropTypes.string.isRequired,\n\n  /**\n   * Custom country flag icon components.\n   * These flags will be used instead of the default ones.\n   * The the \"Flags\" section of the readme for more info.\n   *\n   * The shape is an object where keys are country codes\n   * and values are flag icon components.\n   * Flag icon components receive the same properties\n   * as `flagComponent` (see below).\n   *\n   * Example:\n   *\n   * `{ \"RU\": (props) => <img src=\"...\"/> }`\n   *\n   * Example:\n   *\n   * `import flags from 'country-flag-icons/react/3x2'`\n   *\n   * `import PhoneInput from 'react-phone-number-input'`\n   *\n   * `<PhoneInput flags={flags} .../>`\n   */\n  flags: PropTypes.objectOf(PropTypes.elementType),\n\n  /**\n   * Country flag icon component.\n   *\n   * Takes properties:\n   *\n   * * `country: string` — The country code.\n   * * `countryName: string` — The country name.\n   * * `flagUrl: string` — The `flagUrl` property (see above).\n   * * `flags: object` — The `flags` property (see above).\n   */\n  flagComponent: PropTypes.elementType.isRequired,\n\n  /**\n   * Set to `false` to remove the \"International\" option from country `<select/>`.\n   */\n  addInternationalOption: PropTypes.bool.isRequired,\n\n  /**\n   * \"International\" icon component.\n   * Should have the same aspect ratio.\n   *\n   * Receives properties:\n   *\n   * * `title: string` — \"International\" country option label.\n   */\n  internationalIcon: PropTypes.elementType.isRequired,\n\n  /**\n   * Can be used to place some countries on top of the list of country `<select/>` options.\n   *\n   * * `\"|\"` — inserts a separator.\n   * * `\"...\"` — means \"the rest of the countries\" (can be omitted, in which case it will automatically be added at the end).\n   *\n   * Example:\n   *\n   * `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`\n   */\n  countryOptionsOrder: PropTypes.arrayOf(PropTypes.string),\n\n  /**\n   * `<Phone/>` component CSS style object.\n   */\n  style: PropTypes.object,\n\n  /**\n   * `<Phone/>` component CSS class.\n   */\n  className: PropTypes.string,\n\n  /**\n   * Country `<select/>` component.\n   *\n   * Receives properties:\n   *\n   * * `name: string?` — HTML `name` attribute.\n   * * `value: string?` — The currently selected country code.\n   * * `onChange(value: string?)` — Updates the `value`.\n   * * `onFocus()` — Is used to toggle the `--focus` CSS class.\n   * * `onBlur()` — Is used to toggle the `--focus` CSS class.\n   * * `options: object[]` — The list of all selectable countries (including \"International\") each being an object of shape `{ value: string?, label: string }`.\n   * * `iconComponent: PropTypes.elementType` — React component that renders a country icon: `<Icon country={value}/>`. If `country` is `undefined` then it renders an \"International\" icon.\n   * * `disabled: boolean?` — HTML `disabled` attribute.\n   * * `tabIndex: (number|string)?` — HTML `tabIndex` attribute.\n   * * `className: string` — CSS class name.\n   */\n  countrySelectComponent: PropTypes.elementType.isRequired,\n\n  /**\n   * Country `<select/>` component props.\n   * Along with the usual DOM properties such as `aria-label` and `tabIndex`,\n   * some custom properties are supported, such as `arrowComponent` and `unicodeFlags`.\n   */\n  countrySelectProps: PropTypes.object,\n\n  /**\n   * Phone number `<input/>` component.\n   *\n   * Receives properties:\n   *\n   * * `value: string` — The formatted `value`.\n   * * `onChange(event: Event)` — Updates the formatted `value` from `event.target.value`.\n   * * `onFocus()` — Is used to toggle the `--focus` CSS class.\n   * * `onBlur()` — Is used to toggle the `--focus` CSS class.\n   * * Other properties like `type=\"tel\"` or `autoComplete=\"tel\"` that should be passed through to the DOM `<input/>`.\n   *\n   * Must also either use `React.forwardRef()` to \"forward\" `ref` to the `<input/>` or implement `.focus()` method.\n   */\n  inputComponent: PropTypes.elementType.isRequired,\n\n  /**\n   * Phone number `<input/>` component props.\n   */\n  numberInputProps: PropTypes.object,\n\n  /**\n   * By default, the caret position is being \"intelligently\" managed\n   * while a user inputs a phone number.\n   * This \"smart\" caret behavior can be turned off\n   * by passing `smartCaret={false}` property.\n   * This is just an \"escape hatch\" for any possible caret position issues.\n   */\n  // Is `true` by default.\n  smartCaret: PropTypes.bool.isRequired,\n\n  /**\n   * If set to `true` the phone number input will get trimmed\n   * if it exceeds the maximum length for the country.\n   */\n  limitMaxLength: PropTypes.bool.isRequired,\n\n  /**\n   * `libphonenumber-js` metadata.\n   *\n   * Can be used to pass custom `libphonenumber-js` metadata\n   * to reduce the overall bundle size for those who compile \"custom\" metadata.\n   */\n  metadata: metadataPropType.isRequired,\n\n  /**\n   * Is called every time the selected country changes:\n   * either programmatically or when user selects it manually from the list.\n   */\n  // People have been asking for a way to get the selected country.\n  // @see  https://github.com/catamphetamine/react-phone-number-input/issues/128\n  // For some it's just a \"business requirement\".\n  // I guess it's about gathering as much info on the user as a website can\n  // without introducing any addional fields that would complicate the form\n  // therefore reducing \"conversion\" (that's a marketing term).\n  // Assuming that the phone number's country is the user's country\n  // is not 100% correct but in most cases I guess it's valid.\n  onCountryChange: PropTypes.func\n};\nPhoneNumberInput.defaultProps = {\n  /**\n   * Remember (and autofill) the value as a phone number.\n   */\n  autoComplete: 'tel',\n\n  /**\n   * Flag icon component.\n   */\n  flagComponent: Flag,\n\n  /**\n   * By default, uses icons from `country-flag-icons` github pages website.\n   */\n  // Must be equal to `flagUrl` in `./CountryIcon.js`.\n  flagUrl: 'https://catamphetamine.github.io/country-flag-icons/3x2/{XX}.svg',\n\n  /**\n   * Default \"International\" country `<select/>` option icon.\n   */\n  internationalIcon: InternationalIcon,\n\n  /**\n   * Phone number `<input/>` component.\n   */\n  inputComponent: 'input',\n\n  /**\n   * Some users requested a way to reset the component:\n   * both number `<input/>` and country `<select/>`.\n   * Whenever `reset` property changes both number `<input/>`\n   * and country `<select/>` are reset.\n   * It's not implemented as some instance `.reset()` method\n   * because `ref` is forwarded to `<input/>`.\n   * It's also not replaced with just resetting `country` on\n   * external `value` reset, because a user could select a country\n   * and then not input any `value`, and so the selected country\n   * would be \"stuck\", if not using this `reset` property.\n   */\n  // https://github.com/catamphetamine/react-phone-number-input/issues/300\n  reset: PropTypes.any,\n\n  /**\n   * Don't convert the initially passed phone number `value`\n   * to a national phone number for its country.\n   * The reason is that the newer generation grows up when\n   * there are no stationary phones and therefore everyone inputs\n   * phone numbers with a `+` in their smartphones\n   * so phone numbers written in international form\n   * are gradually being considered more natural than local ones.\n   */\n  displayInitialValueAsLocalNumber: false,\n\n  /**\n   * Set to `false` to use \"basic\" caret instead of the \"smart\" one.\n   */\n  smartCaret: true,\n\n  /**\n   * Whether to add the \"International\" option\n   * to the list of countries.\n   */\n  addInternationalOption: true,\n\n  /**\n   * If set to `true` the phone number input will get trimmed\n   * if it exceeds the maximum length for the country.\n   */\n  limitMaxLength: false\n};\nexport default PhoneNumberInput;\n\nfunction generateParsedInput(value, phoneNumber, _ref) {\n  var displayInitialValueAsLocalNumber = _ref.displayInitialValueAsLocalNumber;\n\n  // If the `value` (E.164 phone number)\n  // belongs to the currently selected country\n  // and `displayInitialValueAsLocalNumber` property is `true`\n  // then convert `value` (E.164 phone number)\n  // to a local phone number digits.\n  // E.g. '+78005553535' -> '88005553535'.\n  if (displayInitialValueAsLocalNumber && phoneNumber && phoneNumber.country) {\n    return generateNationalNumberDigits(phoneNumber);\n  }\n\n  return value;\n}\n\nvar countrySelectOptionsMemo;\nvar countrySelectOptionsMemoDependencies;\n\nfunction useMemoCountrySelectOptions(generator, dependencies) {\n  if (!countrySelectOptionsMemoDependencies || !areEqualArrays(dependencies, countrySelectOptionsMemoDependencies)) {\n    countrySelectOptionsMemo = generator();\n    countrySelectOptionsMemoDependencies = dependencies;\n  }\n\n  return countrySelectOptionsMemo;\n}\n\nfunction areEqualArrays(a, b) {\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  var i = 0;\n\n  while (i < a.length) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n\n    i++;\n  }\n\n  return true;\n}\n//# sourceMappingURL=PhoneInputWithCountry.js.map","function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport { parsePhoneNumberFromString } from 'libphonenumber-js/core';\n/**\n * Formats a phone number.\n * Is a proxy for `libphonenumber-js`'s `.format()` function of a parsed `PhoneNumber`.\n * @param  {string} value\n * @param  {string} [format]\n * @param  {object} metadata\n * @return {string}\n */\n\nexport default function formatPhoneNumber(value, format, metadata) {\n  if (!metadata) {\n    if (_typeof(format) === 'object') {\n      metadata = format;\n      format = 'NATIONAL';\n    }\n  }\n\n  if (!value) {\n    return '';\n  }\n\n  var phoneNumber = parsePhoneNumberFromString(value, metadata);\n\n  if (!phoneNumber) {\n    return '';\n  } // Deprecated.\n  // Legacy `format`s.\n\n\n  switch (format) {\n    case 'National':\n      format = 'NATIONAL';\n      break;\n\n    case 'International':\n      format = 'INTERNATIONAL';\n      break;\n  }\n\n  return phoneNumber.format(format);\n}\nexport function formatPhoneNumberIntl(value, metadata) {\n  return formatPhoneNumber(value, 'INTERNATIONAL', metadata);\n}\n//# sourceMappingURL=formatPhoneNumber.js.map","import { parsePhoneNumberFromString } from 'libphonenumber-js/core';\nexport default function isValidPhoneNumber(value, metadata) {\n  if (!value) {\n    return false;\n  }\n\n  var phoneNumber = parsePhoneNumberFromString(value, metadata);\n\n  if (!phoneNumber) {\n    return false;\n  }\n\n  return phoneNumber.isValid();\n}\n//# sourceMappingURL=isValidPhoneNumber.js.map","import { parsePhoneNumberFromString } from 'libphonenumber-js/core';\nexport default function isPossiblePhoneNumber(value, metadata) {\n  if (!value) {\n    return false;\n  }\n\n  var phoneNumber = parsePhoneNumberFromString(value, metadata);\n\n  if (!phoneNumber) {\n    return false;\n  }\n\n  return phoneNumber.isPossible();\n}\n//# sourceMappingURL=isPossiblePhoneNumber.js.map","/**\r\n * Creates Unicode flag from a two-letter ISO country code.\r\n * https://stackoverflow.com/questions/24050671/how-to-put-japan-flag-character-in-a-string\r\n * @param  {string} country — A two-letter ISO country code (case-insensitive).\r\n * @return {string}\r\n */\nexport default function getCountryFlag(country) {\n  return getRegionalIndicatorSymbol(country[0]) + getRegionalIndicatorSymbol(country[1]);\n}\n/**\r\n * Converts a letter to a Regional Indicator Symbol.\r\n * @param  {string} letter\r\n * @return {string}\r\n */\n\nfunction getRegionalIndicatorSymbol(letter) {\n  return String.fromCodePoint(0x1F1E6 - 65 + letter.toUpperCase().charCodeAt(0));\n}\n//# sourceMappingURL=unicode.js.map","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useCallback, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport getUnicodeFlagIcon from 'country-flag-icons/unicode';\nexport default function CountrySelect(_ref) {\n  var value = _ref.value,\n      onChange = _ref.onChange,\n      options = _ref.options,\n      rest = _objectWithoutProperties(_ref, [\"value\", \"onChange\", \"options\"]);\n\n  var onChange_ = useCallback(function (event) {\n    var value = event.target.value;\n    onChange(value === 'ZZ' ? undefined : value);\n  }, [onChange]);\n  var selectedOption = useMemo(function () {\n    return getSelectedOption(options, value);\n  }, [options, value]); // \"ZZ\" means \"International\".\n  // (HTML requires each `<option/>` have some string `value`).\n\n  return React.createElement(\"select\", _extends({}, rest, {\n    value: value || 'ZZ',\n    onChange: onChange_\n  }), options.map(function (_ref2) {\n    var value = _ref2.value,\n        label = _ref2.label,\n        divider = _ref2.divider;\n    return React.createElement(\"option\", {\n      key: divider ? '|' : value || 'ZZ',\n      value: divider ? '|' : value || 'ZZ',\n      disabled: divider ? true : false,\n      style: divider ? DIVIDER_STYLE : undefined\n    }, label);\n  }));\n}\nCountrySelect.propTypes = {\n  /**\n   * A two-letter country code.\n   * Example: \"US\", \"RU\", etc.\n   */\n  value: PropTypes.string,\n\n  /**\n   * Updates the `value`.\n   */\n  onChange: PropTypes.func.isRequired,\n  // `<select/>` options.\n  options: PropTypes.arrayOf(PropTypes.shape({\n    value: PropTypes.string,\n    label: PropTypes.string,\n    divider: PropTypes.bool\n  })).isRequired\n};\nvar DIVIDER_STYLE = {\n  fontSize: '1px',\n  backgroundColor: 'currentColor',\n  color: 'inherit'\n};\nexport function CountrySelectWithIcon(_ref3) {\n  var value = _ref3.value,\n      options = _ref3.options,\n      className = _ref3.className,\n      Icon = _ref3.iconComponent,\n      getIconAspectRatio = _ref3.getIconAspectRatio,\n      Arrow = _ref3.arrowComponent,\n      unicodeFlags = _ref3.unicodeFlags,\n      rest = _objectWithoutProperties(_ref3, [\"value\", \"options\", \"className\", \"iconComponent\", \"getIconAspectRatio\", \"arrowComponent\", \"unicodeFlags\"]);\n\n  var selectedOption = useMemo(function () {\n    return getSelectedOption(options, value);\n  }, [options, value]);\n  return React.createElement(\"div\", {\n    className: \"PhoneInputCountry\"\n  }, React.createElement(CountrySelect, _extends({}, rest, {\n    value: value,\n    options: options,\n    className: classNames('PhoneInputCountrySelect', className)\n  })), unicodeFlags && value && React.createElement(\"div\", {\n    className: \"PhoneInputCountryIconUnicode\"\n  }, getUnicodeFlagIcon(value)), !(unicodeFlags && value) && React.createElement(Icon, {\n    country: value,\n    label: selectedOption && selectedOption.label,\n    aspectRatio: unicodeFlags ? 1 : undefined\n  }), React.createElement(Arrow, null));\n}\nCountrySelectWithIcon.propTypes = {\n  // Country flag component.\n  iconComponent: PropTypes.elementType,\n  // Select arrow component.\n  arrowComponent: PropTypes.elementType.isRequired,\n  // Set to `true` to render Unicode flag icons instead of SVG images.\n  unicodeFlags: PropTypes.bool\n};\nCountrySelectWithIcon.defaultProps = {\n  // Is \"International\" icon square?\n  arrowComponent: function arrowComponent() {\n    return React.createElement(\"div\", {\n      className: \"PhoneInputCountrySelectArrow\"\n    });\n  }\n};\n\nfunction getSelectedOption(options, value) {\n  for (var _iterator = options, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref4;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref4 = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref4 = _i.value;\n    }\n\n    var option = _ref4;\n\n    if (!option.divider && option.value === value) {\n      return option;\n    }\n  }\n}\n//# sourceMappingURL=CountrySelect.js.map","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport labels from '../locale/en.json';\nimport { metadata as metadataPropType, labels as labelsPropType } from './PropTypes';\nimport PhoneInput from './PhoneInputWithCountry';\nimport { CountrySelectWithIcon as CountrySelect } from './CountrySelect';\nexport function createPhoneInput(defaultMetadata) {\n  var PhoneInputDefault = React.forwardRef(function (props, ref) {\n    return React.createElement(PhoneInput, _extends({\n      ref: ref\n    }, props));\n  });\n  PhoneInputDefault.propTypes = {\n    metadata: metadataPropType.isRequired,\n    labels: labelsPropType.isRequired,\n    countrySelectComponent: PropTypes.elementType.isRequired\n  };\n  PhoneInputDefault.defaultProps = {\n    metadata: defaultMetadata,\n    labels: labels,\n    countrySelectComponent: CountrySelect\n  };\n  return PhoneInputDefault;\n}\nexport default createPhoneInput();\n//# sourceMappingURL=PhoneInputWithCountryDefault.js.map","import metadata from 'libphonenumber-js/metadata.mobile.json'\n\nimport {\n\tparsePhoneNumber as _parsePhoneNumber,\n\tformatPhoneNumber as _formatPhoneNumber,\n\tformatPhoneNumberIntl as _formatPhoneNumberIntl,\n\tisValidPhoneNumber as _isValidPhoneNumber,\n\tisPossiblePhoneNumber as _isPossiblePhoneNumber,\n\tgetCountries as _getCountries,\n\tgetCountryCallingCode as _getCountryCallingCode\n} from '../core/index'\n\nimport { createPhoneInput } from '../modules/PhoneInputWithCountryDefault'\n\nfunction call(func, _arguments) {\n\tvar args = Array.prototype.slice.call(_arguments)\n\targs.push(metadata)\n\treturn func.apply(this, args)\n}\n\nexport default createPhoneInput(metadata)\n\nexport function parsePhoneNumber() {\n\treturn call(_parsePhoneNumber, arguments)\n}\n\nexport function formatPhoneNumber() {\n\treturn call(_formatPhoneNumber, arguments)\n}\n\nexport function formatPhoneNumberIntl() {\n\treturn call(_formatPhoneNumberIntl, arguments)\n}\n\nexport function isValidPhoneNumber() {\n\treturn call(_isValidPhoneNumber, arguments)\n}\n\nexport function isPossiblePhoneNumber() {\n\treturn call(_isPossiblePhoneNumber, arguments)\n}\n\nexport function getCountries() {\n\treturn call(_getCountries, arguments)\n}\n\nexport function getCountryCallingCode() {\n\treturn call(_getCountryCallingCode, arguments)\n}"],"names":["hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","apply","key","call","join","module","exports","window","Object","defineProperty","value","text","caret_position","parse_character","focused_input_character_index","index","character","undefined","caret","operation","slice","symbol","string","count","_iterator","split","_isArray","_i","Symbol","iterator","_ref","next","done","retained_template","template","placeholder","empty_placeholder","cut_before","opening_braces","_helpers","count_occurences","closing_braces","dangling_braces","replace","should_close_braces","characters_in_template","value_character_index","filled_in_template","_closeBraces2","default","obj","_closeBraces","__esModule","formatter","_templateFormatter2","found","possibly_last_input_character_index","_templateFormatter","element","selectionStart","selectionEnd","start","end","event","keyCode","Keys","Backspace","Delete","navigator","ANDROID_USER_AGENT_REG_EXP","test","userAgent","isAndroid","setSelectionRange","setTimeout","input","_parse","_format","on_change","format_input_text","selection","_dom","getSelection","erase_selection","getOperation","preventDefault","_edit2","_interopRequireDefault","_edit","_parse4","_parse3","_format3","_format2","setCaretPosition","_parse2","getCaretPosition","operation_applied","formatted","_extends","assign","target","source","prototype","_react2","_react","_propTypes2","_propTypes","Input","ref","parse","format","InputComponent","inputComponent","onChange","onCut","onPaste","onKeyDown","rest","keys","indexOf","_objectWithoutProperties","ownRef","useRef","_onChange","useCallback","_inputControl","current","_onPaste","_onCut","_onKeyDown","createElement","isEmptyValue","forwardRef","propTypes","func","isRequired","elementType","type","defaultProps","ParseError","code","instance","Constructor","TypeError","_classCallCheck","this","name","constructor","message","stack","Error","create","MIN_LENGTH_FOR_NSN","MAX_LENGTH_FOR_NSN","MAX_LENGTH_COUNTRY_CODE","VALID_DIGITS","VALID_PUNCTUATION","matchesEntirely","regular_expression","RegExp","_typeof","_createClass","defineProperties","props","descriptor","enumerable","configurable","writable","protoProps","staticProps","V3","Metadata","metadata","is_object","countries","country_calling_codes","country_phone_code_to_countries","type_of","validateMetadata","v1","version","v2","a","b","pa","pb","na","Number","nb","isNaN","compare","v3","filter","_","country","_country","country_metadata","hasCountry","countryCallingCodes","countryCallingCode","_this","formats","_getFormats","getDefaultCountryMetadataForRegion","map","Format","_getNationalPrefixFormattingRule","nationalPrefix","_getNationalPrefixIsOptionalWhenFormatting","types","_type","hasTypes","getType","Type","country_calling_code","nationalPrefixFormattingRule","nationalPrefixIsOptionalWhenFormatting","usesNationalPrefix","possibleLengths","getCountryCallingCode","isSupportedCountry","RFC3966_EXTN_PREFIX","CAPTURING_EXTN_DIGITS","create_extension_pattern","purpose","single_extension_characters","EXTN_PATTERNS_FOR_PARSING","EXTN_PATTERN","VALID_PHONE_NUMBER_PATTERN","isViablePhoneNumber","number","DIGITS","0","1","2","3","4","5","6","7","8","9","０","１","２","３","４","５","６","７","８","９","٠","١","٢","٣","٤","٥","٦","٧","٨","٩","۰","۱","۲","۳","۴","۵","۶","۷","۸","۹","parseIncompletePhoneNumber","result","parsePhoneNumberCharacter","parseDigit","NON_FIXED_LINE_PHONE_TYPES","getNumberType","options","nationalNumber","phone","nationalNumberPattern","is_of_type","pattern","checkNumberLengthForType","type_info","possible_lengths","mobile_type","merged","sort","mergeArrays","actual_length","minimum_length","is_possible_number","national_number","is_international","CAPTURING_DIGIT_PATTERN","SINGLE_IDD_PREFIX","_slicedToArray","arr","_arr","_n","_d","_e","_s","err","sliceIterator","defaultOptions","formatExtension","formattedNumber","extension","ext","formatNumber","chooseCountryByCountryCallingCode","addExtension","format_national_number","_ref2","formatRFC3966","fromCountry","IDDPrefix","countryMetadata","defaultIDDPrefix","getIDDPrefix","humanReadable","formattedForSameCountryCallingCode","toCountryCallingCode","toCountryMetadata","fromCountryMetadata","formatIDDSameCountryCallingCodeNumber","FIRST_GROUP_PATTERN","format_national_number_using_format","useInternationalFormat","includeNationalPrefixForNationalFormat","internationalFormat","changeInternationalFormatStyle","format_as","available_formats","leadingDigitsPatterns","last_leading_digits_pattern","search","choose_format_for_number","local","trim","PhoneNumber","isCountryCode","_metadata","isPossibleNumber","isValidNumber","MAX_INPUT_STRING_LENGTH","PHONE_NUMBER_START_PATTERN","AFTER_PHONE_NUMBER_END_PATTERN","defaultCountry","_parse_input","_part$split","_part$split2","parseRFC3966","extract_formatted_phone_number","with_extension_stripped","number_without_extension","matches","match","extractExtension","parse_input","formattedPhoneNumber","_parsePhoneNumber","_extractCountryCallin","extractCountryCallingCode","_parseNationalNumber","carrierCode","_strip_national_prefi","strip_national_prefix_and_carrier_code","potentialNationalNumber","potentialCarrierCode","parseNationalNumber","exactCountry","find_country_code","parsePhoneNumber","selectedCountry","phoneNumber","valid","extended","possible","starts_at","nationalPrefixForParsing","national_prefix_pattern","national_prefix_matcher","exec","national_significant_number","captured_groups_count","nationalPrefixTransformRule","national_prefix","national_phone_number","possible_countries","leadingDigits","_find_country_code","numberWithoutIDD","IDDPrefixPattern","matchedGroups","stripIDDPrefix","isObject","parsePhoneNumberFromString","parseNumber","error","_normalizeArguments","args","_Array$prototype$slic","_Array$prototype$slic2","arg_1","arg_2","arg_3","arg_4","normalizeArguments","parsePhoneNumberFromString_","LONGEST_DUMMY_PHONE_NUMBER","repeat","DIGIT_PLACEHOLDER_MATCHER","ELIGIBLE_FORMAT_PATTERN","VALID_INCOMPLETE_PHONE_NUMBER_PATTERN","AsYouType","reset","extracted_number","processInput","currentOutput","parsedInput","resetCountriness","isInternational","determineTheCountry","initialize_phone_number_formats_for_this_country_calling_code","resetFormat","previous_national_prefix","extractNationalPrefix","matching_formats","format_as_non_formatted_number","match_formats_by_leading_digits","formatted_national_phone_number","formatNationalNumber","formatFullNumber","next_digits","national_number_formatted_with_previous_format","chosenFormat","formatNextNationalNumberDigits","formatted_number","attempt_to_format_complete_phone_number","chooseAnotherFormat","reformatNationalNumber","resetCountry","partially_populated_template","last_match_position","leading_digits","index_of_leading_digits_pattern","had_enough_leading_digits","shouldFormat","leading_digits_patterns_count","leading_digits_pattern_index","Math","min","leading_digits_pattern","isFormatApplicable","createFormattingTemplate","full_number","formattedNationalNumber","_extractCountryCallingCode","potential_national_number","_iterator2","_isArray2","_i2","nationalPrefixIsMandatoryWhenFormatting","getTemplateForNumberFormatPattern","number_pattern","dummy_phone_number_matching_format_pattern","number_format","getFormatFormat","strict_pattern","national_number_dummy_digits","digits","_iterator3","_isArray3","_i3","_ref3","digit","cut_stripping_dangling_braces","cut_before_index","pop","cleared_string","_iterator4","_isArray4","_i4","_ref4","strip_dangling_braces","times","getCountries","getInputValuePrefix","international","concat","removeInputValuePrefix","prefix","excluded","sourceKeys","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","defaultMetadata","InputSmart","getTemplate","React","PropTypes","bool","object","createInput","InputBasic","newValue","formatIncompletePhoneNumber","FlagComponent","countryName","flags","flagUrl","title","alt","src","toLowerCase","InternationalIcon","aspectRatio","InternationalIcon1x1","InternationalIcon3x2","xmlns","viewBox","className","stroke","fill","strokeWidth","strokeMiterlimit","strokeLinecap","d","x1","y1","x2","y2","isCountrySupportedWithError","console","getSupportedCountries","createCountryIconComponent","flagComponent","internationalIcon","CountryIcon","label","_aspectRatio","DefaultInternationalIcon","PhoneInputCountryIcon--square","PhoneInputCountryIcon--border","objectOf","Flag","shape","labels","getPreSelectedCountry","includeInternationalOption","getCountrySelectOptions","country_names","country_select_options","String","localeCompare","compare_strings","unshift","ZZ","e164","partial_national_significant_number","getNationalSignificantNumberDigits","trimNumber","nationalSignificantNumberPart","overflowDigitsCount","getMaxNumberLength","getCountryForPartialE164Number","partialE164Number","derived_country","get_country_from_possibly_incomplete_international_phone_number","could_number_belong_to_country","strip_country_calling_code","country_calling_prefix","_Object$keys","getNumber","ownKeys","enumerableOnly","symbols","sym","getOwnPropertyDescriptor","_objectSpread","forEach","_defineProperty","getOwnPropertyDescriptors","_defineProperties","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","_assertThisInitialized","self","ReferenceError","_setPrototypeOf","p","countrySelectOptionsMemo","countrySelectOptionsMemoDependencies","PhoneNumberInput_","_React$PureComponent","_possibleConstructorReturn","createRef","newCountry","_this$props","_this$state","state","newParsedInput","previous_country","new_country","preferNationalFormat","migrateParsedInputForNewCountry","getInputRef","focus","setState","hasUserSelectedACountry","_input","_this$props2","addInternationalOption","limitMaxLength","_parseInput","prevInput","parseInput","isFocused","_onFocus","onFocus","onBlur","_onBlur","countrySelectProps","_this$props3","_value","_addInternationalOption","_this$props4","countryOptionsOrder","_defaultCountry","generateParsedInput","subClass","superClass","_inherits","_state$props","prevDefaultCountry","prevValue","prevReset","newDefaultCountry","newState","parsedCountry","_countries","onCountryChange","prevProps","prevState","inputRef","generator","dependencies","_this$props5","disabled","autoComplete","style","numberInputProps","smartCaret","CountrySelectComponent","countrySelectComponent","displayInitialValueAsLocalNumber","_this$state2","countrySelectOptions","order","optionsOnTop","optionsOnBottom","appendTo","_loop","divider","option","splice","sortCountryOptions","countryOptions","getSupportedCountryOptions","areEqualArrays","PhoneInput--focus","aria-label","onCountryFocus","onCountryBlur","iconComponent","PureComponent","PhoneNumberInput","formatNational","generateNationalNumberDigits","formatPhoneNumber","formatPhoneNumberIntl","isValidPhoneNumber","isValid","isPossiblePhoneNumber","isPossible","arrayOf","labelsPropType","metadataPropType","any","getRegionalIndicatorSymbol","letter","fromCodePoint","toUpperCase","charCodeAt","CountrySelect","onChange_","useMemo","getSelectedOption","DIVIDER_STYLE","fontSize","backgroundColor","color","CountrySelectWithIcon","Icon","Arrow","getIconAspectRatio","arrowComponent","unicodeFlags","selectedOption","getUnicodeFlagIcon","createPhoneInput","PhoneInputDefault","PhoneInput","_arguments","_formatPhoneNumber","_formatPhoneNumberIntl","_getCountries","_getCountryCallingCode","_isPossiblePhoneNumber","_isValidPhoneNumber"],"mappings":"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"}